1
00:00:00,000 --> 00:00:08,350

2
00:00:08,350 --> 00:00:10,930
SCOTT JENSEN: Can we bring up
the QR code for the session?

3
00:00:10,930 --> 00:00:14,250
Or is that something we have
to do next, after the talk?

4
00:00:14,250 --> 00:00:15,170
After the talk.

5
00:00:15,170 --> 00:00:18,280
So then I will save my little
talk for later, then.

6
00:00:18,280 --> 00:00:20,630
We have a very, very good panel
here of people who are

7
00:00:20,630 --> 00:00:24,230
extremely experienced in,
basically, realtime data.

8
00:00:24,230 --> 00:00:26,070
I strongly recommend that
you just read the panel

9
00:00:26,070 --> 00:00:27,680
introduction from all of them.

10
00:00:27,680 --> 00:00:32,420
We've got Henrik Joreteg right
here, John Fallows, Wesley,

11
00:00:32,420 --> 00:00:34,800
who actually did this lovely
onslyde demonstration as well,

12
00:00:34,800 --> 00:00:36,890
which, by the way,
is right there.

13
00:00:36,890 --> 00:00:39,360
And then to my left, we
have-- is it Martyn?

14
00:00:39,360 --> 00:00:45,020
Martyn, Rob, welcome.

15
00:00:45,020 --> 00:00:46,800
Now that we have the onslyde
up, I really strongly

16
00:00:46,800 --> 00:00:47,860
recommend that you guys
take a look at

17
00:00:47,860 --> 00:00:49,740
that and get it started.

18
00:00:49,740 --> 00:00:52,940
As a perfect introduction to
this talk, If you are on an

19
00:00:52,940 --> 00:00:56,560
iPhone, and you bring up that
web page, and it goes to

20
00:00:56,560 --> 00:00:59,480
sleep, you must refresh the
page, because the website gets

21
00:00:59,480 --> 00:01:01,480
closed down automatically--

22
00:01:01,480 --> 00:01:04,700
perfect introduction as
to why we're here.

23
00:01:04,700 --> 00:01:06,850
I also would like to try using
it during this talk.

24
00:01:06,850 --> 00:01:08,390
So as many of you as possible
can bring it up.

25
00:01:08,390 --> 00:01:10,090
We'll ask some questions
along the way.

26
00:01:10,090 --> 00:01:11,580
We'll see how it goes.

27
00:01:11,580 --> 00:01:13,150
But I think right now, we need
a general introduction.

28
00:01:13,150 --> 00:01:16,770
That's what Henrik's here
for, so please.

29
00:01:16,770 --> 00:01:18,420
HENRIK JORETEG: All right,
let's see if I can get my

30
00:01:18,420 --> 00:01:21,461
slides back on this screen
here, maybe.

31
00:01:21,461 --> 00:01:23,630
Here we go.

32
00:01:23,630 --> 00:01:24,110
Hi, guys.

33
00:01:24,110 --> 00:01:25,510
My name is Henrik Joreteg.

34
00:01:25,510 --> 00:01:29,330
I work at a company called &yet,
and I've been building

35
00:01:29,330 --> 00:01:32,370
realtime web apps now for
about four years.

36
00:01:32,370 --> 00:01:37,370
We started out using XMPP, and
strophe.js, and BOSH, and

37
00:01:37,370 --> 00:01:41,480
XMPP, and all that stuff back
in the day, long polling.

38
00:01:41,480 --> 00:01:44,320
Then WebSockets came out.

39
00:01:44,320 --> 00:01:47,850
We started messing with that,
socket.io and the like.

40
00:01:47,850 --> 00:01:50,372
Recently have gotten
really into WebRTC.

41
00:01:50,372 --> 00:01:52,800
I think it's useful, before we
get to into the technical

42
00:01:52,800 --> 00:01:56,880
stuff, to step back a minute and
realize what this really

43
00:01:56,880 --> 00:01:58,220
does in terms of the web.

44
00:01:58,220 --> 00:01:59,910
The web is really about
human communication.

45
00:01:59,910 --> 00:02:06,450
And so these are my kids, and
they love their grandparents.

46
00:02:06,450 --> 00:02:09,460
The problem is, their
grandparents live in Sweden.

47
00:02:09,460 --> 00:02:13,630
For those of you who with a
typical American geographic

48
00:02:13,630 --> 00:02:16,158
understanding, it's far away.

49
00:02:16,158 --> 00:02:20,030
[LAUGHTER]

50
00:02:20,030 --> 00:02:20,380
HENRIK JORETEG: Sorry.

51
00:02:20,380 --> 00:02:20,840
That's low.

52
00:02:20,840 --> 00:02:21,730
I'm sorry.

53
00:02:21,730 --> 00:02:23,230
This is not this
crowd, I know.

54
00:02:23,230 --> 00:02:26,590

55
00:02:26,590 --> 00:02:30,555
So every Sunday, my kids get to
talk to my parents over an

56
00:02:30,555 --> 00:02:33,940
app we built called Talky.io,
that uses WebRTC.

57
00:02:33,940 --> 00:02:36,220
Talky.io is the first time I've
ever built that actually

58
00:02:36,220 --> 00:02:40,430
passed the mom test, meaning
my parents can use it.

59
00:02:40,430 --> 00:02:44,450
What it is is anytime you're on
the same URL, you're in the

60
00:02:44,450 --> 00:02:45,380
same conversation.

61
00:02:45,380 --> 00:02:48,570
That's all there is to it,
so no login, no auth, no

62
00:02:48,570 --> 00:02:49,620
friending, nothing.

63
00:02:49,620 --> 00:02:50,580
And it's using WebRTC.

64
00:02:50,580 --> 00:02:51,920
There's nothing to install.

65
00:02:51,920 --> 00:02:53,990
It just works.

66
00:02:53,990 --> 00:02:58,010
So to me, it just serves as a
very practical example for how

67
00:02:58,010 --> 00:03:00,320
ultimately these realtime
technologies are actually

68
00:03:00,320 --> 00:03:04,200
bringing people together and
helping make the web better.

69
00:03:04,200 --> 00:03:06,250
So let's talk a little
bit about WebRTC.

70
00:03:06,250 --> 00:03:08,550
We're going to cover other stuff
too, but I want to focus

71
00:03:08,550 --> 00:03:12,350
on this a bit, because it's been
a recent focus of mine.

72
00:03:12,350 --> 00:03:16,200
WebRTC really is a lot more
than video in a browser.

73
00:03:16,200 --> 00:03:21,290
It's actually a low-latency
peer-to-peer networking, and

74
00:03:21,290 --> 00:03:22,740
that's really exciting.

75
00:03:22,740 --> 00:03:24,560
So one of the other cool
examples of what you can do

76
00:03:24,560 --> 00:03:28,810
with this technology
is called PeerCDN.

77
00:03:28,810 --> 00:03:30,390
PeerCDN was actually built
by the same guy

78
00:03:30,390 --> 00:03:31,550
who did Google Instant.

79
00:03:31,550 --> 00:03:35,915
But anyway, it's this really
cool concept of where--

80
00:03:35,915 --> 00:03:39,690
it actually uses data channels
to send files to

81
00:03:39,690 --> 00:03:41,680
other current visitors.

82
00:03:41,680 --> 00:03:45,500
So say, for instance, I'm
hosting a simple little video

83
00:03:45,500 --> 00:03:47,660
site right, and I'm actually
hosting my own videos.

84
00:03:47,660 --> 00:03:50,940
All of a sudden, I'm on Reddit
and I'm getting slammed.

85
00:03:50,940 --> 00:03:53,700
So normally, that would be
expensive for bandwidth.

86
00:03:53,700 --> 00:03:57,360
But in this case, the swarm of
people that are gathering on

87
00:03:57,360 --> 00:03:59,705
your site to watch this footage
can actually download

88
00:03:59,705 --> 00:04:02,710
it from each other.

89
00:04:02,710 --> 00:04:07,485
So you kind of create this
almost ad hoc like BitTorrent

90
00:04:07,485 --> 00:04:10,410
type network, which is really
fascinating, and just kind of

91
00:04:10,410 --> 00:04:13,160
an example of what you
do with this stuff.

92
00:04:13,160 --> 00:04:20,459
Also, given recent stuff with
the NSA and with encryption,

93
00:04:20,459 --> 00:04:23,340
et cetera, et cetera, et cetera,
I actually think

94
00:04:23,340 --> 00:04:25,650
WebRTC is really important
for the web.

95
00:04:25,650 --> 00:04:26,600
It's decentralized.

96
00:04:26,600 --> 00:04:27,700
It's encrypted.

97
00:04:27,700 --> 00:04:28,870
Yes, maybe there's backdoors.

98
00:04:28,870 --> 00:04:29,190
Who knows?

99
00:04:29,190 --> 00:04:32,310
But ultimately, this is stuff
that we should be doing, and

100
00:04:32,310 --> 00:04:34,490
it's a big win for the web.

101
00:04:34,490 --> 00:04:35,870
So how are we doing so far?

102
00:04:35,870 --> 00:04:38,020
Well, let's start
with a story.

103
00:04:38,020 --> 00:04:41,350
A year ago, we built att.js.

104
00:04:41,350 --> 00:04:46,330
att.js was kind of a
demonstration used at CES by

105
00:04:46,330 --> 00:04:49,990
AT&T to demonstrate making and
receiving actual phone calls

106
00:04:49,990 --> 00:04:53,490
in a browser using WebRTC, which
was cool we got it to

107
00:04:53,490 --> 00:04:55,410
work, but with way
too many caveats.

108
00:04:55,410 --> 00:04:58,600
It actually required running a
certain modified version of

109
00:04:58,600 --> 00:05:01,390
Chromium that the Ericsson
team was maintaining--

110
00:05:01,390 --> 00:05:02,930
not ideal.

111
00:05:02,930 --> 00:05:03,860
It's gotten better.

112
00:05:03,860 --> 00:05:06,780
So if you look at this, here
what we actually have is a

113
00:05:06,780 --> 00:05:10,910
Nexus 4 running Firefox Nightly,
a Nexus 7 running

114
00:05:10,910 --> 00:05:15,100
Chrome for Android, and then a
desktop running Firefox Stable

115
00:05:15,100 --> 00:05:16,980
and Chrome Stable,
all in the same

116
00:05:16,980 --> 00:05:19,860
conversation at the same time.

117
00:05:19,860 --> 00:05:20,640
It's gotten better.

118
00:05:20,640 --> 00:05:23,730
It's available now on some
mobile devices, and

119
00:05:23,730 --> 00:05:26,890
interoperability is improving
for voice and video.

120
00:05:26,890 --> 00:05:27,630
Sweet, so we're good.

121
00:05:27,630 --> 00:05:28,240
We can all go home.

122
00:05:28,240 --> 00:05:29,760
We should just use
this, right?

123
00:05:29,760 --> 00:05:32,110
Nope.

124
00:05:32,110 --> 00:05:35,560
WebRTC is still quite finicky,
and if you try to do anything

125
00:05:35,560 --> 00:05:37,750
with it, you've probably
discovered this.

126
00:05:37,750 --> 00:05:39,860
So just to give an example,
here's what you have to do to

127
00:05:39,860 --> 00:05:42,700
set up a video call right
now between two users.

128
00:05:42,700 --> 00:05:44,370
So first of all, getting
user media-- it

129
00:05:44,370 --> 00:05:45,140
sounds really simple.

130
00:05:45,140 --> 00:05:47,340
You request access to
their camera and

131
00:05:47,340 --> 00:05:49,080
their microphone, right?

132
00:05:49,080 --> 00:05:49,810
You'd think.

133
00:05:49,810 --> 00:05:52,100
The methods are still prefixed,
which is fine.

134
00:05:52,100 --> 00:05:53,870
I mean, that's to be expected.

135
00:05:53,870 --> 00:05:55,220
They throw very different
error types.

136
00:05:55,220 --> 00:05:58,060
So in Firefox, the error handler
that you give it will

137
00:05:58,060 --> 00:05:59,330
give you a string back.

138
00:05:59,330 --> 00:06:01,020
In Chrome, it will give you
an error object, as

139
00:06:01,020 --> 00:06:01,750
it's supposed to.

140
00:06:01,750 --> 00:06:03,720
But neither quite follows the
spec as far as telling you

141
00:06:03,720 --> 00:06:04,840
what went wrong.

142
00:06:04,840 --> 00:06:08,720
So in addition, specifying
constraints for like, hey, I

143
00:06:08,720 --> 00:06:13,210
want a smaller video, is
available with limited support

144
00:06:13,210 --> 00:06:16,430
in Chrome, and not at all in
Firefox at the moment.

145
00:06:16,430 --> 00:06:19,160
Screen sharing, which is
actually really important for

146
00:06:19,160 --> 00:06:23,470
replacing something like Skype
or Google Hangouts, is

147
00:06:23,470 --> 00:06:26,110
available in Chrome, but it's
behind a flag, very hard to

148
00:06:26,110 --> 00:06:29,490
detect error types,
requires HTTPS.

149
00:06:29,490 --> 00:06:31,210
So even if you're running local
host, and if you don't

150
00:06:31,210 --> 00:06:34,400
have your own self-signed cert
or something, it'll just fail

151
00:06:34,400 --> 00:06:37,230
silently, and you
won't know why.

152
00:06:37,230 --> 00:06:38,840
So as a result, what do we do?

153
00:06:38,840 --> 00:06:39,720
We create abstractions.

154
00:06:39,720 --> 00:06:43,940
So we wrote a getUserMedia
module to handle that part.

155
00:06:43,940 --> 00:06:45,550
Attaching a media stream--

156
00:06:45,550 --> 00:06:48,670
so once you request media, you
have this stream object, and

157
00:06:48,670 --> 00:06:51,120
it's your job to then attach
that to, say, a video element

158
00:06:51,120 --> 00:06:53,570
or an audio element.

159
00:06:53,570 --> 00:06:54,610
This has gotten better.

160
00:06:54,610 --> 00:06:56,180
The APIs are more similar now.

161
00:06:56,180 --> 00:06:58,280
But you have to convert
into a blob URL,

162
00:06:58,280 --> 00:07:00,550
attach it as a source.

163
00:07:00,550 --> 00:07:01,660
In Chrome, you set
autoplay to true.

164
00:07:01,660 --> 00:07:03,900
In Firefox, you attach
it and call play.

165
00:07:03,900 --> 00:07:06,220
Point is, there's differences.

166
00:07:06,220 --> 00:07:08,980
And often, you want to mute the
user's own video so they

167
00:07:08,980 --> 00:07:12,140
don't echo back to themselves,
et cetera.

168
00:07:12,140 --> 00:07:14,680
So again, now that's another
thing that should be simple

169
00:07:14,680 --> 00:07:18,140
now has become another module
that we're making.

170
00:07:18,140 --> 00:07:22,620
So beyond that, a thing that a
lot of people don't understand

171
00:07:22,620 --> 00:07:25,440
about peer-to-peer is
ultimately, you have to have

172
00:07:25,440 --> 00:07:29,210
some mechanism for the two peers
to discover each other.

173
00:07:29,210 --> 00:07:30,810
It's not like we just magically
know each other's

174
00:07:30,810 --> 00:07:34,410
external IPs and we can just
send stuff directly.

175
00:07:34,410 --> 00:07:36,850
And this is not in
the spec at all.

176
00:07:36,850 --> 00:07:39,930
It's purposely left out, so
it's totally greenfield.

177
00:07:39,930 --> 00:07:42,210
I actually think that's good.

178
00:07:42,210 --> 00:07:43,760
But that means as a developer,
you have to

179
00:07:43,760 --> 00:07:44,470
do a lot more work.

180
00:07:44,470 --> 00:07:47,680
You have to help the users
discover each other.

181
00:07:47,680 --> 00:07:50,660
You have to help them figure out
how to pass data messages

182
00:07:50,660 --> 00:07:53,460
directly to another user, which
is now something that's

183
00:07:53,460 --> 00:07:55,140
necessarily in the
tool belt of the

184
00:07:55,140 --> 00:07:57,330
average JavaScript developer.

185
00:07:57,330 --> 00:08:00,190
So now you need some kind of
server technology as well to

186
00:08:00,190 --> 00:08:01,750
be able to handle this.

187
00:08:01,750 --> 00:08:04,610
With socket.io, it's not hard,
but it's still something

188
00:08:04,610 --> 00:08:07,460
that's new for a
lot of people.

189
00:08:07,460 --> 00:08:10,150
In addition, you have to do
some level of capabilities

190
00:08:10,150 --> 00:08:11,220
detection for certain things.

191
00:08:11,220 --> 00:08:15,570
So for example, if you do screen
sharing from Chrome, it

192
00:08:15,570 --> 00:08:18,050
won't appear for
a Firefox user.

193
00:08:18,050 --> 00:08:19,650
But there's no way that
you would know that

194
00:08:19,650 --> 00:08:21,470
programmatically without
specifying through the

195
00:08:21,470 --> 00:08:23,670
signaling channel that hey,
you've got users in this chat

196
00:08:23,670 --> 00:08:25,560
who are actually on Firefox.

197
00:08:25,560 --> 00:08:27,930
So there's just a few
oddities like that.

198
00:08:27,930 --> 00:08:31,660
So then we write a
signaling server.

199
00:08:31,660 --> 00:08:33,929
So peer connection-- so
this is the mother.

200
00:08:33,929 --> 00:08:37,450
This is the thing that
does it all.

201
00:08:37,450 --> 00:08:38,690
This has some quirks as well.

202
00:08:38,690 --> 00:08:40,860
So first of all, the
prefix, which is,

203
00:08:40,860 --> 00:08:42,500
again, to be expected.

204
00:08:42,500 --> 00:08:45,090
I don't think that's
a bad thing.

205
00:08:45,090 --> 00:08:46,010
CreateDataChannel--

206
00:08:46,010 --> 00:08:47,960
so this is the data stuff that
we're going to talk about.

207
00:08:47,960 --> 00:08:51,140
This is extremely finicky
at the moment.

208
00:08:51,140 --> 00:08:53,830
So you have to pass a very
specific set of options to

209
00:08:53,830 --> 00:08:57,100
create a reliable channel versus
a unreliable channel.

210
00:08:57,100 --> 00:08:59,040
It's supposed to be reliable
true or false, but that

211
00:08:59,040 --> 00:09:02,600
doesn't actually work
in either browser.

212
00:09:02,600 --> 00:09:05,460
As I was just talking to Kyle
about, there is an upload

213
00:09:05,460 --> 00:09:08,370
limitation in the default
settings for Chrome.

214
00:09:08,370 --> 00:09:13,580
So in order to actually get this
to work, if you want to

215
00:09:13,580 --> 00:09:16,000
pass a file around, you have
to actually modify the FTP

216
00:09:16,000 --> 00:09:17,460
that you send--

217
00:09:17,460 --> 00:09:19,330
tricky stuff.

218
00:09:19,330 --> 00:09:21,720
So anyway, we write a
wrapper for that.

219
00:09:21,720 --> 00:09:22,550
Other challenges--

220
00:09:22,550 --> 00:09:25,600
data channels are currently
not at all interoperable

221
00:09:25,600 --> 00:09:27,400
between Chrome and Firefox.

222
00:09:27,400 --> 00:09:30,460
You can only do one video
stream per connection.

223
00:09:30,460 --> 00:09:32,690
And all of this is just--

224
00:09:32,690 --> 00:09:34,750
there are other browsers
that will do this.

225
00:09:34,750 --> 00:09:36,800
So it's not going to
get any better.

226
00:09:36,800 --> 00:09:39,370
WebRTC is also unique in that--
this is actually the

227
00:09:39,370 --> 00:09:41,880
first time I know of where
browsers have to speak

228
00:09:41,880 --> 00:09:43,710
directly to each other.

229
00:09:43,710 --> 00:09:44,710
There's no intermediary.

230
00:09:44,710 --> 00:09:47,470
So once you set up a signaling
channel, they better be

231
00:09:47,470 --> 00:09:48,140
interoperable.

232
00:09:48,140 --> 00:09:50,090
That's a whole new level of
spec compliance that's

233
00:09:50,090 --> 00:09:52,760
required in order to
make that work.

234
00:09:52,760 --> 00:09:55,860
And I can only imagine how
interesting it will be if

235
00:09:55,860 --> 00:09:58,370
Microsoft and Internet
Explorer decide

236
00:09:58,370 --> 00:10:01,070
to do this as well.

237
00:10:01,070 --> 00:10:03,630
So I wrote a library called
simpleWebRTC.

238
00:10:03,630 --> 00:10:05,900
Just basically, you provide
a container for local, you

239
00:10:05,900 --> 00:10:08,950
provide a container for remote
videos, and when it's ready,

240
00:10:08,950 --> 00:10:10,920
you join the room
and it works.

241
00:10:10,920 --> 00:10:12,940
Makes a bunch of assumptions,
but this is the kind of stuff

242
00:10:12,940 --> 00:10:15,710
you need in order to actually
make this approachable.

243
00:10:15,710 --> 00:10:17,400
There's alternatives,
obviously.

244
00:10:17,400 --> 00:10:21,880
There's PeerJS, focused on data
channels, OpenTok, and

245
00:10:21,880 --> 00:10:23,710
there's another guy who's done
a bunch of interesting

246
00:10:23,710 --> 00:10:24,595
experiments.

247
00:10:24,595 --> 00:10:27,670
I'm kind of running
out of time here.

248
00:10:27,670 --> 00:10:31,560
Anyway, the big thing I think
that's really important is

249
00:10:31,560 --> 00:10:34,070
tinkerability is actually what
drives adoption of new

250
00:10:34,070 --> 00:10:35,160
technologies.

251
00:10:35,160 --> 00:10:38,630
So we like to play with new
stuff, but not everybody does.

252
00:10:38,630 --> 00:10:41,640
So in the same way that jQuery
made the DOM accessible to

253
00:10:41,640 --> 00:10:44,160
lots of people, socket.io
made WebSockets

254
00:10:44,160 --> 00:10:46,000
accessible to a lot of people.

255
00:10:46,000 --> 00:10:48,030
Abstraction libraries such
as simpleWebRTC--

256
00:10:48,030 --> 00:10:50,130
I don't care if it's that or
something else-- but hopefully

257
00:10:50,130 --> 00:10:53,640
makes it accessible to
more people as well.

258
00:10:53,640 --> 00:10:56,700
And we really just need more
open web hackers to really get

259
00:10:56,700 --> 00:10:59,040
into this stuff and build
things with it.

260
00:10:59,040 --> 00:11:00,850
If not, it's going to be
relegated into one of these,

261
00:11:00,850 --> 00:11:02,440
like, hey, this would have
been nice, and it never

262
00:11:02,440 --> 00:11:03,850
actually worked.

263
00:11:03,850 --> 00:11:05,950
I really think that if you have
haven't been playing with

264
00:11:05,950 --> 00:11:08,750
WebRTC, get in there, built
stuff with it, make it happen.

265
00:11:08,750 --> 00:11:10,680
It's phenomenal technology.

266
00:11:10,680 --> 00:11:14,040
It just needs people
to make it work--

267
00:11:14,040 --> 00:11:17,260
so file bugs, feedback,
improve APIs, push for

268
00:11:17,260 --> 00:11:19,720
interoperability.

269
00:11:19,720 --> 00:11:22,000
We made a little site with
a compatibility chart.

270
00:11:22,000 --> 00:11:25,430
We're also piping kind of
feedback data from actual

271
00:11:25,430 --> 00:11:28,910
humans about the quality
of the connections.

272
00:11:28,910 --> 00:11:30,550
But I encourage you
get involved.

273
00:11:30,550 --> 00:11:33,045
Let's make the open web even
more awesome with WebRTC.

274
00:11:33,045 --> 00:11:35,000
Thanks, guys.

275
00:11:35,000 --> 00:11:39,810
[APPLAUSE]

276
00:11:39,810 --> 00:11:42,100
MALE SPEAKER: OK, first as a
test, can we bring up the

277
00:11:42,100 --> 00:11:43,350
moderator screen again?

278
00:11:43,350 --> 00:11:45,730

279
00:11:45,730 --> 00:11:46,490
OK.

280
00:11:46,490 --> 00:11:47,080
I want to see.

281
00:11:47,080 --> 00:11:48,440
We have 40 people connected
right now.

282
00:11:48,440 --> 00:11:50,260
Let's just do a quick test.

283
00:11:50,260 --> 00:11:53,070
How many of you would
be lying if you said

284
00:11:53,070 --> 00:11:56,330
you liked the talk?

285
00:11:56,330 --> 00:11:57,580
This is a test.

286
00:11:57,580 --> 00:12:00,370

287
00:12:00,370 --> 00:12:01,880
It was a logic question, guys.

288
00:12:01,880 --> 00:12:05,120
Work with me here.

289
00:12:05,120 --> 00:12:06,590
Excellent, good.

290
00:12:06,590 --> 00:12:07,750
I just wanted to see if we
got lots of numbers.

291
00:12:07,750 --> 00:12:08,630
That's all I wanted to see.

292
00:12:08,630 --> 00:12:12,250
So OK, now that that's working,
I would like to

293
00:12:12,250 --> 00:12:14,250
follow what Steve said, which
is to have each person take

294
00:12:14,250 --> 00:12:16,940
about 60 seconds to say any
comments, things you'd like to

295
00:12:16,940 --> 00:12:18,380
add on Henrik's introductory
talk.

296
00:12:18,380 --> 00:12:22,010
So if we could start
with Martyn.

297
00:12:22,010 --> 00:12:23,660
MARTYN LOUGHRAN: Is
this working?

298
00:12:23,660 --> 00:12:28,530
So Henrik's done some great work
on WebRTC, and it's very

299
00:12:28,530 --> 00:12:29,970
interesting, especially
the data channel

300
00:12:29,970 --> 00:12:32,090
stuff, in my opinion.

301
00:12:32,090 --> 00:12:35,000
But I think we shouldn't
forget about other

302
00:12:35,000 --> 00:12:35,760
technologies.

303
00:12:35,760 --> 00:12:38,550
WebSockets, it's only
two years old.

304
00:12:38,550 --> 00:12:41,030
It's only just now becoming
really available in a lot of

305
00:12:41,030 --> 00:12:43,825
browsers, and there's a huge
amount of stuff we can do with

306
00:12:43,825 --> 00:12:47,261
a TCP connection
to the browser.

307
00:12:47,261 --> 00:12:47,680
MALE SPEAKER: OK.

308
00:12:47,680 --> 00:12:49,140
Rob?

309
00:12:49,140 --> 00:12:50,940
ROB: Yeah, I mean, there's not
a huge amount to add to that.

310
00:12:50,940 --> 00:12:53,470
But from my point of view, I
think what's most interesting,

311
00:12:53,470 --> 00:12:55,720
particularly with WebRTC,
is the use

312
00:12:55,720 --> 00:12:57,210
beyond audio and video.

313
00:12:57,210 --> 00:13:01,620
So I'm keen to discuss a little
bit more into those use

314
00:13:01,620 --> 00:13:05,550
cases, perhaps games, the CDN
stuff, just hearing a little

315
00:13:05,550 --> 00:13:08,590
bit more about what's next.

316
00:13:08,590 --> 00:13:10,190
I mean, we have the
implementation today, and

317
00:13:10,190 --> 00:13:11,180
there's issues with that.

318
00:13:11,180 --> 00:13:13,750
But what could we do next
to make things better?

319
00:13:13,750 --> 00:13:14,720
MALE SPEAKER: Excellent.

320
00:13:14,720 --> 00:13:16,320
John?

321
00:13:16,320 --> 00:13:19,430
JOHN FALLOWS: I agree with the
point made earlier about other

322
00:13:19,430 --> 00:13:21,540
technologies being highly
relevant here.

323
00:13:21,540 --> 00:13:24,430
I think they're each set out to
solve different problems.

324
00:13:24,430 --> 00:13:28,290
And the talk about the point
about signaling channels, I

325
00:13:28,290 --> 00:13:31,180
think going through a server
intermediary, technologies

326
00:13:31,180 --> 00:13:33,490
like WebSocket are ideally
suited to that.

327
00:13:33,490 --> 00:13:35,930
And WebRTC, of course, is
ideally targeted at the

328
00:13:35,930 --> 00:13:37,500
peer-to-peer direct
connectivity.

329
00:13:37,500 --> 00:13:40,510
So I see it as a very powerful
blend of technologies as the

330
00:13:40,510 --> 00:13:42,320
web evolves going forward.

331
00:13:42,320 --> 00:13:43,010
MALE SPEAKER: And Wesley?

332
00:13:43,010 --> 00:13:44,430
WESLEY: Yes.

333
00:13:44,430 --> 00:13:46,330
The centralized part
is a little--

334
00:13:46,330 --> 00:13:47,830
we've got to get past that.

335
00:13:47,830 --> 00:13:51,550
But for instance, for this tool,
all the remotes you're

336
00:13:51,550 --> 00:13:54,860
holding your hand, it would be
cool if we pull up WebRTC to

337
00:13:54,860 --> 00:13:55,660
use the mic.

338
00:13:55,660 --> 00:13:57,890
And that way, you wouldn't have
people running around

339
00:13:57,890 --> 00:13:58,650
handing mics out.

340
00:13:58,650 --> 00:14:02,640
So there's so many use cases,
so many possibilities.

341
00:14:02,640 --> 00:14:03,590
MALE SPEAKER: Excellent.

342
00:14:03,590 --> 00:14:06,800
OK, I think we'd like to move
to our first question.

343
00:14:06,800 --> 00:14:09,090
I think that's Andrew Betts,
if you'd like to--

344
00:14:09,090 --> 00:14:14,800

345
00:14:14,800 --> 00:14:16,590
do we have a microphone
for Andrew?

346
00:14:16,590 --> 00:14:17,975
ANDREW BETTS: I've actually
got the lapel mic,

347
00:14:17,975 --> 00:14:19,920
so I should be fine.

348
00:14:19,920 --> 00:14:23,010

349
00:14:23,010 --> 00:14:27,320
I've got 100 notes here, so
just bear with me second.

350
00:14:27,320 --> 00:14:29,420
So WebSockets and other
realtime protocols are

351
00:14:29,420 --> 00:14:32,390
commonly blocked by corporate
proxies and content inspection

352
00:14:32,390 --> 00:14:36,180
firewalls, and that's a
particular problem for the

353
00:14:36,180 --> 00:14:38,150
customers we have at the FT.

354
00:14:38,150 --> 00:14:40,852
How much is this stifling
adoption, and what

355
00:14:40,852 --> 00:14:42,460
can we do about it?

356
00:14:42,460 --> 00:14:45,090
MALE SPEAKER: Would anyone
like to take that?

357
00:14:45,090 --> 00:14:48,330
JOHN FALLOWS: So I think, just
taking a little step back into

358
00:14:48,330 --> 00:14:52,360
history, when WebSocket was
first added to the HTML5

359
00:14:52,360 --> 00:14:55,240
specification, it wasn't
even called WebSocket.

360
00:14:55,240 --> 00:14:57,430
It was called TCP connection.

361
00:14:57,430 --> 00:15:01,190
And when we saw that show up, we
decided to hop on that and

362
00:15:01,190 --> 00:15:04,800
try to improve the protocol to
make it web-centric and bring

363
00:15:04,800 --> 00:15:07,030
HTTP to bear, so it
was actually a

364
00:15:07,030 --> 00:15:08,450
web-compatible handshake.

365
00:15:08,450 --> 00:15:11,720
And the reason that we did that
was to avoid tripping

366
00:15:11,720 --> 00:15:13,630
over some of the problems we've
seen before on plugin

367
00:15:13,630 --> 00:15:15,360
technologies getting defeated
by corporate firewalls.

368
00:15:15,360 --> 00:15:18,460
So we felt that was a huge step
in the right direction.

369
00:15:18,460 --> 00:15:22,240
Now, even given that, we still
find situations where even

370
00:15:22,240 --> 00:15:25,730
though all the traffic might be
over port 80 and 443, even

371
00:15:25,730 --> 00:15:28,010
with recrypting firewalls and
things like that, that they

372
00:15:28,010 --> 00:15:29,820
can still intercept.

373
00:15:29,820 --> 00:15:31,265
But it's definitely a much
better situation

374
00:15:31,265 --> 00:15:32,140
that it used to be.

375
00:15:32,140 --> 00:15:35,510
And in our particular case at
Kaazing, we've implemented

376
00:15:35,510 --> 00:15:39,670
some heavy lifting on the
emulation side to even be

377
00:15:39,670 --> 00:15:42,230
resilient in those situations.

378
00:15:42,230 --> 00:15:45,410
Initially, we wrote the
emulation stuff to kind of

379
00:15:45,410 --> 00:15:48,470
precede the adoption of the
standard so we could get

380
00:15:48,470 --> 00:15:51,340
started with socket
architectures

381
00:15:51,340 --> 00:15:52,470
over five years ago.

382
00:15:52,470 --> 00:15:56,250
But moving forward, it tends
to become something that's

383
00:15:56,250 --> 00:15:59,140
still there to support older
clients, but also to address

384
00:15:59,140 --> 00:16:00,980
that any intermediaries that
might be getting in the way.

385
00:16:00,980 --> 00:16:02,450
MALE SPEAKER: Are you saying
it's not a problem, or it's

386
00:16:02,450 --> 00:16:03,770
easy to work around?

387
00:16:03,770 --> 00:16:07,690
JOHN FALLOWS: On the vanilla RFC
support for the protocol,

388
00:16:07,690 --> 00:16:09,920
encryption is a big help.

389
00:16:09,920 --> 00:16:11,970
But even in those situations,
there can be intermediaries

390
00:16:11,970 --> 00:16:14,300
that will decrypt and recrypt
on the critical path and can

391
00:16:14,300 --> 00:16:15,500
still intercept.

392
00:16:15,500 --> 00:16:17,980
And then there's also many
WebSockets that don't want to

393
00:16:17,980 --> 00:16:19,860
be encrypted for other
reasons, in terms of

394
00:16:19,860 --> 00:16:21,520
performance and things
like that.

395
00:16:21,520 --> 00:16:23,560
From our perspective,
we've seen it be an

396
00:16:23,560 --> 00:16:25,800
issue in the wild.

397
00:16:25,800 --> 00:16:32,100
For non-compliant browsers
trying to do emulation, we

398
00:16:32,100 --> 00:16:33,900
found ways in our emulation
technique to address those

399
00:16:33,900 --> 00:16:35,312
shortcomings.

400
00:16:35,312 --> 00:16:36,550
MALE SPEAKER: Any
other comments?

401
00:16:36,550 --> 00:16:38,510
MARTYN LOUGHRAN: I'll just
make one little comment.

402
00:16:38,510 --> 00:16:42,160
I would say for this
kind of audience,

403
00:16:42,160 --> 00:16:43,120
there's very little barrier.

404
00:16:43,120 --> 00:16:46,010
You can jump on with
WebSockets.

405
00:16:46,010 --> 00:16:49,410
But if you really want to
address all use cases, as John

406
00:16:49,410 --> 00:16:51,400
says, SSL does help.

407
00:16:51,400 --> 00:16:54,980
But you need to think about
other fallback strategies.

408
00:16:54,980 --> 00:16:57,450
One of the things that would
really help, and which we

409
00:16:57,450 --> 00:17:01,660
maybe could think about, is we
do, at Pusher, a lot of work

410
00:17:01,660 --> 00:17:06,780
to try to reuse successful
transports, again.

411
00:17:06,780 --> 00:17:09,119
But we don't really have enough
information about the

412
00:17:09,119 --> 00:17:12,180
browser's network connection
to always able to make good

413
00:17:12,180 --> 00:17:13,240
connections.

414
00:17:13,240 --> 00:17:16,800
So maybe that's something that
we can talk about later, how

415
00:17:16,800 --> 00:17:18,550
we can discover--

416
00:17:18,550 --> 00:17:22,220
like in the responsive images
discussion this morning, we

417
00:17:22,220 --> 00:17:24,690
were saying that the browser has
more information than the

418
00:17:24,690 --> 00:17:25,530
web application.

419
00:17:25,530 --> 00:17:28,329
This is a case where the web
application could do with some

420
00:17:28,329 --> 00:17:30,910
more information, really.

421
00:17:30,910 --> 00:17:32,550
MALE SPEAKER: And the audience
clearly likes that comment.

422
00:17:32,550 --> 00:17:35,310

423
00:17:35,310 --> 00:17:36,066
One of the--

424
00:17:36,066 --> 00:17:39,330
[LAUGHTER]

425
00:17:39,330 --> 00:17:41,210
MALE SPEAKER: That
was awesome.

426
00:17:41,210 --> 00:17:42,350
Keep that up.

427
00:17:42,350 --> 00:17:43,600
That was awesome.

428
00:17:43,600 --> 00:17:47,960
One of the comments on the
Google Monitor said that TLS,

429
00:17:47,960 --> 00:17:50,340
actually, is an effective
way around this.

430
00:17:50,340 --> 00:17:53,140
Any comments on TLS being
a useful thing?

431
00:17:53,140 --> 00:17:55,070
MARTYN LOUGHRAN: Yeah,
John just said that.

432
00:17:55,070 --> 00:17:56,190
We find that.

433
00:17:56,190 --> 00:17:57,840
But unfortunately, there
are examples.

434
00:17:57,840 --> 00:18:01,330
I mean, for us, we've had
schools, for example, and they

435
00:18:01,330 --> 00:18:03,280
often block SSL.

436
00:18:03,280 --> 00:18:07,525
And there, you've got a kind
of pretty bad situation.

437
00:18:07,525 --> 00:18:08,400
MALE SPEAKER: Do you
have any comments?

438
00:18:08,400 --> 00:18:09,360
Do you want to move onto
the next question?

439
00:18:09,360 --> 00:18:10,770
HENRIK JORETEG: Well, this
problem is very relevant to

440
00:18:10,770 --> 00:18:12,300
WebRTC as well.

441
00:18:12,300 --> 00:18:15,393
The whole concept of punching
through a firewall to get

442
00:18:15,393 --> 00:18:17,520
something that you can push
directly to an end user is

443
00:18:17,520 --> 00:18:18,520
actually really difficult.

444
00:18:18,520 --> 00:18:22,170
And this is something that the
likes of Apple and Skype have

445
00:18:22,170 --> 00:18:25,050
spent lots and lots of money
trying to solve.

446
00:18:25,050 --> 00:18:27,860
And I would really love to see
some of these technologies be

447
00:18:27,860 --> 00:18:29,820
more broadly available.

448
00:18:29,820 --> 00:18:31,430
There's a few open
source projects.

449
00:18:31,430 --> 00:18:34,190
There's a server called stund.

450
00:18:34,190 --> 00:18:38,030
But a lot of these are really
difficult problems, and I wish

451
00:18:38,030 --> 00:18:41,500
that there were more openly
well-documented solutions to

452
00:18:41,500 --> 00:18:44,430
dealing with this, rather than
having to, as a blog post that

453
00:18:44,430 --> 00:18:47,550
came out yesterday did, actually
try to decrypt what's

454
00:18:47,550 --> 00:18:49,330
going on with Facetime, and
what they're doing to

455
00:18:49,330 --> 00:18:51,380
multiplex ports, and
all kinds of stuff.

456
00:18:51,380 --> 00:18:53,370
This is not my area of
expertise, but I know there

457
00:18:53,370 --> 00:18:55,630
are people here who are really
good at this stuff.

458
00:18:55,630 --> 00:18:57,210
And please, please
share your work.

459
00:18:57,210 --> 00:19:02,590
This stuff is needed in order
to make WebRTC good.

460
00:19:02,590 --> 00:19:03,730
MALE SPEAKER: OK.

461
00:19:03,730 --> 00:19:06,400
The next question is
up by someone--

462
00:19:06,400 --> 00:19:09,020
is it Gus [? Gusenz? ?]

463
00:19:09,020 --> 00:19:10,740
If we can get him
a mic, please.

464
00:19:10,740 --> 00:19:20,925

465
00:19:20,925 --> 00:19:22,010
AUDIENCE: Hi.

466
00:19:22,010 --> 00:19:24,450
There seems to be some
functional overlap between

467
00:19:24,450 --> 00:19:27,890
WebSockets and WebRTC.

468
00:19:27,890 --> 00:19:29,800
When should you use
one or the other?

469
00:19:29,800 --> 00:19:33,890

470
00:19:33,890 --> 00:19:35,510
HENRIK JORETEG: I
can take that.

471
00:19:35,510 --> 00:19:38,620
So the fundamental difference
is WebRTC is designed to be

472
00:19:38,620 --> 00:19:40,140
peer-to-peer.

473
00:19:40,140 --> 00:19:44,257
So WebSockets, if you're going
server-to-client, that's a

474
00:19:44,257 --> 00:19:48,790
better use for that.

475
00:19:48,790 --> 00:19:51,300
I think really where the
comparison comes from is the

476
00:19:51,300 --> 00:19:53,760
fact that once you've
established a data channel,

477
00:19:53,760 --> 00:19:55,930
it's largely the same API.

478
00:19:55,930 --> 00:19:58,850
Beyond that, they're different
technologies.

479
00:19:58,850 --> 00:20:00,800
So if you're going peer-to-peer,
WebRTC.

480
00:20:00,800 --> 00:20:05,280
If you're going through a
server, then WebSockets.

481
00:20:05,280 --> 00:20:05,950
MALE SPEAKER: Go
ahead, please.

482
00:20:05,950 --> 00:20:08,480
ROB: I was just going to say,
one of the other main

483
00:20:08,480 --> 00:20:11,380
differences as well is, again,
looking at beyond just video

484
00:20:11,380 --> 00:20:14,210
and audio, say for example
multiplayer games.

485
00:20:14,210 --> 00:20:17,300
WebSockets and WebRTC are
incredibly different because,

486
00:20:17,300 --> 00:20:18,750
one's UDP and one's TCP.

487
00:20:18,750 --> 00:20:21,250
So you have unreliable data
connections and reliable data

488
00:20:21,250 --> 00:20:25,890
connections, which just allow
for a very different way of

489
00:20:25,890 --> 00:20:28,310
doing multiplayer
communication.

490
00:20:28,310 --> 00:20:30,860
You just cannot do a
twitch-based multiplayer game

491
00:20:30,860 --> 00:20:33,370
using WebSockets, because you
have to wait for things to

492
00:20:33,370 --> 00:20:34,530
come through.

493
00:20:34,530 --> 00:20:38,900
But WebRTC is allowing us to
technologies that we've been

494
00:20:38,900 --> 00:20:40,600
using in native environments

495
00:20:40,600 --> 00:20:41,490
MALE SPEAKER: Do you want
to jump in on that?

496
00:20:41,490 --> 00:20:42,660
HENRIK JORETEG: I was just going
to say, the support is a

497
00:20:42,660 --> 00:20:46,330
little flaky for reliable and
unreliable data channels.

498
00:20:46,330 --> 00:20:50,750
But it's part of the spec to
include both, so hopefully

499
00:20:50,750 --> 00:20:53,240
that becomes easier to use.

500
00:20:53,240 --> 00:20:54,360
MARTYN LOUGHRAN: One of the
things I would think that

501
00:20:54,360 --> 00:20:58,080
we're likely to see as the
unreliable data channels

502
00:20:58,080 --> 00:21:02,530
become reliable is that
actually, people will want

503
00:21:02,530 --> 00:21:04,290
implement this on
the server side.

504
00:21:04,290 --> 00:21:07,700
And so to be able to communicate
with a game server

505
00:21:07,700 --> 00:21:10,900
via UDP from a browser is
a pretty big thing.

506
00:21:10,900 --> 00:21:12,630
JOHN FALLOWS: Yeah, I think
that's a great point.

507
00:21:12,630 --> 00:21:16,060
And also, I think we touched
on it earlier as well about

508
00:21:16,060 --> 00:21:20,170
using WebSocket server-centric
strategies for signaling and

509
00:21:20,170 --> 00:21:24,630
setup around WebRTC is another
interesting variant.

510
00:21:24,630 --> 00:21:28,100
One other thing I would mention
as well in deployments

511
00:21:28,100 --> 00:21:30,320
in certain industries,
obviously, the security

512
00:21:30,320 --> 00:21:32,630
boundaries of these things
often crop up.

513
00:21:32,630 --> 00:21:35,630
So it's a very interesting
challenge to address some of

514
00:21:35,630 --> 00:21:40,000
those boundaries of where the
trust boundaries reside

515
00:21:40,000 --> 00:21:42,770
amongst the users and amongst
the server, in a consistent

516
00:21:42,770 --> 00:21:45,400
manner across both
technologies.

517
00:21:45,400 --> 00:21:48,430
MALE SPEAKER: Isn't there a
perception that this is like a

518
00:21:48,430 --> 00:21:50,960
classic web thing, where we've
got one standard that doesn't

519
00:21:50,960 --> 00:21:52,790
quite work, so we come up
with another standard

520
00:21:52,790 --> 00:21:53,860
that overlaps a bit.

521
00:21:53,860 --> 00:21:55,950
And it's just kind of confusing,
because they kind

522
00:21:55,950 --> 00:21:57,340
of are somewhat related.

523
00:21:57,340 --> 00:21:59,680
Or can we really say that
there's a pure vision of each

524
00:21:59,680 --> 00:22:01,980
one of these things, and
they can both be

525
00:22:01,980 --> 00:22:05,090
parallel and it's OK?

526
00:22:05,090 --> 00:22:06,510
JOHN FALLOWS: As I said earlier,
I think these are

527
00:22:06,510 --> 00:22:09,900
complementary technologies
that create a powerful

528
00:22:09,900 --> 00:22:11,280
combination as we
move forward.

529
00:22:11,280 --> 00:22:13,650
And I think they have
well-suited

530
00:22:13,650 --> 00:22:15,070
purposes in each way.

531
00:22:15,070 --> 00:22:20,310
I also think that there's
certain issues, like the

532
00:22:20,310 --> 00:22:22,570
ability to successfully
navigate through these

533
00:22:22,570 --> 00:22:26,890
firewalls and proxies on the
WebRTC side, that in some of

534
00:22:26,890 --> 00:22:29,680
the fallback cases for WebRTC
for reachability, WebSocket

535
00:22:29,680 --> 00:22:31,840
can potentially lend
a hand there too.

536
00:22:31,840 --> 00:22:34,390
MALE SPEAKER: Cool, excellent.

537
00:22:34,390 --> 00:22:37,150
We have another question,
then, from [? Mateas ?]

538
00:22:37,150 --> 00:22:38,400
[? Kelzman. ?]

539
00:22:38,400 --> 00:22:43,650

540
00:22:43,650 --> 00:22:47,960
AUDIENCE: My question is, will
WebSockets protocol replace

541
00:22:47,960 --> 00:22:50,320
server-sent events
in the future?

542
00:22:50,320 --> 00:22:53,610
Why must we have both specs if
WebSockets can accomplish the

543
00:22:53,610 --> 00:22:57,610
same tasks that SSE
does and more?

544
00:22:57,610 --> 00:22:58,130
MALE SPEAKER: I think
that's another

545
00:22:58,130 --> 00:22:59,970
example of possible overlap.

546
00:22:59,970 --> 00:23:00,770
MARTYN LOUGHRAN: I can take
this if you like.

547
00:23:00,770 --> 00:23:02,230
MALE SPEAKER: Please.

548
00:23:02,230 --> 00:23:04,960
MARTYN LOUGHRAN: I would say
server-sent events is a very

549
00:23:04,960 --> 00:23:06,570
simple protocol.

550
00:23:06,570 --> 00:23:09,600
And so I think that drives a
lot of adoption early on.

551
00:23:09,600 --> 00:23:12,020
But I think what we'll see,
especially as the WebSocket

552
00:23:12,020 --> 00:23:16,920
spec gets more widely adopted,
and a lot of some of the

553
00:23:16,920 --> 00:23:18,920
missing features become
available-- for example,

554
00:23:18,920 --> 00:23:22,080
encryption is currently possible
with server-sent

555
00:23:22,080 --> 00:23:23,620
events, but not WebSockets.

556
00:23:23,620 --> 00:23:23,693
[?

557
00:23:23,693 --> 00:23:25,870
HENRIK JORETEG: Bidirectional.
?]

558
00:23:25,870 --> 00:23:26,600
MARTYN LOUGHRAN:
Yes, of course.

559
00:23:26,600 --> 00:23:28,000
They're an extra
functionality.

560
00:23:28,000 --> 00:23:31,380
But I think the question is,
for just the use cases that

561
00:23:31,380 --> 00:23:35,380
one would currently use
server-sent events, what's

562
00:23:35,380 --> 00:23:36,760
likely to happen?

563
00:23:36,760 --> 00:23:40,130
For example, multiplexing is
another thing that might allow

564
00:23:40,130 --> 00:23:45,600
people to use a single
connection to address many use

565
00:23:45,600 --> 00:23:47,220
cases on the page.

566
00:23:47,220 --> 00:23:50,110
JOHN FALLOWS: Just to add to
that, thinking back to when we

567
00:23:50,110 --> 00:23:54,280
were working on the spec on this
stuff, comment was the

568
00:23:54,280 --> 00:23:57,070
flavor of the day when
server-sent events was being

569
00:23:57,070 --> 00:23:59,230
standardized as a way to
effectively standardize

570
00:23:59,230 --> 00:24:02,170
comment behavior several
years ago.

571
00:24:02,170 --> 00:24:04,710
And around that time, WebSocket
was starting up too,

572
00:24:04,710 --> 00:24:06,950
so this exact question
came up during

573
00:24:06,950 --> 00:24:08,420
standardization process.

574
00:24:08,420 --> 00:24:11,770
And apart from the points that
have been made already, one of

575
00:24:11,770 --> 00:24:16,320
the overarching arguments that
was left was that by having a

576
00:24:16,320 --> 00:24:21,230
simplified interaction with
server-sent events, it created

577
00:24:21,230 --> 00:24:23,460
a surface area where the browser
had more control over

578
00:24:23,460 --> 00:24:24,860
the actual behavior.

579
00:24:24,860 --> 00:24:27,760
And the idea was that on mobile
platforms, this might

580
00:24:27,760 --> 00:24:31,010
actually allow the same
abstraction to be re-targeted

581
00:24:31,010 --> 00:24:33,590
at mobile-specific solutions
that didn't necessarily

582
00:24:33,590 --> 00:24:36,290
involve making a traditional
HTTP request over a

583
00:24:36,290 --> 00:24:38,650
traditional TCP connection,
and getting a stream of

584
00:24:38,650 --> 00:24:41,970
information coming
back down it.

585
00:24:41,970 --> 00:24:44,860
So there are different
implementation strategies for

586
00:24:44,860 --> 00:24:45,420
the abstraction.

587
00:24:45,420 --> 00:24:48,380
If the abstraction is left
high, the versatility of

588
00:24:48,380 --> 00:24:51,060
WebSocket obviously means that
you can cover that use case

589
00:24:51,060 --> 00:24:53,140
and many more.

590
00:24:53,140 --> 00:24:55,150
MALE SPEAKER: And Wesley, you
actually had a comment earlier

591
00:24:55,150 --> 00:24:57,610
when we were talking about
possibly SPDY push.

592
00:24:57,610 --> 00:24:59,570
It just adds to this layering.

593
00:24:59,570 --> 00:25:00,170
WESLEY: Yeah.

594
00:25:00,170 --> 00:25:02,950
So the way we send data to the
client, there's bidirectional,

595
00:25:02,950 --> 00:25:08,420
there's WebSockets, there's SSE,
and now we've got HTTP

596
00:25:08,420 --> 00:25:09,700
2.0 coming out.

597
00:25:09,700 --> 00:25:12,930
And right now, what we can
implement is SPDY.

598
00:25:12,930 --> 00:25:17,840
And that's available in node and
Jetty and other servers.

599
00:25:17,840 --> 00:25:22,650
So we've got these three options
to choose how to push

600
00:25:22,650 --> 00:25:24,950
data to the client.

601
00:25:24,950 --> 00:25:30,640
And so with HTTP 2.0, is it
going to be WebSockets

602
00:25:30,640 --> 00:25:31,830
layered over SPDY?

603
00:25:31,830 --> 00:25:33,580
Is that going to be
the approach?

604
00:25:33,580 --> 00:25:36,260
Or is it going to be pure
WebSockets, or is SPDY going

605
00:25:36,260 --> 00:25:39,540
to have a mechanism to do
bidirectional push and then

606
00:25:39,540 --> 00:25:43,020
also receive messages
on one channel?

607
00:25:43,020 --> 00:25:45,940
That was kind of my question,
which I don't

608
00:25:45,940 --> 00:25:48,270
know the answer to.

609
00:25:48,270 --> 00:25:51,530
HENRIK JORETEG: Are there any
HTTP 2 experts in the crowd?

610
00:25:51,530 --> 00:25:54,560
That would be really
interesting.

611
00:25:54,560 --> 00:25:55,810
MALE SPEAKER: Don't be shy.

612
00:25:55,810 --> 00:25:59,670

613
00:25:59,670 --> 00:26:01,980
JOHN FALLOWS: Based on what I've
seen so far with SPDY,

614
00:26:01,980 --> 00:26:05,220
I'd expect it to play out where
HTTP and WebSocket go in

615
00:26:05,220 --> 00:26:08,360
parallel over the same enveloped
SPDY connection as

616
00:26:08,360 --> 00:26:09,710
at least an option.

617
00:26:09,710 --> 00:26:14,010
Because to keep WebSockets out
of that would be to create

618
00:26:14,010 --> 00:26:16,560
additional resource hog on the
client end server connection

619
00:26:16,560 --> 00:26:17,620
from the TCP endpoint.

620
00:26:17,620 --> 00:26:21,290
So it seems like a very natural
consequence of having

621
00:26:21,290 --> 00:26:24,260
selected an HTTP handshake that
gets started on WebSocket

622
00:26:24,260 --> 00:26:27,400
to let them all play
nicely together.

623
00:26:27,400 --> 00:26:28,340
MALE SPEAKER: Cool.

624
00:26:28,340 --> 00:26:30,700
Any other comments people
want to make about this?

625
00:26:30,700 --> 00:26:32,400
OK.

626
00:26:32,400 --> 00:26:35,140
Christopher [? Frolik, ?]

627
00:26:35,140 --> 00:26:36,530
you've got a question number
four coming up.

628
00:26:36,530 --> 00:26:44,940

629
00:26:44,940 --> 00:26:48,250
AUDIENCE: So the WebRTC spec
has driven centralized

630
00:26:48,250 --> 00:26:49,560
solutions [INAUDIBLE]

631
00:26:49,560 --> 00:26:52,280
et cetera to a decentralized
problem.

632
00:26:52,280 --> 00:26:53,930
What we do to bring
up secure, fully

633
00:26:53,930 --> 00:26:55,380
decentralized solution to bear?

634
00:26:55,380 --> 00:26:59,590

635
00:26:59,590 --> 00:27:02,010
HENRIK JORETEG: That's tricky.

636
00:27:02,010 --> 00:27:02,910
Because ultimately,
you have to have

637
00:27:02,910 --> 00:27:05,390
some discovery mechanism.

638
00:27:05,390 --> 00:27:06,530
There are some attempts--

639
00:27:06,530 --> 00:27:08,030
I forget the name of
the developer now.

640
00:27:08,030 --> 00:27:11,470
There's a project where
basically you end up copying

641
00:27:11,470 --> 00:27:14,260
and pasting SDP blobs back and
forth over whatever mechanism

642
00:27:14,260 --> 00:27:14,660
you choose.

643
00:27:14,660 --> 00:27:16,570
It could be email, it
could be whatever.

644
00:27:16,570 --> 00:27:20,850
And it still uses STUN, ICE, and
TURN to actually connect.

645
00:27:20,850 --> 00:27:23,010
And with firewalls, I don't
see that going away.

646
00:27:23,010 --> 00:27:24,530
I mean, I don't know how
to solve that problem.

647
00:27:24,530 --> 00:27:25,780
I would love to see
a solution.

648
00:27:25,780 --> 00:27:30,330

649
00:27:30,330 --> 00:27:31,540
MALE SPEAKER: I want to make
sure we also encourage people

650
00:27:31,540 --> 00:27:33,950
to ask questions.

651
00:27:33,950 --> 00:27:36,400
We're running through our
questions just fine, but feel

652
00:27:36,400 --> 00:27:38,690
free to just jump in and
get on the delegate

653
00:27:38,690 --> 00:27:40,645
list if you'd like.

654
00:27:40,645 --> 00:27:42,690
Does anybody want to add
anything to that question

655
00:27:42,690 --> 00:27:45,100
about centralized servers?

656
00:27:45,100 --> 00:27:48,600
MARTYN LOUGHRAN: I suppose one
of the questions is, when do

657
00:27:48,600 --> 00:27:51,420
you need a decentralized
solution and when you do not

658
00:27:51,420 --> 00:27:53,680
need a decentralized solution?

659
00:27:53,680 --> 00:27:58,170
I mean, I'm not quite clear
on what exactly you mean.

660
00:27:58,170 --> 00:28:03,050
What are the benefits that
you'd want to see from a

661
00:28:03,050 --> 00:28:04,300
decentralized solution?

662
00:28:04,300 --> 00:28:07,900

663
00:28:07,900 --> 00:28:10,650
AUDIENCE: So the first example
that comes to mind is video

664
00:28:10,650 --> 00:28:11,560
collaboration.

665
00:28:11,560 --> 00:28:15,590
So my family and I, we've
all got smartphones,

666
00:28:15,590 --> 00:28:17,910
high-resolution cameras in our
pockets, and we'd like to be

667
00:28:17,910 --> 00:28:21,160
able to shoot and collaborate on
video together in realtime.

668
00:28:21,160 --> 00:28:25,660
And the overhead in trying to
figure out where we are out

669
00:28:25,660 --> 00:28:31,140
and back down to each other
seems like a lot when you just

670
00:28:31,140 --> 00:28:34,990
want a simple way to connect
people that want to.

671
00:28:34,990 --> 00:28:39,400
MARTYN LOUGHRAN: OK, that's a
perfect example for WebRTC,

672
00:28:39,400 --> 00:28:43,130
when you need that super
low-latency and UDP kind of

673
00:28:43,130 --> 00:28:44,545
style communication.

674
00:28:44,545 --> 00:28:45,890
It makes perfect sense.

675
00:28:45,890 --> 00:28:47,610
HENRIK JORETEG: Well, in theory,
STUN and ICE should

676
00:28:47,610 --> 00:28:51,310
help you locate and figure out
that they are, in fact, on the

677
00:28:51,310 --> 00:28:54,540
same network, and then be
able to connect the two.

678
00:28:54,540 --> 00:28:56,720
It's not a complete solution,
but it's something.

679
00:28:56,720 --> 00:29:03,700

680
00:29:03,700 --> 00:29:08,650
AUDIENCE: Sure, so just to
antagonize that point a bit,

681
00:29:08,650 --> 00:29:12,770
if we're all independently
connected, say via mobile

682
00:29:12,770 --> 00:29:17,540
data, so we're not on the same
network, and we're using just

683
00:29:17,540 --> 00:29:23,890
a plain vanilla web app, there's
no clear path to a

684
00:29:23,890 --> 00:29:26,830
central server, necessarily,
in a quick

685
00:29:26,830 --> 00:29:28,382
and easy-to-use way.

686
00:29:28,382 --> 00:29:28,750
HENRIK JORETEG: Right.

687
00:29:28,750 --> 00:29:30,890
Now you're talking about
connecting devices they really

688
00:29:30,890 --> 00:29:32,240
are not on the same
network at all.

689
00:29:32,240 --> 00:29:35,630
And that's a whole different
type of problem, I think.

690
00:29:35,630 --> 00:29:37,140
I mean, I think that
would be awesome.

691
00:29:37,140 --> 00:29:39,590
But I don't know quite
how that--

692
00:29:39,590 --> 00:29:40,850
I don't know how to
fix that one.

693
00:29:40,850 --> 00:29:44,800

694
00:29:44,800 --> 00:29:48,220
MALE SPEAKER: Kyle, actually, I
believe has got a question.

695
00:29:48,220 --> 00:29:49,590
Let's make sure that
he gets a mic.

696
00:29:49,590 --> 00:29:50,840
Is he sitting over there?

697
00:29:50,840 --> 00:29:54,410

698
00:29:54,410 --> 00:29:55,690
This is a delegate, so
can you make sure

699
00:29:55,690 --> 00:29:56,445
you get him up there?

700
00:29:56,445 --> 00:29:56,830
AUDIENCE: Hi.

701
00:29:56,830 --> 00:29:59,970
So it seems like there's
two major reasons why

702
00:29:59,970 --> 00:30:01,550
centralization still happens.

703
00:30:01,550 --> 00:30:03,820
The first one's discoverability,
obviously.

704
00:30:03,820 --> 00:30:07,190
If we don't have any way for
two different people to get

705
00:30:07,190 --> 00:30:09,340
hooked up on a blind date,
then they don't know what

706
00:30:09,340 --> 00:30:10,535
restaurant to show up at.

707
00:30:10,535 --> 00:30:12,460
So somebody has to introduce
the two.

708
00:30:12,460 --> 00:30:14,840
But that seems like that should
be solvable through

709
00:30:14,840 --> 00:30:15,650
other bands.

710
00:30:15,650 --> 00:30:18,250
Like, there's been other
peer-to-peer networks-- music

711
00:30:18,250 --> 00:30:21,180
sharing, and BitTorrent, another
things like that.

712
00:30:21,180 --> 00:30:24,080
It seems like there should be
ways to solve that problem.

713
00:30:24,080 --> 00:30:27,200
But there's another problem,
that one of the reasons why

714
00:30:27,200 --> 00:30:28,410
people centralize stuff
is because they

715
00:30:28,410 --> 00:30:29,200
want to bill for it.

716
00:30:29,200 --> 00:30:32,540
So when companies are creating
products around this stuff, if

717
00:30:32,540 --> 00:30:34,940
we truly completely
decentralized, and everything

718
00:30:34,940 --> 00:30:37,370
was peer-to-peer, nobody would
know that that was happening,

719
00:30:37,370 --> 00:30:38,810
and nobody could make
a buck off of that.

720
00:30:38,810 --> 00:30:42,410
So how do you see that attention
happening, where we

721
00:30:42,410 --> 00:30:44,390
do want to get rid of
centralization, but we don't

722
00:30:44,390 --> 00:30:47,190
want to not be able to charge
for it, for instance?

723
00:30:47,190 --> 00:30:50,140

724
00:30:50,140 --> 00:30:51,710
HENRIK JORETEG: I can
comment on that.

725
00:30:51,710 --> 00:30:54,550
So in my opinion, the telecoms
of the future are Google,

726
00:30:54,550 --> 00:30:57,330
Facebook, and the like.

727
00:30:57,330 --> 00:30:59,540
The old traditional telecom
system is likely

728
00:30:59,540 --> 00:31:01,520
not to stick around.

729
00:31:01,520 --> 00:31:03,408
Somebody didn't like that.

730
00:31:03,408 --> 00:31:04,860
[LAUGHTER]

731
00:31:04,860 --> 00:31:07,940
HENRIK JORETEG: But really, I
mean, if you think about it,

732
00:31:07,940 --> 00:31:09,690
the reason phones are so
successful and they're so

733
00:31:09,690 --> 00:31:11,470
prevalent is because
I can call anybody.

734
00:31:11,470 --> 00:31:12,520
I have an AT&T phone.

735
00:31:12,520 --> 00:31:13,920
I can call somebody
on Verizon.

736
00:31:13,920 --> 00:31:16,300
Why can't I call somebody
from Google+

737
00:31:16,300 --> 00:31:18,070
from my Facebook account?

738
00:31:18,070 --> 00:31:19,770
The whole concept of federation
does not currently

739
00:31:19,770 --> 00:31:23,050
really exist in a broadly
accepted way in the web.

740
00:31:23,050 --> 00:31:25,510
And I think the reason
is no one's pissed.

741
00:31:25,510 --> 00:31:28,930

742
00:31:28,930 --> 00:31:31,140
I mean, that's something that
if it was retroactively

743
00:31:31,140 --> 00:31:32,505
imposed on--

744
00:31:32,505 --> 00:31:33,900
[LAUGHTER]

745
00:31:33,900 --> 00:31:35,090
HENRIK JORETEG: Now
people are pissed.

746
00:31:35,090 --> 00:31:37,410
[LAUGHTER]

747
00:31:37,410 --> 00:31:38,946
AUDIENCE: So get to why web
standards is a bunch of

748
00:31:38,946 --> 00:31:41,720
really, really great people
getting together.

749
00:31:41,720 --> 00:31:42,270
HENRIK JORETEG: I guess.

750
00:31:42,270 --> 00:31:43,340
I don't know.

751
00:31:43,340 --> 00:31:45,450
So I don't know.

752
00:31:45,450 --> 00:31:47,870
I mean, I think that's why
there's kind of this whole

753
00:31:47,870 --> 00:31:49,360
silo effect going on.

754
00:31:49,360 --> 00:31:51,020
MALE SPEAKER: But is
WebRTC architected

755
00:31:51,020 --> 00:31:51,910
to solve that problem?

756
00:31:51,910 --> 00:31:52,000
HENRIK JORETEG: Yes.

757
00:31:52,000 --> 00:31:52,700
MALE SPEAKER: Isn't that
part of the issue?

758
00:31:52,700 --> 00:31:53,500
It is solved?

759
00:31:53,500 --> 00:31:53,740
HENRIK JORETEG: Yeah.

760
00:31:53,740 --> 00:31:56,430
I mean certainly, it's providing
just a very base

761
00:31:56,430 --> 00:31:58,680
level of technology, as far as
the communication piece.

762
00:31:58,680 --> 00:32:05,240
But in order to actually connect
the two, you need

763
00:32:05,240 --> 00:32:06,270
other technologies on top.

764
00:32:06,270 --> 00:32:07,160
You need the discoverability
piece.

765
00:32:07,160 --> 00:32:08,095
You need the addressability.

766
00:32:08,095 --> 00:32:10,970
You need a strong identity
so you can say,

767
00:32:10,970 --> 00:32:12,010
I am a Google user.

768
00:32:12,010 --> 00:32:16,050
You can reach me at my Google
account, that sort of thing.

769
00:32:16,050 --> 00:32:18,350
So WebRTC is one
of the pieces.

770
00:32:18,350 --> 00:32:19,430
It's not all of it.

771
00:32:19,430 --> 00:32:21,580
MARTYN LOUGHRAN: And the great
thing about WebRTC is that

772
00:32:21,580 --> 00:32:24,760
it's enabling all the web
developers in the world.

773
00:32:24,760 --> 00:32:27,530
It's removing a huge number of
barriers from being able to

774
00:32:27,530 --> 00:32:29,350
actually innovate
in that space.

775
00:32:29,350 --> 00:32:33,300
For too long, we've had desktop
applications that have

776
00:32:33,300 --> 00:32:34,140
not been able to.

777
00:32:34,140 --> 00:32:36,320
ROB: I think the discoverability
side of things

778
00:32:36,320 --> 00:32:38,870
as well is a big problem,
because right now, it's just

779
00:32:38,870 --> 00:32:40,660
sort of, like you said,
up to the developers

780
00:32:40,660 --> 00:32:41,300
and stuff like that.

781
00:32:41,300 --> 00:32:42,755
And there's so many
ways to do it.

782
00:32:42,755 --> 00:32:45,090
I mean, you could manually paste
these blobs and stuff,

783
00:32:45,090 --> 00:32:47,760
which is stupid, but
you can do it.

784
00:32:47,760 --> 00:32:50,160
But I mean, there are ways
that we need to--

785
00:32:50,160 --> 00:32:52,550
we need to look at how to better
solve those kinds of

786
00:32:52,550 --> 00:32:56,320
problems as well, like pairing
devices or things like that.

787
00:32:56,320 --> 00:32:58,270
It's not always two people that
are trying to connect.

788
00:32:58,270 --> 00:33:01,690
It might be one person trying
to connect two devices.

789
00:33:01,690 --> 00:33:03,460
So for example, I might be
trying to connect a mobile

790
00:33:03,460 --> 00:33:05,695
device to a TV to remote
control it.

791
00:33:05,695 --> 00:33:07,600
The discovery mechanisms for
that are going to be

792
00:33:07,600 --> 00:33:09,790
incredibly different than
connecting to people who have

793
00:33:09,790 --> 00:33:12,830
full control over processing and
can just join a chat room

794
00:33:12,830 --> 00:33:14,420
or something.

795
00:33:14,420 --> 00:33:16,880
So those are the kind of
problems I want to see solved

796
00:33:16,880 --> 00:33:17,350
[INAUDIBLE].

797
00:33:17,350 --> 00:33:19,130
And people are kind of
approaching that, and there's

798
00:33:19,130 --> 00:33:22,150
a few solutions with trying to
replicate things like Apple

799
00:33:22,150 --> 00:33:24,990
Bonjour and stuff in the
browser, and requesting that

800
00:33:24,990 --> 00:33:25,890
from the browser vendors.

801
00:33:25,890 --> 00:33:27,160
But there's not been
significant

802
00:33:27,160 --> 00:33:28,160
traction on that yet.

803
00:33:28,160 --> 00:33:29,100
MALE SPEAKER: Well, it sounds to
me like there's going to be

804
00:33:29,100 --> 00:33:30,780
a whole topology of
applications.

805
00:33:30,780 --> 00:33:32,926
Like, an awful lot of websites
could just put in video chat

806
00:33:32,926 --> 00:33:34,510
to our tech support line.

807
00:33:34,510 --> 00:33:36,155
That will be a trivial thing for
them to do, because it's

808
00:33:36,155 --> 00:33:37,530
entirely within their
own stack.

809
00:33:37,530 --> 00:33:39,110
Then it's about getting
bigger.

810
00:33:39,110 --> 00:33:42,190
And are you trying to say that
we need more standards for the

811
00:33:42,190 --> 00:33:43,130
bigger to happen?

812
00:33:43,130 --> 00:33:44,950
HENRIK JORETEG: I mean, these
things have existed

813
00:33:44,950 --> 00:33:45,640
for quite some time.

814
00:33:45,640 --> 00:33:48,190
XMPP is extremely stable and
extremely well-used.

815
00:33:48,190 --> 00:33:50,780
And it's not something that
web developers like, but

816
00:33:50,780 --> 00:33:53,230
they've gotten really good at
solving these problems.

817
00:33:53,230 --> 00:33:56,090
And there's some efforts
underway, two specifically.

818
00:33:56,090 --> 00:34:00,400
One is stanza.io, which is
basically the attempt to give

819
00:34:00,400 --> 00:34:03,000
a clean JavaScript
API to XMPP.

820
00:34:03,000 --> 00:34:06,910
And another one is XMPP-FTW,
for the web.

821
00:34:06,910 --> 00:34:10,290

822
00:34:10,290 --> 00:34:13,639
And thinking of things like
browser ID as a potential

823
00:34:13,639 --> 00:34:16,550
alternative to be able to
provide that strong identity

824
00:34:16,550 --> 00:34:19,080
piece, because once you have
that, addressability actually

825
00:34:19,080 --> 00:34:22,524
becomes fairly simple
in terms of--

826
00:34:22,524 --> 00:34:24,270
yeah, once you know
how to reach you.

827
00:34:24,270 --> 00:34:26,050
MARTYN LOUGHRAN: But these
solutions are all very

828
00:34:26,050 --> 00:34:29,050
heavyweight solutions, right,
all the XMPP, even if it has a

829
00:34:29,050 --> 00:34:31,750
nice JavaScript API one day.

830
00:34:31,750 --> 00:34:33,690
I think what Rob's talking about
is just saying, well,

831
00:34:33,690 --> 00:34:35,929
you've got two devices
next to each other.

832
00:34:35,929 --> 00:34:38,840
Can they just make a little
chip, or some video

833
00:34:38,840 --> 00:34:41,080
communication, or something
like that to

834
00:34:41,080 --> 00:34:42,679
discover each other?

835
00:34:42,679 --> 00:34:45,960
ROB: I think we're kind of
seeing people approach those

836
00:34:45,960 --> 00:34:48,389
problems, and very, very
slightly at the moment, like

837
00:34:48,389 --> 00:34:50,940
the whole idea of using audio
to connect two devices.

838
00:34:50,940 --> 00:34:53,260
MALE SPEAKER: Boris Smus
did an ultrasonic demo.

839
00:34:53,260 --> 00:34:53,960
Right, exactly.

840
00:34:53,960 --> 00:34:56,500
ROB: Yeah, so there's people
already exploring, and

841
00:34:56,500 --> 00:34:59,580
potentially not exactly in
this area, but there are

842
00:34:59,580 --> 00:35:00,940
solutions around right now.

843
00:35:00,940 --> 00:35:02,950
We've got a solution for pairing
Bluetooth devices and

844
00:35:02,950 --> 00:35:04,280
stuff like that.

845
00:35:04,280 --> 00:35:05,430
There's methods and means.

846
00:35:05,430 --> 00:35:07,780
I think we've not seen people
use them just yet.

847
00:35:07,780 --> 00:35:10,540
And we will, as people
start using WebRTC

848
00:35:10,540 --> 00:35:11,730
beyond audio and video.

849
00:35:11,730 --> 00:35:14,660
And that will just
come in time.

850
00:35:14,660 --> 00:35:17,050
MALE SPEAKER: We've got a
question waiting from David,

851
00:35:17,050 --> 00:35:22,580
actually, from the audience,
David Stickner.

852
00:35:22,580 --> 00:35:25,600

853
00:35:25,600 --> 00:35:27,560
And then we'll go to
Natasha's question.

854
00:35:27,560 --> 00:35:30,660

855
00:35:30,660 --> 00:35:33,530
AUDIENCE: We see a rise of
security issues where people

856
00:35:33,530 --> 00:35:36,340
are actually trying to open too
many TCP connections to a

857
00:35:36,340 --> 00:35:38,540
web server, and are actually
killing the web server by

858
00:35:38,540 --> 00:35:40,460
opening too many TCP
connections.

859
00:35:40,460 --> 00:35:44,590
So people tend to actually
remove keepalive to avoid this

860
00:35:44,590 --> 00:35:45,130
kind of issue.

861
00:35:45,130 --> 00:35:47,210
Where do you think about
WebSockets and security for

862
00:35:47,210 --> 00:35:49,610
this kind of problem, and
how can we solve this?

863
00:35:49,610 --> 00:35:53,330

864
00:35:53,330 --> 00:35:58,060
JOHN FALLOWS: Well, one of the
things that was put into the

865
00:35:58,060 --> 00:36:03,770
spec towards the end of its
finalization of the standard

866
00:36:03,770 --> 00:36:07,580
was a clarification on what's
the maximum upper bound on the

867
00:36:07,580 --> 00:36:10,420
number of WebSockets that can
hit a server at a time.

868
00:36:10,420 --> 00:36:14,370
And it was unspecified, so we
want to get that cleared.

869
00:36:14,370 --> 00:36:18,610
And at the time, a decision was
made to not limit it, but

870
00:36:18,610 --> 00:36:22,650
also to add a caveat to that,
that only one handshake could

871
00:36:22,650 --> 00:36:24,160
be outstanding to
the same target

872
00:36:24,160 --> 00:36:25,820
server at the same time.

873
00:36:25,820 --> 00:36:31,010
So from a browser invocation
standpoint, spinning up lots

874
00:36:31,010 --> 00:36:35,460
and lots of WebSockets in rapid
succession would give

875
00:36:35,460 --> 00:36:39,520
the server an opportunity to
intercept and potentially

876
00:36:39,520 --> 00:36:43,880
detect repeated attempts, and
therefore mitigate that.

877
00:36:43,880 --> 00:36:47,100
In general, I think that
things like SPDY as an

878
00:36:47,100 --> 00:36:49,060
envelope, which we touched on
earlier, underneath these

879
00:36:49,060 --> 00:36:52,300
things, tends to mitigate
some of that at the

880
00:36:52,300 --> 00:36:53,820
physical TCP layer.

881
00:36:53,820 --> 00:36:57,390
And also, having higher level
abstractions on top of the

882
00:36:57,390 --> 00:37:01,280
WebSocket going forward, that's
more of a publish and

883
00:37:01,280 --> 00:37:03,810
subscribe, or an event-driven
more architectural approach to

884
00:37:03,810 --> 00:37:07,370
things, allows you to partition
up the universe of

885
00:37:07,370 --> 00:37:09,830
addressability so you don't just
think of it as connecting

886
00:37:09,830 --> 00:37:11,800
directly to the thing you want
to speak to, just because

887
00:37:11,800 --> 00:37:12,810
that's the end of
the WebSocket.

888
00:37:12,810 --> 00:37:14,550
Once you're attached to the
architecture, then you can

889
00:37:14,550 --> 00:37:16,480
reach a whole myriad
of services

890
00:37:16,480 --> 00:37:17,730
through that same channel.

891
00:37:17,730 --> 00:37:20,250

892
00:37:20,250 --> 00:37:21,190
MALE SPEAKER: The next question
is actually quite

893
00:37:21,190 --> 00:37:22,970
high-level about WebRTC
in particular.

894
00:37:22,970 --> 00:37:25,770
Natasha, if we can give
you that one?

895
00:37:25,770 --> 00:37:26,290
AUDIENCE: Thanks.

896
00:37:26,290 --> 00:37:29,260
This question's from an
anonymous sender.

897
00:37:29,260 --> 00:37:31,470
Bandwidth throttling, especially
for multiple HD

898
00:37:31,470 --> 00:37:34,350
video streams, is extremely
hard to do properly.

899
00:37:34,350 --> 00:37:37,630
Is there any risk that WebRTC
will vary greatly by

900
00:37:37,630 --> 00:37:38,880
implementation?

901
00:37:38,880 --> 00:37:40,550

902
00:37:40,550 --> 00:37:42,450
MALE SPEAKER: Most likely, I'm
assuming this is about--

903
00:37:42,450 --> 00:37:43,500
one-to-one is one thing.

904
00:37:43,500 --> 00:37:46,124
Viewing one-to-four,
one-to-five, I think it gets

905
00:37:46,124 --> 00:37:46,840
to be much harder.

906
00:37:46,840 --> 00:37:49,920
And are we going to see possibly
it just fall over

907
00:37:49,920 --> 00:37:52,980
because Firefox doesn't do it
as well as, say, Chrome?

908
00:37:52,980 --> 00:37:55,470
HENRIK JORETEG: This is
actually, in my opinion, is

909
00:37:55,470 --> 00:37:56,410
two problems.

910
00:37:56,410 --> 00:37:57,400
One is--

911
00:37:57,400 --> 00:37:59,500
so for example, Skype, what
they will do, from what I

912
00:37:59,500 --> 00:38:02,360
understand, is they will elect
the strongest connection.

913
00:38:02,360 --> 00:38:03,210
And it's not just connection.

914
00:38:03,210 --> 00:38:05,090
It's about the ability
to encode and decode

915
00:38:05,090 --> 00:38:05,900
video really quickly.

916
00:38:05,900 --> 00:38:08,970
So you need a strong device and
strong connection to be

917
00:38:08,970 --> 00:38:11,510
able to serve as a
rebroadcaster.

918
00:38:11,510 --> 00:38:13,790
And currently, that's part
of the spec, but it's not

919
00:38:13,790 --> 00:38:14,790
really there yet.

920
00:38:14,790 --> 00:38:17,230
Like, if you take a media
stream from one user and

921
00:38:17,230 --> 00:38:20,125
attach it to another, it
just doesn't work.

922
00:38:20,125 --> 00:38:23,070
And that's absolutely crucial
for the stuff to be able to be

923
00:38:23,070 --> 00:38:27,320
usable for handling these other
interesting network

924
00:38:27,320 --> 00:38:27,850
topologies.

925
00:38:27,850 --> 00:38:31,660
Mesh is only good for so many,
because you're uploading your

926
00:38:31,660 --> 00:38:34,360
video to each person that you're
connected to, and so is

927
00:38:34,360 --> 00:38:35,050
everybody else.

928
00:38:35,050 --> 00:38:39,230
So your upload bandwidth becomes
a huge bottleneck.

929
00:38:39,230 --> 00:38:40,430
MALE SPEAKER: Didn't
you say that WebRTC

930
00:38:40,430 --> 00:38:42,160
doesn't throttle down?

931
00:38:42,160 --> 00:38:44,580
HENRIK JORETEG: So yeah, there
needs to be control mechanisms

932
00:38:44,580 --> 00:38:47,060
for adjusting bandwidth, and
they just are not in place, as

933
00:38:47,060 --> 00:38:47,680
far as I can tell.

934
00:38:47,680 --> 00:38:51,110
Nothing I've tried has worked.

935
00:38:51,110 --> 00:38:52,640
MALE SPEAKER: I actually was
working at a videoconferencing

936
00:38:52,640 --> 00:38:54,740
company, and that was probably
the biggest aspect of our

937
00:38:54,740 --> 00:38:57,730
secret sauce was to throttle
bandwidth properly.

938
00:38:57,730 --> 00:39:01,020
So if WebRTC isn't thinking
about it, it seems like it's

939
00:39:01,020 --> 00:39:02,210
heading for a bit of
a train wreck.

940
00:39:02,210 --> 00:39:03,530
HENRIK JORETEG: I don't think
it's not thinking about it.

941
00:39:03,530 --> 00:39:04,750
I think it's just the
implementations

942
00:39:04,750 --> 00:39:06,070
aren't quite there yet.

943
00:39:06,070 --> 00:39:07,930
That's my impression.

944
00:39:07,930 --> 00:39:09,850
I've kind of raised it to some
of the Google folks who are

945
00:39:09,850 --> 00:39:12,390
working on this stuff, and
that's the answer I get back.

946
00:39:12,390 --> 00:39:13,900
It's like, yeah, we know
this is a thing

947
00:39:13,900 --> 00:39:14,500
we've got to deal with.

948
00:39:14,500 --> 00:39:16,580
And I mean, Google Hangouts,
they're well aware.

949
00:39:16,580 --> 00:39:18,050
There's a low-bandwidth
mode for that.

950
00:39:18,050 --> 00:39:20,180
And we need to be able to do
the same kinds of things

951
00:39:20,180 --> 00:39:23,270
without re-requesting a
smaller video size.

952
00:39:23,270 --> 00:39:25,590
We need to be able to just
adjust them based on quality

953
00:39:25,590 --> 00:39:28,160
and lost packets.

954
00:39:28,160 --> 00:39:31,000
ROB: This kind of problem,
as well, particularly the

955
00:39:31,000 --> 00:39:33,820
one-to-many kind of the
bandwidth problem is

956
00:39:33,820 --> 00:39:35,010
applicable in games as well.

957
00:39:35,010 --> 00:39:36,950
So that's where the background
is from my point of view.

958
00:39:36,950 --> 00:39:39,960
But if you're building
multiplayer games, you're

959
00:39:39,960 --> 00:39:42,320
quickly going to come
over that problem.

960
00:39:42,320 --> 00:39:46,420
And it's not something you can
necessarily avoid in that

961
00:39:46,420 --> 00:39:48,780
circumstance, because you have
to be communicating out to

962
00:39:48,780 --> 00:39:50,380
these multiple players
in a game.

963
00:39:50,380 --> 00:39:53,340
But people have solved these
problems before, and there are

964
00:39:53,340 --> 00:39:57,240
ways to reduce the amount of
information you're sending.

965
00:39:57,240 --> 00:40:00,230
So for example, in a game, you
don't send updates for people

966
00:40:00,230 --> 00:40:02,370
that aren't necessarily
in your vicinity, or

967
00:40:02,370 --> 00:40:03,130
something like that.

968
00:40:03,130 --> 00:40:05,670
So it's not always a
technology problem.

969
00:40:05,670 --> 00:40:08,870
It's just a creative way of
thinking about how the data is

970
00:40:08,870 --> 00:40:11,090
being sent to all the different
people, and are you

971
00:40:11,090 --> 00:40:12,500
sending it to the
right people?

972
00:40:12,500 --> 00:40:14,270
There may be 100 people in the
game, but there might only be

973
00:40:14,270 --> 00:40:17,110
two that are actually applicable
and need the

974
00:40:17,110 --> 00:40:19,590
updates that you're sending.

975
00:40:19,590 --> 00:40:22,470
MARTYN LOUGHRAN: Another
separate point to that is, I

976
00:40:22,470 --> 00:40:24,030
think we might need to--

977
00:40:24,030 --> 00:40:27,640
it's only very early days
in terms of peer-to-peer

978
00:40:27,640 --> 00:40:28,910
connections on the web.

979
00:40:28,910 --> 00:40:30,620
So if you look at--

980
00:40:30,620 --> 00:40:32,510
historically, you'd have clients
like Skype that are

981
00:40:32,510 --> 00:40:37,510
open for many hours, unstable
broadband connections.

982
00:40:37,510 --> 00:40:40,310
What happens, for example, on
battery life on a mobile

983
00:40:40,310 --> 00:40:43,310
device, when suddenly you've
got four different

984
00:40:43,310 --> 00:40:45,510
connections, and it's sending
the data four times, sending

985
00:40:45,510 --> 00:40:47,860
the video to four different
clients.

986
00:40:47,860 --> 00:40:49,930
And you said earlier
about strong peers.

987
00:40:49,930 --> 00:40:51,800
Is that actually realistic
on the web?

988
00:40:51,800 --> 00:40:55,040
I mean, are tabs open
long enough

989
00:40:55,040 --> 00:40:56,960
for that to be realistic?

990
00:40:56,960 --> 00:40:59,486
I don't know the answer to
these questions, but--

991
00:40:59,486 --> 00:41:00,540
WESLEY: It's a big push too.

992
00:41:00,540 --> 00:41:04,790
I mean, you have around 50
people connected here all day

993
00:41:04,790 --> 00:41:06,890
long, using a WebSocket
connection.

994
00:41:06,890 --> 00:41:09,100
And I mean, let's see,
my battery life, I've

995
00:41:09,100 --> 00:41:10,530
got about 25% left.

996
00:41:10,530 --> 00:41:14,020
So I mean, this is
the same thing.

997
00:41:14,020 --> 00:41:15,110
I mean, people are connected.

998
00:41:15,110 --> 00:41:18,310
They're using this protocol
all day long at this

999
00:41:18,310 --> 00:41:22,120
conference, and it's draining
the battery.

1000
00:41:22,120 --> 00:41:23,620
MARTYN LOUGHRAN: And that's
one-to-one to a server, right?

1001
00:41:23,620 --> 00:41:27,650
What happens if it's one-to-many
with a WebRTC data

1002
00:41:27,650 --> 00:41:27,920
connection?

1003
00:41:27,920 --> 00:41:29,380
WESLEY: RIght.

1004
00:41:29,380 --> 00:41:30,980
HENRIK JORETEG: It also takes
a lot of power to encode and

1005
00:41:30,980 --> 00:41:34,640
decode video that fast, and
to do with multiple

1006
00:41:34,640 --> 00:41:35,440
people at the same time.

1007
00:41:35,440 --> 00:41:38,180
So that's a huge drain
on power right there.

1008
00:41:38,180 --> 00:41:40,520
I know my laptop fans start
going crazy when I'm testing

1009
00:41:40,520 --> 00:41:44,170
with five people, so
it's a big problem.

1010
00:41:44,170 --> 00:41:46,290
MARTYN LOUGHRAN: This seems to
be back to the discussion this

1011
00:41:46,290 --> 00:41:49,430
morning about images
for realtime data.

1012
00:41:49,430 --> 00:41:52,820
Do we need to change the way
data is delivered for someone

1013
00:41:52,820 --> 00:41:57,470
who's battery constrained,
versus a PC?

1014
00:41:57,470 --> 00:41:57,830
WESLEY: Yeah.

1015
00:41:57,830 --> 00:42:01,640
I could see the same thing for
responsive video, essentially.

1016
00:42:01,640 --> 00:42:03,130
ROB: Again, this comes
back to games.

1017
00:42:03,130 --> 00:42:05,690
These kind of problems are being
solved in games in the

1018
00:42:05,690 --> 00:42:09,690
way you throttle the
communication depending on the

1019
00:42:09,690 --> 00:42:11,990
bandwidth capabilities of each
person, and stuff like that.

1020
00:42:11,990 --> 00:42:14,940
So there's a lot of lessons
we can take

1021
00:42:14,940 --> 00:42:15,770
from things like games.

1022
00:42:15,770 --> 00:42:19,680
And this is why I'm so adamant
on not focusing so much on

1023
00:42:19,680 --> 00:42:21,410
audio and video, although
yes, that is the

1024
00:42:21,410 --> 00:42:22,640
use case right now.

1025
00:42:22,640 --> 00:42:25,270
Some of the problems that we're
approaching are being

1026
00:42:25,270 --> 00:42:27,100
solved or being look
at in other areas.

1027
00:42:27,100 --> 00:42:29,530
And I think it's just
interlinking the two and

1028
00:42:29,530 --> 00:42:31,980
trying to combine them and
come up with a solution.

1029
00:42:31,980 --> 00:42:33,880
MALE SPEAKER: But I am surprised
that maybe as a web

1030
00:42:33,880 --> 00:42:36,000
community, we always wring our
hands a little bit about

1031
00:42:36,000 --> 00:42:38,160
saying everybody, and
inclusiveness, and so forth.

1032
00:42:38,160 --> 00:42:42,120
And Sugar Crush doesn't give
a damn about battery life.

1033
00:42:42,120 --> 00:42:43,170
It's like, you want
to play it?

1034
00:42:43,170 --> 00:42:45,020
Then just plug the
damn thing in.

1035
00:42:45,020 --> 00:42:46,580
And no, I'm not saying
that's correct.

1036
00:42:46,580 --> 00:42:49,340
But to a certain extent, the
native community washes their

1037
00:42:49,340 --> 00:42:50,500
hands of this a little bit.

1038
00:42:50,500 --> 00:42:53,390
Are we trying too hard?

1039
00:42:53,390 --> 00:42:54,640
Just saying.

1040
00:42:54,640 --> 00:42:57,572

1041
00:42:57,572 --> 00:42:59,920
[LAUGHTER]

1042
00:42:59,920 --> 00:43:01,940
HENRIK JORETEG: I think enabling
mobile is really,

1043
00:43:01,940 --> 00:43:07,460
really, really important,
because I think certain things

1044
00:43:07,460 --> 00:43:08,810
don't matter, obviously.

1045
00:43:08,810 --> 00:43:10,440
Like, if you're playing some
hard core game, you're not

1046
00:43:10,440 --> 00:43:11,750
going to be sitting there
forever, maybe.

1047
00:43:11,750 --> 00:43:14,410
But to not take it into
consideration when these are

1048
00:43:14,410 --> 00:43:16,330
the actual physical hardware
limitations that we're dealing

1049
00:43:16,330 --> 00:43:19,190
with I think it is selling
ourselves sort.

1050
00:43:19,190 --> 00:43:22,480
JOHN FALLOWS: Yeah, and I also
think it's important that

1051
00:43:22,480 --> 00:43:26,320
you've got things and place to
avoid accidentally doing it.

1052
00:43:26,320 --> 00:43:28,500
So we want to make sure that
developers aren't accidentally

1053
00:43:28,500 --> 00:43:29,400
draining the battery.

1054
00:43:29,400 --> 00:43:31,530
I mean, if it's a deliberate
decision, that's one thing.

1055
00:43:31,530 --> 00:43:34,830
But if they just happen to be
on the end of a bandwidth

1056
00:43:34,830 --> 00:43:37,400
connection that's a little less
capable, we want to be

1057
00:43:37,400 --> 00:43:38,330
able to react to that.

1058
00:43:38,330 --> 00:43:41,350
ROB: I think we're getting the
APIs to play with this kind of

1059
00:43:41,350 --> 00:43:42,060
stuff as well now.

1060
00:43:42,060 --> 00:43:44,560
And actually, I'm not seeing
people implementing this yet,

1061
00:43:44,560 --> 00:43:47,340
but for example, using the
batter API, and actually if

1062
00:43:47,340 --> 00:43:49,760
the battery level is at a
certain point, changing the

1063
00:43:49,760 --> 00:43:51,240
way you're communicating
and stuff like that.

1064
00:43:51,240 --> 00:43:53,240
MALE SPEAKER: Excellent
point, yeah.

1065
00:43:53,240 --> 00:43:55,270
My point, by the way, wasn't
to seriously say we don't

1066
00:43:55,270 --> 00:43:57,610
care, but to say it is
interesting that some apps

1067
00:43:57,610 --> 00:43:58,660
don't care.

1068
00:43:58,660 --> 00:44:00,850
And we just do seem to be a
little holier than thou

1069
00:44:00,850 --> 00:44:03,740
sometimes, which is actually
good to have that aspiration.

1070
00:44:03,740 --> 00:44:05,430
JOHN FALLOWS: And I think that
may very well just be the

1071
00:44:05,430 --> 00:44:07,720
difference between thinking of
it in a platform perspective

1072
00:44:07,720 --> 00:44:10,266
versus thinking of it as an
application perspective.

1073
00:44:10,266 --> 00:44:11,516
MALE SPEAKER: Yeah.

1074
00:44:11,516 --> 00:44:14,490

1075
00:44:14,490 --> 00:44:15,450
Actually, question number
six I think

1076
00:44:15,450 --> 00:44:18,290
we've already answered.

1077
00:44:18,290 --> 00:44:21,720
I believe Steve Thayer
has a question.

1078
00:44:21,720 --> 00:44:22,970
He needs a microphone.

1079
00:44:22,970 --> 00:44:27,550

1080
00:44:27,550 --> 00:44:29,130
AUDIENCE: Actually, I think it
was Rob who's actually just

1081
00:44:29,130 --> 00:44:30,650
touched on this.

1082
00:44:30,650 --> 00:44:33,750
WebRTC seems to have focused
more on the audio video

1083
00:44:33,750 --> 00:44:36,680
streams, and data channels
are a special case.

1084
00:44:36,680 --> 00:44:38,950
Shouldn't all peer-to-peer
communication just be data

1085
00:44:38,950 --> 00:44:41,330
streams where the different data
types can be interpreted

1086
00:44:41,330 --> 00:44:42,580
as appropriate?

1087
00:44:42,580 --> 00:44:44,810

1088
00:44:44,810 --> 00:44:49,280
ROB: I mean, not all
peer-to-peer is--

1089
00:44:49,280 --> 00:44:50,650
how do you mean?

1090
00:44:50,650 --> 00:44:52,760
Like, should they all
be the same, like

1091
00:44:52,760 --> 00:44:54,700
they're just data channels?

1092
00:44:54,700 --> 00:44:55,060
AUDIENCE: Yeah.

1093
00:44:55,060 --> 00:44:57,480
I mean, I think the
question was--

1094
00:44:57,480 --> 00:44:57,950
yeah.

1095
00:44:57,950 --> 00:44:59,935
The question was sort
of saying--

1096
00:44:59,935 --> 00:45:03,520
I'm just trying to find a
a way to rephrase it.

1097
00:45:03,520 --> 00:45:06,190
Why are we focusing--

1098
00:45:06,190 --> 00:45:07,990
most of the panel has just
purely been talking about

1099
00:45:07,990 --> 00:45:08,770
audio and video.

1100
00:45:08,770 --> 00:45:12,160
But audio and video are
just a type of data.

1101
00:45:12,160 --> 00:45:15,170
Right, OK, it has specific
characteristics.

1102
00:45:15,170 --> 00:45:17,720
Why is the focus purely focusing
on those, rather than

1103
00:45:17,720 --> 00:45:22,230
just coming up with a more
generic data channel?

1104
00:45:22,230 --> 00:45:23,490
HENRIK JORETEG: Quick one liner,
I think it makes a

1105
00:45:23,490 --> 00:45:26,750
better demo, which is
why it landed first.

1106
00:45:26,750 --> 00:45:28,440
That's my opinion.

1107
00:45:28,440 --> 00:45:30,400
It's also kind of a special
case in certain ways

1108
00:45:30,400 --> 00:45:31,610
that you have to--

1109
00:45:31,610 --> 00:45:35,200
you're trying to negotiate
encoding types, et cetera.

1110
00:45:35,200 --> 00:45:35,760
But yeah.

1111
00:45:35,760 --> 00:45:36,760
Fundamentally, I
agree with you.

1112
00:45:36,760 --> 00:45:39,270
I think peer connections,
you're still

1113
00:45:39,270 --> 00:45:39,890
doing the same thing.

1114
00:45:39,890 --> 00:45:41,430
You establish a single
peer connection.

1115
00:45:41,430 --> 00:45:42,620
You add and remove
data channels.

1116
00:45:42,620 --> 00:45:44,600
You add and remove video
and audio channels.

1117
00:45:44,600 --> 00:45:45,910
It's still one peer
connection.

1118
00:45:45,910 --> 00:45:47,180
At least that's the way it's
written in the spec.

1119
00:45:47,180 --> 00:45:50,620
So hopefully, it's actually--

1120
00:45:50,620 --> 00:45:50,966
yeah, I don't know.

1121
00:45:50,966 --> 00:45:52,990
Go ahead.

1122
00:45:52,990 --> 00:45:53,620
ROB: Generally, yes.

1123
00:45:53,620 --> 00:45:55,130
They are types of data.

1124
00:45:55,130 --> 00:45:58,010
But the media streaming is
incredibly different, and much

1125
00:45:58,010 --> 00:46:01,140
more complicated than just
sending basic data across.

1126
00:46:01,140 --> 00:46:03,210
So there is a reason why
they are separated.

1127
00:46:03,210 --> 00:46:06,170
But I really do think that the
data channel side of things,

1128
00:46:06,170 --> 00:46:09,320
like sending generic non-audio,
non-video kind of

1129
00:46:09,320 --> 00:46:12,460
data is where WebRTC has an
incredible amount of strength,

1130
00:46:12,460 --> 00:46:14,600
and where we're not really
focusing on yet.

1131
00:46:14,600 --> 00:46:17,710
So right now, we're not
exploring that too much.

1132
00:46:17,710 --> 00:46:20,840
But I am very interested to
see how that is explored,

1133
00:46:20,840 --> 00:46:23,700
because audio and video, yeah,
is the interesting thing.

1134
00:46:23,700 --> 00:46:26,580
And that's kind of why WebRTC
was created, and that's the

1135
00:46:26,580 --> 00:46:27,270
exciting thing.

1136
00:46:27,270 --> 00:46:28,943
Imagine being able to call
Skype from a browser.

1137
00:46:28,943 --> 00:46:31,780
That's an incredible use case.

1138
00:46:31,780 --> 00:46:34,580
But it's now, where do we
take that technology?

1139
00:46:34,580 --> 00:46:35,140
What's next?

1140
00:46:35,140 --> 00:46:36,560
And I think the data
channels is where

1141
00:46:36,560 --> 00:46:38,240
that's sort of hiding.

1142
00:46:38,240 --> 00:46:40,470
MARTYN LOUGHRAN: Of course, as
far as I understand, there's

1143
00:46:40,470 --> 00:46:45,090
some thought of bringing in
other kind of media streams,

1144
00:46:45,090 --> 00:46:47,000
not just audio and video.

1145
00:46:47,000 --> 00:46:49,130
What about temperature
information or sensor

1146
00:46:49,130 --> 00:46:50,390
information?

1147
00:46:50,390 --> 00:46:51,825
I don't know if anything's
happening there.

1148
00:46:51,825 --> 00:46:52,500
I don't really know.

1149
00:46:52,500 --> 00:46:55,210
But I've heard it mooted
as a possibility.

1150
00:46:55,210 --> 00:46:56,570
MALE SPEAKER: Well actually,
there was one comment I wanted

1151
00:46:56,570 --> 00:46:58,960
to make, which is that so often,
we expect these specs

1152
00:46:58,960 --> 00:46:59,370
to perfect.

1153
00:46:59,370 --> 00:47:01,060
And if they're not perfect, we
get really upset at them, and

1154
00:47:01,060 --> 00:47:02,420
like how bad the web
is, and so forth.

1155
00:47:02,420 --> 00:47:06,080
But shouldn't we just maybe
cut WebRTC and maybe the

1156
00:47:06,080 --> 00:47:08,890
others a little bit of slack,
and say, maybe to your point,

1157
00:47:08,890 --> 00:47:11,640
what can we do as a community to
kind of exercise things and

1158
00:47:11,640 --> 00:47:12,480
then get some feedback?

1159
00:47:12,480 --> 00:47:14,200
What can we do to do that?

1160
00:47:14,200 --> 00:47:15,660
HENRIK JORETEG: I mean,
definitely, I would suggest to

1161
00:47:15,660 --> 00:47:17,750
everybody in here if, you
haven't started playing with

1162
00:47:17,750 --> 00:47:21,040
this stuff, it's phenomenally
just--

1163
00:47:21,040 --> 00:47:22,010
it's very, very--

1164
00:47:22,010 --> 00:47:23,750
I mean, I hate the word
disruptive, but it's a

1165
00:47:23,750 --> 00:47:26,860
ridiculously disruptive
technology.

1166
00:47:26,860 --> 00:47:29,640
I mean, I seriously built my
own telecom to call my mom

1167
00:47:29,640 --> 00:47:30,280
with in Sweden.

1168
00:47:30,280 --> 00:47:30,810
I mean, come on.

1169
00:47:30,810 --> 00:47:34,320
Like, I'm not supposed to
be able to do that.

1170
00:47:34,320 --> 00:47:36,500
This is the kind of power
that it provides you.

1171
00:47:36,500 --> 00:47:38,790
And I would love to see
everybody here really get in

1172
00:47:38,790 --> 00:47:40,040
on hacking on this stuff.

1173
00:47:40,040 --> 00:47:43,244

1174
00:47:43,244 --> 00:47:44,494
MALE SPEAKER: Steven?

1175
00:47:44,494 --> 00:47:48,376

1176
00:47:48,376 --> 00:47:51,250
AUDIENCE: I guess just on that
last point, just what he said

1177
00:47:51,250 --> 00:47:53,200
there, if we could quickly poll
the panel, you saying

1178
00:47:53,200 --> 00:47:53,870
this is awesome.

1179
00:47:53,870 --> 00:47:56,820
What other use cases would the
panel have if you could each

1180
00:47:56,820 --> 00:47:59,760
nominate a use case for WebRTC
of something cool that you'd

1181
00:47:59,760 --> 00:48:01,830
like to see that you think that
this technology enables?

1182
00:48:01,830 --> 00:48:02,835
MALE SPEAKER: Excellent
question.

1183
00:48:02,835 --> 00:48:04,085
Can we just go through?

1184
00:48:04,085 --> 00:48:06,670

1185
00:48:06,670 --> 00:48:07,810
WESLEY: Video conf-- no.

1186
00:48:07,810 --> 00:48:12,710
[LAUGHTER]

1187
00:48:12,710 --> 00:48:16,740
WESLEY: Yeah, I mean, it would
be cool if the remotes that

1188
00:48:16,740 --> 00:48:19,330
you guys are using, like I said
earlier, you could just

1189
00:48:19,330 --> 00:48:22,220
pull up getUserMedia and
you wouldn't have

1190
00:48:22,220 --> 00:48:23,270
to hand you a mic.

1191
00:48:23,270 --> 00:48:24,280
You could just speak
to your phone

1192
00:48:24,280 --> 00:48:25,980
microphone and be broadcast.

1193
00:48:25,980 --> 00:48:28,670
So that would require looking
up to the A/V here.

1194
00:48:28,670 --> 00:48:30,730
It would require writing
the code to

1195
00:48:30,730 --> 00:48:33,300
handle the binary data.

1196
00:48:33,300 --> 00:48:38,250
But yeah, and then there's
a lot of geolocation--

1197
00:48:38,250 --> 00:48:41,120
like, in-room geolocation.

1198
00:48:41,120 --> 00:48:43,410
Like, there's been a lot of
investments made in companies

1199
00:48:43,410 --> 00:48:47,100
doing this lately where you
actually can find devices in

1200
00:48:47,100 --> 00:48:54,190
the room with much greater
granularity using a

1201
00:48:54,190 --> 00:48:56,160
geolocation API.

1202
00:48:56,160 --> 00:49:02,270
So with WebRTC, you could
say, OK, I know this--

1203
00:49:02,270 --> 00:49:04,410
I guess you would have to have
some centralized mechanism.

1204
00:49:04,410 --> 00:49:06,780
But you could find out all the
people that like the color

1205
00:49:06,780 --> 00:49:10,170
blue, and then you would be able
to pull up a video chat

1206
00:49:10,170 --> 00:49:13,540
with them in this room using
that newer technology.

1207
00:49:13,540 --> 00:49:17,270
So there's complementary
technologies, I guess, that

1208
00:49:17,270 --> 00:49:19,980
would be required for that use
case, but that's an idea.

1209
00:49:19,980 --> 00:49:20,440
MALE SPEAKER: OK.

1210
00:49:20,440 --> 00:49:21,360
John?

1211
00:49:21,360 --> 00:49:25,850
JOHN FALLOWS: Yeah, I think just
enabling the internet of

1212
00:49:25,850 --> 00:49:28,690
things, machine of things
kind of stuff.

1213
00:49:28,690 --> 00:49:31,710
Because a lot of times with a
centralized model, we assume

1214
00:49:31,710 --> 00:49:34,530
that even though these devices
may be talking to one another,

1215
00:49:34,530 --> 00:49:38,810
that they're actually able
to potentially mediate or

1216
00:49:38,810 --> 00:49:42,760
coordinate against a connected
server system.

1217
00:49:42,760 --> 00:49:45,360
So you know, just not having to
rely on that always being

1218
00:49:45,360 --> 00:49:48,080
around, but still blending
these two worlds together

1219
00:49:48,080 --> 00:49:48,940
seamlessly.

1220
00:49:48,940 --> 00:49:52,070
I think that's a tough challenge
to do well, but just

1221
00:49:52,070 --> 00:49:53,660
raising the abstraction a little
bit so it makes these

1222
00:49:53,660 --> 00:49:54,670
things easy.

1223
00:49:54,670 --> 00:49:56,840
And get it out of the
developers' hands for trying

1224
00:49:56,840 --> 00:49:59,340
to solve all these
complex problems.

1225
00:49:59,340 --> 00:50:01,990
At Kaazing, we call these
things the web of things

1226
00:50:01,990 --> 00:50:04,060
instead of the internet of
things, because we think that

1227
00:50:04,060 --> 00:50:06,420
a lot of challenges that we
see in trying to connect

1228
00:50:06,420 --> 00:50:10,430
together those IP or lower level
protocols with WebRTC

1229
00:50:10,430 --> 00:50:13,890
that we don't actually see so
much in WebSocket because it's

1230
00:50:13,890 --> 00:50:16,710
web centric is achieved by
raising the bar a little bit

1231
00:50:16,710 --> 00:50:18,990
and connecting everything
together at the web level,

1232
00:50:18,990 --> 00:50:20,290
instead of thinking at
the internet level.

1233
00:50:20,290 --> 00:50:21,730
So we say web of things.

1234
00:50:21,730 --> 00:50:22,150
MALE SPEAKER: Cool.

1235
00:50:22,150 --> 00:50:22,990
Henrik?

1236
00:50:22,990 --> 00:50:25,870
HENRIK JORETEG: I would love
to see peer-distributed

1237
00:50:25,870 --> 00:50:27,530
rebroadcasting.

1238
00:50:27,530 --> 00:50:31,730
Why couldn't I pull up my phone
and be able to stream

1239
00:50:31,730 --> 00:50:34,090
something just off my phone
to the entire internet?

1240
00:50:34,090 --> 00:50:37,875
If you have a proper
rebroadcasting ability where a

1241
00:50:37,875 --> 00:50:41,820
peer could relay that feed, you
could basically turn every

1242
00:50:41,820 --> 00:50:44,500
person on the planet with
a smartphone into a news

1243
00:50:44,500 --> 00:50:47,690
reporter capable of live
broadcasts, which is

1244
00:50:47,690 --> 00:50:48,760
phenomenal.

1245
00:50:48,760 --> 00:50:51,470
And again, that's video and
audio, but I think that

1246
00:50:51,470 --> 00:50:53,780
particular one's really
interesting.

1247
00:50:53,780 --> 00:50:55,060
Of course, you could do the
exact same thing with any

1248
00:50:55,060 --> 00:50:57,610
other type of data.

1249
00:50:57,610 --> 00:50:58,260
Examples--

1250
00:50:58,260 --> 00:50:59,500
sheesh.

1251
00:50:59,500 --> 00:51:00,720
I can't think of anything
off the top of my head.

1252
00:51:00,720 --> 00:51:02,790
I've been too focused
on the video stuff.

1253
00:51:02,790 --> 00:51:03,940
MALE SPEAKER: Cool

1254
00:51:03,940 --> 00:51:06,190
ROB: I've got to say, I mean,
the simplest one is games and

1255
00:51:06,190 --> 00:51:08,060
how that's going to completely
change now.

1256
00:51:08,060 --> 00:51:09,760
You've got UDP and
unreliable data.

1257
00:51:09,760 --> 00:51:12,930
But the second one is the web
of things, like these

1258
00:51:12,930 --> 00:51:15,830
interconnected devices and
actually having the non-human

1259
00:51:15,830 --> 00:51:19,340
interaction, and devices
talking to each other.

1260
00:51:19,340 --> 00:51:21,180
Like, that's where it gets
really interesting.

1261
00:51:21,180 --> 00:51:23,370
We have phones powered
by JavaScript.

1262
00:51:23,370 --> 00:51:25,550
The entire operating system's
written in JavaScript.

1263
00:51:25,550 --> 00:51:26,990
That's incredible.

1264
00:51:26,990 --> 00:51:30,260
We now have Arduino-like devices
powered by JavaScript

1265
00:51:30,260 --> 00:51:31,310
and stuff like that.

1266
00:51:31,310 --> 00:51:34,070
And how are things going to
change, and how could we use

1267
00:51:34,070 --> 00:51:37,290
WebRTC to link those devices,
and what does that now allow

1268
00:51:37,290 --> 00:51:39,920
us to do that we couldn't
do before?

1269
00:51:39,920 --> 00:51:43,060
Using web technologies that
already are interoperable with

1270
00:51:43,060 --> 00:51:45,490
all of the other things that we
have available to us, like

1271
00:51:45,490 --> 00:51:48,630
the hardware APIs, and just
all of the other web APIs,

1272
00:51:48,630 --> 00:51:51,156
that's where things get very,
very interesting.

1273
00:51:51,156 --> 00:51:52,400
MARTYN LOUGHRAN: Yeah,
I think I would just

1274
00:51:52,400 --> 00:51:53,420
reiterate that point.

1275
00:51:53,420 --> 00:51:54,850
I mean, it's enabling.

1276
00:51:54,850 --> 00:51:57,260
It's disrupting the control.

1277
00:51:57,260 --> 00:52:01,890
And when you need an
ultra-low-latency connection

1278
00:52:01,890 --> 00:52:05,330
between two objects, it's now
possible for web developers to

1279
00:52:05,330 --> 00:52:06,560
build those things.

1280
00:52:06,560 --> 00:52:08,870
So you have a control
surface for a

1281
00:52:08,870 --> 00:52:09,960
quadracopter or something.

1282
00:52:09,960 --> 00:52:11,620
You can now build that
in a web browser.

1283
00:52:11,620 --> 00:52:12,160
It's amazing.

1284
00:52:12,160 --> 00:52:14,510
MALE SPEAKER: But is that going
to be an issue that not

1285
00:52:14,510 --> 00:52:17,200
too many Arduinos can be running
Chrome right now?

1286
00:52:17,200 --> 00:52:17,460
ROB: Right.

1287
00:52:17,460 --> 00:52:18,700
MALE SPEAKER: So how do
we get WebRTC into

1288
00:52:18,700 --> 00:52:19,950
these lower-level devices?

1289
00:52:19,950 --> 00:52:22,020

1290
00:52:22,020 --> 00:52:23,580
ROB: Someone needs
to build it.

1291
00:52:23,580 --> 00:52:23,870
MALE SPEAKER: OK.

1292
00:52:23,870 --> 00:52:25,600
I mean, I just want to make sure
I was following what you

1293
00:52:25,600 --> 00:52:27,340
said, because what you said
is great, but there's no

1294
00:52:27,340 --> 00:52:28,710
immediate way for us to
do that, correct?

1295
00:52:28,710 --> 00:52:31,740
HENRIK JORETEG: This is a room
of developers, right?

1296
00:52:31,740 --> 00:52:32,720
Somebody can do it.

1297
00:52:32,720 --> 00:52:35,020
MARTYN LOUGHRAN: I mean, this
is partly why we're asking

1298
00:52:35,020 --> 00:52:37,580
about WebRTC on the server
and things like that.

1299
00:52:37,580 --> 00:52:40,155
Once you get it into things like
node.js, then this is--

1300
00:52:40,155 --> 00:52:41,150
MALE SPEAKER: Yeah, that
would be huge.

1301
00:52:41,150 --> 00:52:42,960
I think we have a few
minutes left, and

1302
00:52:42,960 --> 00:52:45,490
Christopher's been patient.

1303
00:52:45,490 --> 00:52:48,700
We'll do him, and then,
I think, you, OK?

1304
00:52:48,700 --> 00:52:49,350
Christopher.

1305
00:52:49,350 --> 00:52:52,120
No, that Christopher.

1306
00:52:52,120 --> 00:52:52,260
AUDIENCE: Sorry.

1307
00:52:52,260 --> 00:52:53,890
I apologize if I sound
like a broken record.

1308
00:52:53,890 --> 00:53:00,170
But as soon as you said enabling
technology, I'm

1309
00:53:00,170 --> 00:53:01,290
brought back again
to the idea of

1310
00:53:01,290 --> 00:53:03,580
decentralizing the solutions.

1311
00:53:03,580 --> 00:53:08,100
I mean, you think of dissident
suppression, say in Arab

1312
00:53:08,100 --> 00:53:12,130
Spring, and the raw potential
that exists in the phone to

1313
00:53:12,130 --> 00:53:15,010
directly connect people.

1314
00:53:15,010 --> 00:53:16,260
Without a central network

1315
00:53:16,260 --> 00:53:17,290
connection, that isn't possible.

1316
00:53:17,290 --> 00:53:18,880
Or emergency response--

1317
00:53:18,880 --> 00:53:22,260
as earthquakes, hurricanes
take out centralized

1318
00:53:22,260 --> 00:53:25,770
communications, it seems like
the technology exists to help

1319
00:53:25,770 --> 00:53:29,905
solve these communication
problems.

1320
00:53:29,905 --> 00:53:30,310
MALE SPEAKER: Go ahead.

1321
00:53:30,310 --> 00:53:31,240
AUDIENCE: But that's really
just a comment.

1322
00:53:31,240 --> 00:53:33,330
ROB: I mean, that's a really
interesting problem.

1323
00:53:33,330 --> 00:53:35,380
And that's something--

1324
00:53:35,380 --> 00:53:36,980
I mean, I've not developed for,
but I've been thinking

1325
00:53:36,980 --> 00:53:37,550
about a little bit.

1326
00:53:37,550 --> 00:53:41,730
And the whole idea of creating
sort of mesh networks out of

1327
00:53:41,730 --> 00:53:43,380
nowhere using these technologies
is incredibly

1328
00:53:43,380 --> 00:53:47,270
powerful, like the ability to
then spread communication

1329
00:53:47,270 --> 00:53:50,660
amongst an ad hoc local
network is crazy.

1330
00:53:50,660 --> 00:53:53,880
You have to get at the actual
connecting the two devices

1331
00:53:53,880 --> 00:53:54,520
together problem.

1332
00:53:54,520 --> 00:53:57,025
But if we can solve that, then
what you can actually do with

1333
00:53:57,025 --> 00:53:58,520
that is incredibly powerful.

1334
00:53:58,520 --> 00:53:59,840
WESLEY: It's kind of like the
only way you could do that now

1335
00:53:59,840 --> 00:54:02,655
is to carry around some external
antenna with you with

1336
00:54:02,655 --> 00:54:05,410
an extra power supply, and
create your own network.

1337
00:54:05,410 --> 00:54:08,170
I mean, that would have to be
like standard issue, or

1338
00:54:08,170 --> 00:54:08,740
emergencies.

1339
00:54:08,740 --> 00:54:10,820
Yeah, I mean, that's today.

1340
00:54:10,820 --> 00:54:13,680
But your phone cannot power that
kind of transmission and

1341
00:54:13,680 --> 00:54:15,880
that kind of findability.

1342
00:54:15,880 --> 00:54:16,750
MALE SPEAKER: And you've
been patient.

1343
00:54:16,750 --> 00:54:18,000
One more question?

1344
00:54:18,000 --> 00:54:21,170

1345
00:54:21,170 --> 00:54:23,550
AUDIENCE: It doesn't seem that
you need a web browser in

1346
00:54:23,550 --> 00:54:27,530
order to have WebRTC.

1347
00:54:27,530 --> 00:54:31,670
You could always do it through
node or through and JavaScript

1348
00:54:31,670 --> 00:54:34,440
on-chip device.

1349
00:54:34,440 --> 00:54:36,770
MALE SPEAKER: It's a simple
matter of programming.

1350
00:54:36,770 --> 00:54:38,455
ROB: It just doesn't exist
at the moment.

1351
00:54:38,455 --> 00:54:39,830
HENRIK JORETEG: There have
been some efforts.

1352
00:54:39,830 --> 00:54:41,860
There's actually a node WebRTC
library that I attempted to

1353
00:54:41,860 --> 00:54:43,610
bind to libjingle.

1354
00:54:43,610 --> 00:54:45,460
And I don't quite know
the status of that.

1355
00:54:45,460 --> 00:54:47,610
It hasn't had much activity.

1356
00:54:47,610 --> 00:54:49,130
MALE SPEAKER: I think we've
got the wrap-up, so

1357
00:54:49,130 --> 00:54:49,810
thank you very much.

1358
00:54:49,810 --> 00:54:51,510
If you liked the session,
please give us a vote.

1359
00:54:51,510 --> 00:54:55,280
And if you don't, just
don't give us a vote.

1360
00:54:55,280 --> 00:54:57,800
WESLEY: Whoever's writing the
script to do 50 votes, go

1361
00:54:57,800 --> 00:54:59,180
ahead and up that to 100.

1362
00:54:59,180 --> 00:55:01,720
[LAUGHTER]

1363
00:55:01,720 --> 00:55:01,870
MALE SPEAKER: Awesome.

1364
00:55:01,870 --> 00:55:03,200
Thanks very much.

1365
00:55:03,200 --> 00:55:14,020
[APPLAUSE]