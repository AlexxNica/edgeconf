1
00:00:00,000 --> 00:00:06,110

2
00:00:06,110 --> 00:00:06,810
JAKE ARCHIBALD: Hello
everyone.

3
00:00:06,810 --> 00:00:09,830
Welcome to the Offline panel.

4
00:00:09,830 --> 00:00:11,880
Most of us, as web
developers, we--

5
00:00:11,880 --> 00:00:15,560
I think I was about to say that
we declare game over when

6
00:00:15,560 --> 00:00:19,630
there's no network connection
available or when it's faulty.

7
00:00:19,630 --> 00:00:23,650
But if we want to compete with
the cream of native apps, then

8
00:00:23,650 --> 00:00:25,615
having the network as
a dependency is

9
00:00:25,615 --> 00:00:26,770
simply not good enough.

10
00:00:26,770 --> 00:00:31,790
But the five brave souls in
front of you today, they laugh

11
00:00:31,790 --> 00:00:33,980
in the face of zero bars
of connectivity.

12
00:00:33,980 --> 00:00:36,590
And they do not want your wallet
to be drained when you

13
00:00:36,590 --> 00:00:37,360
are roaming.

14
00:00:37,360 --> 00:00:41,050
And they do not want to give up
on you when your ISP has.

15
00:00:41,050 --> 00:00:44,470
We have Matt Andrews from the
"Financial Times." You've got

16
00:00:44,470 --> 00:00:45,675
Craig Cavalier from
Liquid Frameworks.

17
00:00:45,675 --> 00:00:48,790
And we've got Calvin Spealman
from Caktus Consulting.

18
00:00:48,790 --> 00:00:52,640
These guys have been building
stuff with the current crop of

19
00:00:52,640 --> 00:00:56,010
inadequate APIs that
we have on the web.

20
00:00:56,010 --> 00:00:57,140
But they have suffered
through that.

21
00:00:57,140 --> 00:00:59,580
So give them a hug afterwards,
because they've

22
00:00:59,580 --> 00:01:00,930
been damaged by that.

23
00:01:00,930 --> 00:01:04,260
But we also have Anne van
Kesteren from Mozilla and Alex

24
00:01:04,260 --> 00:01:05,480
Russell from Google.

25
00:01:05,480 --> 00:01:07,490
And these guys have been working
on the future APIs

26
00:01:07,490 --> 00:01:10,000
that are going to solve all
of our worldly problems.

27
00:01:10,000 --> 00:01:10,830
Is that fair to say?

28
00:01:10,830 --> 00:01:11,660
Yeah?

29
00:01:11,660 --> 00:01:11,940
OK.

30
00:01:11,940 --> 00:01:12,910
That's good.

31
00:01:12,910 --> 00:01:15,000
So we're hoping that in the
future, making a site work

32
00:01:15,000 --> 00:01:18,630
offline is not going to be an
act of self flagellation.

33
00:01:18,630 --> 00:01:21,140
And on that note, Alex, I
believe you're going to

34
00:01:21,140 --> 00:01:23,110
introduce a topic.

35
00:01:23,110 --> 00:01:24,500
Are you good to go?

36
00:01:24,500 --> 00:01:25,443
ALEX RUSSELL: Sure.

37
00:01:25,443 --> 00:01:27,355
[LAUGHTER]

38
00:01:27,355 --> 00:01:28,845
ALEX RUSSELL: As Jake
says, I'm Alex.

39
00:01:28,845 --> 00:01:31,600

40
00:01:31,600 --> 00:01:33,060
Do we have slides?

41
00:01:33,060 --> 00:01:36,580
Did I fail at this
miserably again?

42
00:01:36,580 --> 00:01:37,830
I'm so good at this.

43
00:01:37,830 --> 00:01:44,130

44
00:01:44,130 --> 00:01:46,820
JAKE ARCHIBALD: So yeah, we've
changed the name of the new

45
00:01:46,820 --> 00:01:49,280
stuff a couple of
times recently.

46
00:01:49,280 --> 00:01:52,750
It kind of started off as
Navigation Controller, but

47
00:01:52,750 --> 00:01:53,540
it's been expanded.

48
00:01:53,540 --> 00:01:56,190
It spent a little bit of
time as Event Worker.

49
00:01:56,190 --> 00:01:57,620
And now it's Service Worker.

50
00:01:57,620 --> 00:02:01,570
But it has been pointed out by
Lady Ada King on Twitter that

51
00:02:01,570 --> 00:02:04,100
Service Worker does sound
somewhat like the oldest

52
00:02:04,100 --> 00:02:05,490
profession in the world.

53
00:02:05,490 --> 00:02:06,830
[LAUGHTER]

54
00:02:06,830 --> 00:02:08,680
JAKE ARCHIBALD: So
I don't know.

55
00:02:08,680 --> 00:02:10,690
We kind of thought, maybe,
Service Controller.

56
00:02:10,690 --> 00:02:12,625
But does that sound
like a pimp?

57
00:02:12,625 --> 00:02:14,050
I don't know.

58
00:02:14,050 --> 00:02:16,240
But an app pimp, that's
pretty cool.

59
00:02:16,240 --> 00:02:17,850
We all want to use
an app pimp.

60
00:02:17,850 --> 00:02:20,190
So maybe we'll go with
that, pimp our apps.

61
00:02:20,190 --> 00:02:22,380
That could be cool.

62
00:02:22,380 --> 00:02:22,640
So, yeah.

63
00:02:22,640 --> 00:02:25,400
We're going to have to find a
name for it that doesn't evoke

64
00:02:25,400 --> 00:02:26,780
that kind of negative thing.

65
00:02:26,780 --> 00:02:28,710
But how are you doing, Alex?

66
00:02:28,710 --> 00:02:29,730
Because I'm running
out of filler.

67
00:02:29,730 --> 00:02:31,104
ALEX RUSSELL: Yeah.

68
00:02:31,104 --> 00:02:32,630
[LAUGHTER]

69
00:02:32,630 --> 00:02:34,090
JAKE ARCHIBALD: Is it because
it doesn't work offline?

70
00:02:34,090 --> 00:02:34,880
Is that your problem?

71
00:02:34,880 --> 00:02:39,030
[LAUGHTER]

72
00:02:39,030 --> 00:02:40,280
ALEX RUSSELL: That might
actually be it.

73
00:02:40,280 --> 00:02:42,860

74
00:02:42,860 --> 00:02:43,260
Yeah.

75
00:02:43,260 --> 00:02:47,580
So as Jake says, I am Alex.

76
00:02:47,580 --> 00:02:49,740
And I am re-scaling the
slides as we speak.

77
00:02:49,740 --> 00:02:52,950
So I spend a lot of
time offline.

78
00:02:52,950 --> 00:02:55,790
I most recently lived in London
before I returned to

79
00:02:55,790 --> 00:02:56,640
San Francisco.

80
00:02:56,640 --> 00:03:01,050
And they did something in the
tube for the Olympics where

81
00:03:01,050 --> 00:03:02,790
they said they were going to
put Wi-Fi in all of the

82
00:03:02,790 --> 00:03:06,270
stations, which technically
speaking is accurate.

83
00:03:06,270 --> 00:03:10,020
They did happen to put Wi-Fi
transmitters and receivers in

84
00:03:10,020 --> 00:03:11,740
all of the stations.

85
00:03:11,740 --> 00:03:14,280
But one of my most frequent tube
journeys was to and from

86
00:03:14,280 --> 00:03:16,200
airports, because I spend a
lot of time in airplanes.

87
00:03:16,200 --> 00:03:20,820
And it always seemed really
punitive, because you would

88
00:03:20,820 --> 00:03:24,070
get to a station and for about
20 seconds, while people were

89
00:03:24,070 --> 00:03:29,950
loading and unloading, your
wireless Wi-Fi radio would be

90
00:03:29,950 --> 00:03:33,300
attempting to connect
frantically to the thing.

91
00:03:33,300 --> 00:03:36,050
And you'd be trying to log in
a little bit so you can just

92
00:03:36,050 --> 00:03:37,790
download the next-- no!

93
00:03:37,790 --> 00:03:38,280
Fuck!

94
00:03:38,280 --> 00:03:39,333
We're moving.

95
00:03:39,333 --> 00:03:43,260
[LAUGHTER]

96
00:03:43,260 --> 00:03:45,990
ALEX RUSSELL: So I got really
good at figuring out how to

97
00:03:45,990 --> 00:03:48,580
turn off the Wi-Fi in my device,
because the network

98
00:03:48,580 --> 00:03:50,000
just wasn't reliable.

99
00:03:50,000 --> 00:03:51,550
Even when I absolutely
wanted it--

100
00:03:51,550 --> 00:03:53,450
I wanted to see the news, I
wanted to get the latest

101
00:03:53,450 --> 00:03:54,660
"Times" or "Guardian,"
whatever it is.

102
00:03:54,660 --> 00:03:56,480
OK I've outed myself
as a lefty, fine.

103
00:03:56,480 --> 00:03:59,280

104
00:03:59,280 --> 00:04:02,640
And the end of this journey, of
course, ends you up in an

105
00:04:02,640 --> 00:04:08,500
airport where you are at the
whim of whoever happens to

106
00:04:08,500 --> 00:04:13,520
have the crappy Wi-Fi in
whatever bit of hell you've

107
00:04:13,520 --> 00:04:17,420
ended yourself up in with a
captive portal and all the

108
00:04:17,420 --> 00:04:17,899
rest, right?

109
00:04:17,899 --> 00:04:20,510
So these are hostile network
environments.

110
00:04:20,510 --> 00:04:21,870
And they mediate our lives.

111
00:04:21,870 --> 00:04:24,580
Like I think the work
environment and the home

112
00:04:24,580 --> 00:04:28,650
environment are special cases
of how we interact with the

113
00:04:28,650 --> 00:04:29,540
stuff around us.

114
00:04:29,540 --> 00:04:31,270
And it's in those environments--
the airport,

115
00:04:31,270 --> 00:04:33,470
the tube, the ones that are
really stressful where you're

116
00:04:33,470 --> 00:04:35,220
trying to get some place,
you've got a thing.

117
00:04:35,220 --> 00:04:36,780
Where the heck was I going?

118
00:04:36,780 --> 00:04:38,470
What's this thing I'm trying
to do right now?

119
00:04:38,470 --> 00:04:39,170
I don't remember.

120
00:04:39,170 --> 00:04:40,940
I look at my phone and ff--

121
00:04:40,940 --> 00:04:41,760
right?

122
00:04:41,760 --> 00:04:46,670
It's that environment that we,
as a technology stack, fail at

123
00:04:46,670 --> 00:04:50,520
miserably, largely because we
have built ourselves the

124
00:04:50,520 --> 00:04:54,020
assumption that what
is remote is cheap.

125
00:04:54,020 --> 00:04:55,130
Because everything
is remote, right?

126
00:04:55,130 --> 00:04:57,720
The web is designed around the
idea of the URL, the thing

127
00:04:57,720 --> 00:04:59,870
that is over there that's
cheap to do.

128
00:04:59,870 --> 00:05:03,100
And that little tiny anchor
tag makes it look like

129
00:05:03,100 --> 00:05:05,660
everything is connected to
you all the time, right?

130
00:05:05,660 --> 00:05:07,820
a href is the most innocent
thing you

131
00:05:07,820 --> 00:05:09,140
can possibly imagine.

132
00:05:09,140 --> 00:05:11,280
And at the same time,
the implications

133
00:05:11,280 --> 00:05:12,630
of a href are massive.

134
00:05:12,630 --> 00:05:14,440
It says nothing about
whether or not you

135
00:05:14,440 --> 00:05:15,570
can get to the network.

136
00:05:15,570 --> 00:05:19,360
And the tube gives us a good
window into what it means to

137
00:05:19,360 --> 00:05:21,100
know whether or not you're
online, right?

138
00:05:21,100 --> 00:05:25,830
So we keep getting requests for
a bandwidth property in

139
00:05:25,830 --> 00:05:26,850
the browser, right?

140
00:05:26,850 --> 00:05:27,920
Tell me what my bandwidth is.

141
00:05:27,920 --> 00:05:30,060
Tell me what my available
bandwidth is.

142
00:05:30,060 --> 00:05:31,420
There's no way to
actually know.

143
00:05:31,420 --> 00:05:35,540
So if I show up at a conference
and there's a

144
00:05:35,540 --> 00:05:38,630
captive portal to go get me my
thing, my bandwidth to a thing

145
00:05:38,630 --> 00:05:41,660
which does nothing I want
might be infinite.

146
00:05:41,660 --> 00:05:43,340
Whereas, my bandwidth to all
of the services that I

147
00:05:43,340 --> 00:05:45,930
actually care about
might be negative.

148
00:05:45,930 --> 00:05:50,660
So we find ourselves in
this situation a lot.

149
00:05:50,660 --> 00:05:53,470
And it's very difficult, from
the browser's perspective, to

150
00:05:53,470 --> 00:05:55,770
say anything meaningful about
your connection, right?

151
00:05:55,770 --> 00:05:59,290
Saying something other than "I
can't do anything because

152
00:05:59,290 --> 00:06:01,400
there's no radio turned on
and it's not connected to

153
00:06:01,400 --> 00:06:04,160
anything" is a very difficult
call to make.

154
00:06:04,160 --> 00:06:07,090
So we've put ourselves in a
situation on the web where

155
00:06:07,090 --> 00:06:09,750
we've architected an entire
stack of stuff around the idea

156
00:06:09,750 --> 00:06:12,190
that the thing that's over there
is really cheap, or at

157
00:06:12,190 --> 00:06:13,860
least as cheap as everything
else is.

158
00:06:13,860 --> 00:06:16,740
And the thing that's local
is unreliable, right?

159
00:06:16,740 --> 00:06:18,840
Caches are things that get
evicted, they're things that

160
00:06:18,840 --> 00:06:21,470
you can't trust, they're things
you can't rely on.

161
00:06:21,470 --> 00:06:24,160
And this isn't how we build
anything anywhere else, right?

162
00:06:24,160 --> 00:06:25,560
I would never build a
browser on top of

163
00:06:25,560 --> 00:06:27,170
this technology stack.

164
00:06:27,170 --> 00:06:29,750
And I don't mean that in the
sense that there are things

165
00:06:29,750 --> 00:06:30,900
that you can't do.

166
00:06:30,900 --> 00:06:33,750
I just mean that you would never
put up with the idea

167
00:06:33,750 --> 00:06:36,910
that the Close Tab icon
might be evicted.

168
00:06:36,910 --> 00:06:39,090
That's not a thing that you
would ever put up with.

169
00:06:39,090 --> 00:06:43,450
So let's think through
how we got here.

170
00:06:43,450 --> 00:06:47,890
So imagine a little website
that's a little tiny two-man

171
00:06:47,890 --> 00:06:53,710
agency, two-person agency,
two-alien agency, two beings.

172
00:06:53,710 --> 00:06:56,260
And they're trying to put
together a website.

173
00:06:56,260 --> 00:06:58,640
And it's the simplest thing
that could possibly work.

174
00:06:58,640 --> 00:07:00,720
And if you deconstruct this
layout, it tells you

175
00:07:00,720 --> 00:07:02,150
everything you need
to know, right?

176
00:07:02,150 --> 00:07:04,100
This is really, really simple.

177
00:07:04,100 --> 00:07:06,560
This is static content
effectively.

178
00:07:06,560 --> 00:07:09,100
And it probably will
bit rot, right?

179
00:07:09,100 --> 00:07:11,460
They're probably not going to
change their team website if

180
00:07:11,460 --> 00:07:13,160
they're even moderately
successful because it will

181
00:07:13,160 --> 00:07:14,800
outstrip their ability to
actually build websites for

182
00:07:14,800 --> 00:07:17,080
themselves because they'll be
doing it for clients, right?

183
00:07:17,080 --> 00:07:17,700
OK.

184
00:07:17,700 --> 00:07:20,080
So this is going to be
effectively unmaintained.

185
00:07:20,080 --> 00:07:22,670
And if you look at how it's
built, you can sort of get a

186
00:07:22,670 --> 00:07:26,870
sense for what it takes to
get started on the web.

187
00:07:26,870 --> 00:07:30,360
You have some resources, you
have some HTML files.

188
00:07:30,360 --> 00:07:33,380
And when you really start out,
it's copy and paste.

189
00:07:33,380 --> 00:07:35,610
If you're going to get advanced
from 1995, you'll

190
00:07:35,610 --> 00:07:37,990
eventually configure Apache to
do server side includes.

191
00:07:37,990 --> 00:07:39,830
And you'll change
these to .shtml.

192
00:07:39,830 --> 00:07:41,930
Thank you, very much.

193
00:07:41,930 --> 00:07:43,440
And you'll have your server
side includes for the

194
00:07:43,440 --> 00:07:46,000
navigations and the footers
at the top and the bottom.

195
00:07:46,000 --> 00:07:47,210
And you will have whacked
all that in.

196
00:07:47,210 --> 00:07:49,690
And so now we're starting to see
that there is a repeated

197
00:07:49,690 --> 00:07:52,550
bit of content around some
of the things that we're

198
00:07:52,550 --> 00:07:54,550
addressing with URLs.

199
00:07:54,550 --> 00:07:56,920
So I have a blog, right?

200
00:07:56,920 --> 00:07:58,400
Please don't read it.

201
00:07:58,400 --> 00:08:00,390
It will save you time
and embarrassment.

202
00:08:00,390 --> 00:08:02,590
But that blog is much more
sophisticated than that little

203
00:08:02,590 --> 00:08:08,740
tiny layout for a static
website, effectively, like a

204
00:08:08,740 --> 00:08:12,630
brochureware site, largely
because it's actually-- the

205
00:08:12,630 --> 00:08:16,090
location of my domain,
infrequently.org, has nothing

206
00:08:16,090 --> 00:08:18,940
to do with an individual
bit of content.

207
00:08:18,940 --> 00:08:20,850
It's not addressing some
bit of content.

208
00:08:20,850 --> 00:08:25,990
It's addressing a database
query, a reverse chronological

209
00:08:25,990 --> 00:08:29,560
order query across these
tables, right?

210
00:08:29,560 --> 00:08:31,790
And when we ship this stuff down
to the client, we don't

211
00:08:31,790 --> 00:08:33,500
ship those tables.

212
00:08:33,500 --> 00:08:35,409
We explode a bunch of
that stuff out.

213
00:08:35,409 --> 00:08:38,890
We denormalize it entirely,
serialize it through

214
00:08:38,890 --> 00:08:41,173
templates, and then
spit it all out.

215
00:08:41,173 --> 00:08:42,789
Right?

216
00:08:42,789 --> 00:08:45,340
But if you go look at any
individual article, it sort of

217
00:08:45,340 --> 00:08:47,660
corresponds to one item in
one of those tables.

218
00:08:47,660 --> 00:08:50,370
And then we take all the whole
machinery again, which is the

219
00:08:50,370 --> 00:08:52,860
shell around that little bit
of content that we're

220
00:08:52,860 --> 00:08:55,990
addressing with the URL, and
we explode it all out.

221
00:08:55,990 --> 00:08:59,910
And we ship this huge bundle
of content down, which

222
00:08:59,910 --> 00:09:01,030
effectively wraps the stuff.

223
00:09:01,030 --> 00:09:02,590
And if you look at the
HTML, that's actually

224
00:09:02,590 --> 00:09:03,380
what happens, right?

225
00:09:03,380 --> 00:09:07,500
It's just document and then tons
and tons of stuff around

226
00:09:07,500 --> 00:09:09,380
it, and then this thing that
we were actually putting in

227
00:09:09,380 --> 00:09:11,740
the center of this template
thing, which is what the URL

228
00:09:11,740 --> 00:09:12,980
is kind of actually
pointing at.

229
00:09:12,980 --> 00:09:15,240
When we talk about meaningful
URLs, we tend to mean

230
00:09:15,240 --> 00:09:19,030
meaningful with regards to the
thing that's the primary thing

231
00:09:19,030 --> 00:09:20,780
you, as a user, would
focus on, right?

232
00:09:20,780 --> 00:09:23,600
It's a very subjective view,
because it's about what the

233
00:09:23,600 --> 00:09:25,530
user is experiencing about that

234
00:09:25,530 --> 00:09:28,320
location, about that state.

235
00:09:28,320 --> 00:09:32,010
So if we think about it like
what is the URL actually

236
00:09:32,010 --> 00:09:35,770
talking about, we start to get
this idea that we've done for

237
00:09:35,770 --> 00:09:39,600
a couple of decades now is to
take server side graphs of

238
00:09:39,600 --> 00:09:44,550
state and pre-explode them for
digestion by the client.

239
00:09:44,550 --> 00:09:46,980
And that pre-explosion means
that HTML is something that's

240
00:09:46,980 --> 00:09:49,730
incredibly powerful and,
effectively, display-only.

241
00:09:49,730 --> 00:09:51,880
And it gets really confused, as
soon as you start talking

242
00:09:51,880 --> 00:09:53,420
about doing dynamic stuff.

243
00:09:53,420 --> 00:09:55,860
Because there's that big model
over on the server which is

244
00:09:55,860 --> 00:09:57,050
written in--

245
00:09:57,050 --> 00:09:58,690
at least in the case
of Wordpress--

246
00:09:58,690 --> 00:10:01,730
it's PHP and MySQL.

247
00:10:01,730 --> 00:10:02,420
OK?

248
00:10:02,420 --> 00:10:04,580
These are two technologies
which, without extraordinary

249
00:10:04,580 --> 00:10:09,510
acts of inhuman and inhumane
technology, are not going to

250
00:10:09,510 --> 00:10:11,900
be running in my browser
anytime soon, right?

251
00:10:11,900 --> 00:10:14,790
I'm sure there's a ScummVM that
would run something like

252
00:10:14,790 --> 00:10:15,610
this, right?

253
00:10:15,610 --> 00:10:16,860
But today, we're
not doing that.

254
00:10:16,860 --> 00:10:19,610

255
00:10:19,610 --> 00:10:21,660
And the latency characteristics
haven't been

256
00:10:21,660 --> 00:10:23,150
set up to do it.

257
00:10:23,150 --> 00:10:29,980
So let's imagine the next leap
from little, tiny brochureware

258
00:10:29,980 --> 00:10:34,080
thing to blog, which is
moderately complicated CMS, to

259
00:10:34,080 --> 00:10:35,690
the biggest thing that we can
think of that's still

260
00:10:35,690 --> 00:10:38,040
effectively static content,
infrequently

261
00:10:38,040 --> 00:10:40,285
updated static content.

262
00:10:40,285 --> 00:10:42,360
I submit Wikipedia.

263
00:10:42,360 --> 00:10:46,350
So the question becomes, if
you're building Wikipedia as

264
00:10:46,350 --> 00:10:49,930
an app, or if you're trying to
make it possible for me, while

265
00:10:49,930 --> 00:10:53,800
sitting on a tube, 20 seconds at
a time of connectivity, if

266
00:10:53,800 --> 00:10:57,860
I'm lucky, to go and read an
article and click on a link to

267
00:10:57,860 --> 00:11:01,470
go to the next article, what
is required for us to think

268
00:11:01,470 --> 00:11:04,660
about making that a meaningful
thing to do?

269
00:11:04,660 --> 00:11:07,510
It turns out the thing that you
really require is the help

270
00:11:07,510 --> 00:11:08,470
of the user.

271
00:11:08,470 --> 00:11:11,380
Because it's not possible to
think through this whole

272
00:11:11,380 --> 00:11:15,160
system and say I'm going
to go grab all of it.

273
00:11:15,160 --> 00:11:16,640
Like my blog is relatively
small.

274
00:11:16,640 --> 00:11:18,290
You could maybe fetch it all.

275
00:11:18,290 --> 00:11:19,900
But you couldn't fetch
all of Wikipedia.

276
00:11:19,900 --> 00:11:20,940
I've tried this.

277
00:11:20,940 --> 00:11:24,460
Decompressing this takes about
20 minutes on an i7, a really

278
00:11:24,460 --> 00:11:25,590
ballsy laptop.

279
00:11:25,590 --> 00:11:27,650
Downloading it took a couple
of minutes too.

280
00:11:27,650 --> 00:11:29,300
So think about Gmail, right?

281
00:11:29,300 --> 00:11:31,720
What am I indexing when I
go to one of these URLs?

282
00:11:31,720 --> 00:11:35,230
Or when I go to a music site,
could I possibly download that

283
00:11:35,230 --> 00:11:36,860
entire library?

284
00:11:36,860 --> 00:11:38,130
My Gmail is really,
really full.

285
00:11:38,130 --> 00:11:39,510
I don't want the entire
contents.

286
00:11:39,510 --> 00:11:41,250
In fact, I want some
subset of that.

287
00:11:41,250 --> 00:11:43,610
And I, as the user, am willing
to help you go figure

288
00:11:43,610 --> 00:11:44,530
out what that is.

289
00:11:44,530 --> 00:11:48,830
And as the atomic size of the
media gets bigger and the more

290
00:11:48,830 --> 00:11:51,340
of it that I've got, the more
that pressure builds up on us.

291
00:11:51,340 --> 00:11:53,370
We don't really have a way
of thinking about it.

292
00:11:53,370 --> 00:11:57,500
So the way I phrase this now is
that there's an application

293
00:11:57,500 --> 00:12:00,450
that you'd like to think about,
which is what helps the

294
00:12:00,450 --> 00:12:02,540
browser render content.

295
00:12:02,540 --> 00:12:03,690
And then there's content.

296
00:12:03,690 --> 00:12:04,970
And in the old days--

297
00:12:04,970 --> 00:12:07,190
quote, unquote "old days"--

298
00:12:07,190 --> 00:12:08,860
we try to conflate the two
as much as possible.

299
00:12:08,860 --> 00:12:12,770
We would smush the shell into
the content with server side

300
00:12:12,770 --> 00:12:14,120
includes and CGI, right?

301
00:12:14,120 --> 00:12:16,630
And as we get more sophisticated
and more

302
00:12:16,630 --> 00:12:19,250
dynamic, we have to serve the
shell and think about the

303
00:12:19,250 --> 00:12:20,540
shell differently
to the content.

304
00:12:20,540 --> 00:12:22,920
They're different entities.

305
00:12:22,920 --> 00:12:26,930
So it turns out the offline
problem is actually about

306
00:12:26,930 --> 00:12:29,050
making applications that can
bootstrap themselves.

307
00:12:29,050 --> 00:12:33,450
It's not about this how do I
transparently turn the thing

308
00:12:33,450 --> 00:12:34,980
that I've got into that other
thing over there.

309
00:12:34,980 --> 00:12:37,120
It's about the data model
and where it's split.

310
00:12:37,120 --> 00:12:39,030
Who owns the data and
where does is live?

311
00:12:39,030 --> 00:12:42,790
Am I doing synchronization over
a thing that I've synced

312
00:12:42,790 --> 00:12:44,550
part of to the client?

313
00:12:44,550 --> 00:12:47,610
Or am I shipping a series
of pre-exploded pages?

314
00:12:47,610 --> 00:12:50,340
That's kind of the
core problem that

315
00:12:50,340 --> 00:12:52,130
we have with offline.

316
00:12:52,130 --> 00:12:55,180
So a Service Worker is an
attempt to get us through a

317
00:12:55,180 --> 00:13:02,190
couple of these problems, by
saying that we don't know the

318
00:13:02,190 --> 00:13:04,020
answer for your application.

319
00:13:04,020 --> 00:13:05,690
But what we do know is that
you don't have enough

320
00:13:05,690 --> 00:13:07,560
control right now.

321
00:13:07,560 --> 00:13:09,200
We spent a lot of time
looking through it.

322
00:13:09,200 --> 00:13:12,710
And basically, it's an
in-browser proxy that you can

323
00:13:12,710 --> 00:13:15,170
install from the perspective
of your origin.

324
00:13:15,170 --> 00:13:17,940
And when you do, at some point
later, when it finishes

325
00:13:17,940 --> 00:13:21,210
installing, you'll get notified,
and the ability to

326
00:13:21,210 --> 00:13:25,090
proxy, do whatever you like
with the response, for any

327
00:13:25,090 --> 00:13:26,910
request those documents make.

328
00:13:26,910 --> 00:13:31,380
You get to own the request,
cross-domain, same

329
00:13:31,380 --> 00:13:32,990
origin, you name it.

330
00:13:32,990 --> 00:13:35,870
And it gives you programmatic
control over a series of

331
00:13:35,870 --> 00:13:37,360
caches as well.

332
00:13:37,360 --> 00:13:39,920
So it's relatively simple.

333
00:13:39,920 --> 00:13:41,120
You say, I would like
to register for

334
00:13:41,120 --> 00:13:42,650
one of these things.

335
00:13:42,650 --> 00:13:44,040
And it gives you
a promise back.

336
00:13:44,040 --> 00:13:46,000
Yes, promises are coming
to the [? dome. ?]

337
00:13:46,000 --> 00:13:49,590
You can thank some
people later.

338
00:13:49,590 --> 00:13:53,000
And you can actually compose
stuff from third parties.

339
00:13:53,000 --> 00:13:57,740
You can pull in resources to use
with these cache objects.

340
00:13:57,740 --> 00:14:00,800
And then this addEventListener
for fetches actually gives you

341
00:14:00,800 --> 00:14:02,870
the ability to go and
construct-- you see that

342
00:14:02,870 --> 00:14:05,610
e.respondWith(new
SameOriginResponse there

343
00:14:05,610 --> 00:14:06,400
toward the bottom?

344
00:14:06,400 --> 00:14:09,620
That's actually creating
a response out of

345
00:14:09,620 --> 00:14:10,410
whole cloth, right?

346
00:14:10,410 --> 00:14:12,890
You're just programmatically
saying, this is the content

347
00:14:12,890 --> 00:14:14,960
that you should send back
to this document, right?

348
00:14:14,960 --> 00:14:16,000
That's the idea.

349
00:14:16,000 --> 00:14:17,310
You've never been able
to do this before,

350
00:14:17,310 --> 00:14:18,190
except on the server.

351
00:14:18,190 --> 00:14:19,460
What if we could do this
on the client?

352
00:14:19,460 --> 00:14:21,800
And why can't we, by the way?

353
00:14:21,800 --> 00:14:23,970
You can imagine another
couple of ideas.

354
00:14:23,970 --> 00:14:27,090
I would like to, when
I'm offline, serve

355
00:14:27,090 --> 00:14:29,010
some fall back, right?

356
00:14:29,010 --> 00:14:33,370
Or if I've got pictures of cats
and I would like them to

357
00:14:33,370 --> 00:14:36,880
be responsive cats, I would
like you to, through some

358
00:14:36,880 --> 00:14:40,360
magical API, figure out what
we've already stored about the

359
00:14:40,360 --> 00:14:43,620
client, what we know, the device
pixel width, the aspect

360
00:14:43,620 --> 00:14:45,690
ratio that we probably are
displaying at, the kinds of

361
00:14:45,690 --> 00:14:47,900
things that a document could
tell us while it's populating

362
00:14:47,900 --> 00:14:49,060
the Service Worker.

363
00:14:49,060 --> 00:14:52,080
And then have the Service
Worker respond with the

364
00:14:52,080 --> 00:14:54,250
correct one, as opposed to
trying to figure it all out

365
00:14:54,250 --> 00:14:56,590
preemptively up front
and make CSS do the

366
00:14:56,590 --> 00:14:57,915
heavy lifting for us.

367
00:14:57,915 --> 00:14:58,330
All right.

368
00:14:58,330 --> 00:14:59,330
I'm actually getting
to the end.

369
00:14:59,330 --> 00:15:05,170
So there are a bunch of big
implications for this design.

370
00:15:05,170 --> 00:15:08,950
What does it mean to have real
URLs in these applications,

371
00:15:08,950 --> 00:15:11,120
when we think of a shell
that boots up but

372
00:15:11,120 --> 00:15:12,670
then mediates content?

373
00:15:12,670 --> 00:15:13,530
What does the URL mean?

374
00:15:13,530 --> 00:15:17,080
It means something that's
interpreted by the shell.

375
00:15:17,080 --> 00:15:18,740
Can we build transparent
caching proxies?

376
00:15:18,740 --> 00:15:19,370
The answer is yes.

377
00:15:19,370 --> 00:15:20,660
It's the simplest thing
to possibly do.

378
00:15:20,660 --> 00:15:23,830
You actually just populate a new
thing in this cache object

379
00:15:23,830 --> 00:15:25,320
every time you get a request.

380
00:15:25,320 --> 00:15:27,520
And then suddenly, things
mostly work offline.

381
00:15:27,520 --> 00:15:28,040
Is that good?

382
00:15:28,040 --> 00:15:28,890
Is that bad?

383
00:15:28,890 --> 00:15:29,740
We're not sure yet.

384
00:15:29,740 --> 00:15:32,104
We don't know.

385
00:15:32,104 --> 00:15:35,460
And we don't really have good

386
00:15:35,460 --> 00:15:37,860
synchronization technology today.

387
00:15:37,860 --> 00:15:39,430
There's some work happening.

388
00:15:39,430 --> 00:15:40,870
I know the media guys are
spending a lot of time on

389
00:15:40,870 --> 00:15:42,620
operational transform.

390
00:15:42,620 --> 00:15:44,380
And the Ember guys are
looking at it.

391
00:15:44,380 --> 00:15:47,610
But synchronization technology
is not our lingua franca.

392
00:15:47,610 --> 00:15:49,350
This is not how we have
thought about

393
00:15:49,350 --> 00:15:50,950
building the web.

394
00:15:50,950 --> 00:15:52,360
And it's the sort of thing that
we're going to have to

395
00:15:52,360 --> 00:15:55,000
get good at, if we really bite
off this idea of building

396
00:15:55,000 --> 00:15:57,620
applications that are shells
that boot up to mediate

397
00:15:57,620 --> 00:16:01,430
content, and not simply
documents which happen to be

398
00:16:01,430 --> 00:16:05,410
fully formed things sprung
from the head of Zeus.

399
00:16:05,410 --> 00:16:07,620
So there's a bunch of
open questions.

400
00:16:07,620 --> 00:16:11,090
And I guess it's time for
us talk about it.

401
00:16:11,090 --> 00:16:12,170
JAKE ARCHIBALD: And Alex
is out of time.

402
00:16:12,170 --> 00:16:12,730
Thank you, very much.

403
00:16:12,730 --> 00:16:13,275
Good boy.

404
00:16:13,275 --> 00:16:14,160
[LAUGHTER]

405
00:16:14,160 --> 00:16:18,170
[APPLAUSE]

406
00:16:18,170 --> 00:16:20,070
JAKE ARCHIBALD: No, the
underground example

407
00:16:20,070 --> 00:16:20,990
is a very good one.

408
00:16:20,990 --> 00:16:23,570
When I was building lanyards,
the underground was the most

409
00:16:23,570 --> 00:16:26,350
convenient place to go and
test a real world offline

410
00:16:26,350 --> 00:16:29,280
situation, because turning some
things onto airplane mode

411
00:16:29,280 --> 00:16:30,620
is not quite sufficient.

412
00:16:30,620 --> 00:16:33,200
But I remember though, it was
with like five mobile phones.

413
00:16:33,200 --> 00:16:35,600
And one of the staff came up to
me and he just stood there

414
00:16:35,600 --> 00:16:36,320
staring at me.

415
00:16:36,320 --> 00:16:37,440
And I looked behind me.

416
00:16:37,440 --> 00:16:39,730
And I was standing in front of
a poster which essentially

417
00:16:39,730 --> 00:16:42,160
said, if you see someone with
more than one mobile phone,

418
00:16:42,160 --> 00:16:45,410
they're probably a terrorist and
you should deal with them.

419
00:16:45,410 --> 00:16:46,730
[LAUGHTER]

420
00:16:46,730 --> 00:16:48,410
JAKE ARCHIBALD: So first off,
before we go to the first

421
00:16:48,410 --> 00:16:51,210
question, did any of the
panelists have anything to say

422
00:16:51,210 --> 00:16:55,350
about what Alex was talking
about there in the intro?

423
00:16:55,350 --> 00:16:57,370
CALVIN SPEALMAN: I had just
one comment which is, I do

424
00:16:57,370 --> 00:17:01,010
wonder how many people working
on the Service Navigator

425
00:17:01,010 --> 00:17:01,810
Controller--

426
00:17:01,810 --> 00:17:03,400
whatever the eventual name is--
how many are the same

427
00:17:03,400 --> 00:17:06,730
people who built Google Gears,
which I think had almost

428
00:17:06,730 --> 00:17:10,290
exactly the same mechanism for
dealing with offline, just in

429
00:17:10,290 --> 00:17:11,890
sort of a proxy, into
the browser?

430
00:17:11,890 --> 00:17:13,180
Is there a connection there?

431
00:17:13,180 --> 00:17:14,640
ALEX RUSSELL: So it's
a good question.

432
00:17:14,640 --> 00:17:17,760
So Michael Nordman was
on the Gears team.

433
00:17:17,760 --> 00:17:19,470
And he's one of the people who's
helping us implement the

434
00:17:19,470 --> 00:17:21,550
Service Worker.

435
00:17:21,550 --> 00:17:24,500
We've tried at least
twice before--

436
00:17:24,500 --> 00:17:26,520
from the Chrome prospective,
before there was Chrome, it

437
00:17:26,520 --> 00:17:28,484
was Gears, and then inside
of Chrome with

438
00:17:28,484 --> 00:17:29,870
the application cache--

439
00:17:29,870 --> 00:17:32,430
to give you tools to make
things work offline.

440
00:17:32,430 --> 00:17:35,200
And we have failed
miserably twice.

441
00:17:35,200 --> 00:17:39,370
And Gears wasn't what
you thought it was.

442
00:17:39,370 --> 00:17:41,730
So if you go back and you pull
the documentation out of the

443
00:17:41,730 --> 00:17:43,860
internet archive, what
you'll find is that

444
00:17:43,860 --> 00:17:47,280
Gears has a thing called--

445
00:17:47,280 --> 00:17:47,950
oh, what was it?

446
00:17:47,950 --> 00:17:48,820
JAKE ARCHIBALD: Local
Server, isn't it?

447
00:17:48,820 --> 00:17:49,990
ALEX RUSSELL: Yeah,
Local Server.

448
00:17:49,990 --> 00:17:53,250
And the Local Server wasn't a
server that you could script.

449
00:17:53,250 --> 00:17:57,530
You couldn't ever give it a bit
of code and say, please go

450
00:17:57,530 --> 00:18:00,090
run this whenever I request
a resource.

451
00:18:00,090 --> 00:18:02,430
That never happened in Gears.

452
00:18:02,430 --> 00:18:05,510
You could give it a manifest, a
declarative format, which is

453
00:18:05,510 --> 00:18:08,410
exactly what we did in the
application cache too.

454
00:18:08,410 --> 00:18:13,070
And in both cases, they were,
I think, like Jake put it at

455
00:18:13,070 --> 00:18:18,050
Edge in London, like playing a
game where you can see the

456
00:18:18,050 --> 00:18:20,140
effects of what you're doing a
couple of turns later, but you

457
00:18:20,140 --> 00:18:23,040
can't actually control
any of it.

458
00:18:23,040 --> 00:18:25,440
And as a result, we don't have
a lot of data about what you

459
00:18:25,440 --> 00:18:26,120
actually need.

460
00:18:26,120 --> 00:18:28,050
We've never given you the
primitives that you need to go

461
00:18:28,050 --> 00:18:31,720
build the stuff you want and
evolve and iterate on that.

462
00:18:31,720 --> 00:18:35,530
And I think there just hasn't
been a lot of exploration,

463
00:18:35,530 --> 00:18:38,150
because it takes a
lot to get going.

464
00:18:38,150 --> 00:18:39,330
And there hasn't been
the ability to

465
00:18:39,330 --> 00:18:40,080
explore these patterns.

466
00:18:40,080 --> 00:18:41,820
JAKE ARCHIBALD: I think Gears
was essentially the precursor

467
00:18:41,820 --> 00:18:43,810
to Appcache, rather than
the precursor to this

468
00:18:43,810 --> 00:18:44,780
thing we have now.

469
00:18:44,780 --> 00:18:47,260
I think we should go to the
first question and, if I'm

470
00:18:47,260 --> 00:18:48,160
reading right, documents.

471
00:18:48,160 --> 00:18:50,560
It's from some chap called
Andrew Betts.

472
00:18:50,560 --> 00:18:51,320
Never heard of him.

473
00:18:51,320 --> 00:18:52,190
Where are you, Andrew?

474
00:18:52,190 --> 00:18:53,660
Can someone get Andrew
a microphone?

475
00:18:53,660 --> 00:18:54,670
There he is.

476
00:18:54,670 --> 00:18:56,020
[INAUDIBLE]

477
00:18:56,020 --> 00:18:56,580
ANDREW BETTS: OK.

478
00:18:56,580 --> 00:18:59,150
Currently offline data may be
evicted at any time by the

479
00:18:59,150 --> 00:19:00,660
user agent.

480
00:19:00,660 --> 00:19:03,140
Can we have storage persistence
guarantees, or at

481
00:19:03,140 --> 00:19:05,280
least provide hints to the
user agent to tell it to

482
00:19:05,280 --> 00:19:08,200
prioritize AppLogic
over content data?

483
00:19:08,200 --> 00:19:08,335
JAKE ARCHIBALD: Yes.

484
00:19:08,335 --> 00:19:10,180
This is a very interesting
question, because the whole

485
00:19:10,180 --> 00:19:12,660
thing about using
it in airports.

486
00:19:12,660 --> 00:19:15,980
If we make a guarantee that yes,
as a user, your data of

487
00:19:15,980 --> 00:19:18,680
when your flight is going to
be will be available to you

488
00:19:18,680 --> 00:19:20,665
offline, the spec does
not currently let

489
00:19:20,665 --> 00:19:21,570
us make that guarantee.

490
00:19:21,570 --> 00:19:23,980
It can chuck all of the data
under a bus whenever

491
00:19:23,980 --> 00:19:26,120
it feels like it.

492
00:19:26,120 --> 00:19:27,190
CRAIG CAVALIER: This
is really important

493
00:19:27,190 --> 00:19:30,050
for us, as a business.

494
00:19:30,050 --> 00:19:32,720
To give a bit of background, I
work with field engineers.

495
00:19:32,720 --> 00:19:34,510
And they work on
oil refineries.

496
00:19:34,510 --> 00:19:36,170
And they write up their
invoices and

497
00:19:36,170 --> 00:19:37,270
their equipment tracking.

498
00:19:37,270 --> 00:19:40,100
We can't have their data just
disappearing on them as

499
00:19:40,100 --> 00:19:41,510
they're writing up these
new invoices.

500
00:19:41,510 --> 00:19:43,090
We don't want to
lose that data.

501
00:19:43,090 --> 00:19:45,220
So that's a really important
problem for us

502
00:19:45,220 --> 00:19:46,410
that we need to solve.

503
00:19:46,410 --> 00:19:47,710
JAKE ARCHIBALD: Is this a
problem that you actually

504
00:19:47,710 --> 00:19:49,720
encountered in the "FT"?

505
00:19:49,720 --> 00:19:52,300
Or is this a problem you
encountered, data

506
00:19:52,300 --> 00:19:53,250
disappearing like that?

507
00:19:53,250 --> 00:19:54,880
Or is it just a theoretical
problem?

508
00:19:54,880 --> 00:19:56,670
CRAIG CAVALIER: It's a
theoretical problem, at this

509
00:19:56,670 --> 00:19:57,320
point for us.

510
00:19:57,320 --> 00:19:59,780
MATT ANDREWS: We have real
experience in this,

511
00:19:59,780 --> 00:20:01,140
particularly--

512
00:20:01,140 --> 00:20:01,790
I can't say this on record?

513
00:20:01,790 --> 00:20:03,200
Ah, dammit.

514
00:20:03,200 --> 00:20:07,490
iOS 5, we suspect strongly that,
occasionally, it wiped

515
00:20:07,490 --> 00:20:09,580
our apps in certain
situations.

516
00:20:09,580 --> 00:20:10,910
But not sure.

517
00:20:10,910 --> 00:20:12,350
Can't prove it.

518
00:20:12,350 --> 00:20:14,172
But we have strong suspicions.

519
00:20:14,172 --> 00:20:15,900
[LAUGHTER]

520
00:20:15,900 --> 00:20:18,070
CALVIN SPEALMAN: I'd like to
add that, I think, the most

521
00:20:18,070 --> 00:20:21,050
important aspect of this is how
the user understands where

522
00:20:21,050 --> 00:20:23,450
the data is and when the
browser may evict it.

523
00:20:23,450 --> 00:20:26,190
We can't tell the browser that
they can ever evict something.

524
00:20:26,190 --> 00:20:27,760
Only users should be
able to say that.

525
00:20:27,760 --> 00:20:30,960
We have ways of installing an
app in an implicit way that

526
00:20:30,960 --> 00:20:33,250
the user is invisible to.

527
00:20:33,250 --> 00:20:35,300
And the data should
be tied to that.

528
00:20:35,300 --> 00:20:38,170
So the user might say, this is
an app I want to keep around.

529
00:20:38,170 --> 00:20:40,440
And therefore, they're opting-in
to keep that data.

530
00:20:40,440 --> 00:20:42,620
And then it would be
safe to not evict.

531
00:20:42,620 --> 00:20:44,740
So I think the bigger problem
here is not so much the APIs

532
00:20:44,740 --> 00:20:48,140
we have, but the way
that the browser

533
00:20:48,140 --> 00:20:49,920
presents that to the user.

534
00:20:49,920 --> 00:20:53,880
JAKE ARCHIBALD: So to say that
the user has to be responsible

535
00:20:53,880 --> 00:20:56,250
for the removing of data, they
have to be responsible for the

536
00:20:56,250 --> 00:20:58,160
adding of the data as well.

537
00:20:58,160 --> 00:20:58,420
CALVIN SPEALMAN: Yeah.

538
00:20:58,420 --> 00:21:01,260
And if the user hasn't said,
I want this app to stay

539
00:21:01,260 --> 00:21:03,660
available and its data to
stay available, then

540
00:21:03,660 --> 00:21:04,250
it's safe to evict.

541
00:21:04,250 --> 00:21:06,400
And so they need to
opt-in to this.

542
00:21:06,400 --> 00:21:07,486
JAKE ARCHIBALD: So, Alex?

543
00:21:07,486 --> 00:21:10,710
I'm looking at the wrong
one when I say that.

544
00:21:10,710 --> 00:21:12,280
ANNE VAN KESTEREN: So we've
been looking into this for

545
00:21:12,280 --> 00:21:14,810
Firefox OS as well, because the
problem comes up there as

546
00:21:14,810 --> 00:21:17,850
well for apps.

547
00:21:17,850 --> 00:21:22,420
And it's really hard, because
once you get to persistence it

548
00:21:22,420 --> 00:21:24,600
mostly becomes a UX problem.

549
00:21:24,600 --> 00:21:26,640
So we have this sort of concept
of you have temporary

550
00:21:26,640 --> 00:21:28,710
storage which we just
grant to everyone.

551
00:21:28,710 --> 00:21:31,700
We'll just grant you a slice
and you can use it.

552
00:21:31,700 --> 00:21:33,830
And the other concept would
be persistent storage.

553
00:21:33,830 --> 00:21:36,160
But that is much harder, because
the user sort of has

554
00:21:36,160 --> 00:21:37,150
to be aware of it.

555
00:21:37,150 --> 00:21:39,810
But then most users are not
really aware of storage and

556
00:21:39,810 --> 00:21:42,235
how that is allocated through
apps and how that works across

557
00:21:42,235 --> 00:21:43,710
their device.

558
00:21:43,710 --> 00:21:44,150
JAKE ARCHIBALD: It's not
a problem on the

559
00:21:44,150 --> 00:21:44,720
phone though, right?

560
00:21:44,720 --> 00:21:47,190
Because if my phone tells me I'm
low on space, I can go to

561
00:21:47,190 --> 00:21:50,020
the apps menu and it says, oh,
this game you don't care about

562
00:21:50,020 --> 00:21:51,470
is using 200 megabytes.

563
00:21:51,470 --> 00:21:53,700
And this thing you really care
about is using less than that.

564
00:21:53,700 --> 00:21:55,210
So I can throw one of
them out the window.

565
00:21:55,210 --> 00:21:55,550
ANNE VAN KESTEREN: Right.

566
00:21:55,550 --> 00:21:55,810
Yeah.

567
00:21:55,810 --> 00:21:58,950
So I think we have to evolve
it into that direction.

568
00:21:58,950 --> 00:22:00,500
Yeah.

569
00:22:00,500 --> 00:22:05,470
But the thing is do you ask
the user right up front?

570
00:22:05,470 --> 00:22:07,060
And which apps do
you grant space?

571
00:22:07,060 --> 00:22:12,020
Or do all apps have to ask for
persistent storage or not?

572
00:22:12,020 --> 00:22:18,190
Whenever you hit the UX side of
things with standards, it

573
00:22:18,190 --> 00:22:21,600
becomes a lot harder
to get things done.

574
00:22:21,600 --> 00:22:23,510
JAKE ARCHIBALD: Is there an API
or a standard that this

575
00:22:23,510 --> 00:22:24,610
kind of work fits in?

576
00:22:24,610 --> 00:22:26,020
Is it the Quota API?

577
00:22:26,020 --> 00:22:27,630
Is that the plan?

578
00:22:27,630 --> 00:22:27,800
ALEX RUSSELL: Yeah.

579
00:22:27,800 --> 00:22:28,550
So there is a Quota API.

580
00:22:28,550 --> 00:22:31,560
And it does have this idea
of persistent storage and

581
00:22:31,560 --> 00:22:33,150
ephemeral storage.

582
00:22:33,150 --> 00:22:35,430
And right now, persistent
storage is only available in

583
00:22:35,430 --> 00:22:39,720
Chrome for certain file
system calls.

584
00:22:39,720 --> 00:22:42,700
You can't, in a granular way,
opt some bit of your cookies

585
00:22:42,700 --> 00:22:48,960
and your local storage and your
IndexedDB into persistent

586
00:22:48,960 --> 00:22:50,220
storage and then say,
this other stuff I

587
00:22:50,220 --> 00:22:51,150
don't really need.

588
00:22:51,150 --> 00:22:54,050
And there's no clear way, in
the UX, to communicate to

589
00:22:54,050 --> 00:22:55,440
users about what
they're doing.

590
00:22:55,440 --> 00:22:58,240
It feels to me, like Anne was
saying, there's a very clear

591
00:22:58,240 --> 00:23:01,930
missing moment of intent where
you give users the power to

592
00:23:01,930 --> 00:23:03,300
say no, I really want
to keep this thing.

593
00:23:03,300 --> 00:23:04,890
I like this a lot.

594
00:23:04,890 --> 00:23:06,250
I would like to get back
to this easily.

595
00:23:06,250 --> 00:23:09,400
I would like to bless it with
the ability to keep all of its

596
00:23:09,400 --> 00:23:10,340
data around.

597
00:23:10,340 --> 00:23:12,220
And we don't have
that moment yet.

598
00:23:12,220 --> 00:23:15,570
We are missing what is,
effectively, a very small

599
00:23:15,570 --> 00:23:18,270
manifest and then some
UI to let users say,

600
00:23:18,270 --> 00:23:18,900
yeah, I like this.

601
00:23:18,900 --> 00:23:19,570
I want to keep this.

602
00:23:19,570 --> 00:23:21,940
And once users have said they
like it, I don't see why we

603
00:23:21,940 --> 00:23:23,710
should ever be second
guessing them.

604
00:23:23,710 --> 00:23:26,840
I mean, I trust myself to be
mediating the content of my

605
00:23:26,840 --> 00:23:28,900
phone in a lot of
cases, right?

606
00:23:28,900 --> 00:23:30,850
And in many cases that means
throwing out an application.

607
00:23:30,850 --> 00:23:32,380
And I like doing that--

608
00:23:32,380 --> 00:23:34,490
not like getting so annoyed
by an application that I

609
00:23:34,490 --> 00:23:35,400
uninstall it.

610
00:23:35,400 --> 00:23:38,400
But I like the ability to do
that and reason about that at

611
00:23:38,400 --> 00:23:39,500
that level.

612
00:23:39,500 --> 00:23:42,900
MATT ANDREWS: Don't we sort of
have this already with web

613
00:23:42,900 --> 00:23:46,330
apps on iOS, where you add the
web app to your home screen?

614
00:23:46,330 --> 00:23:49,590
So that's kind of similar to
saying, I want to keep this

615
00:23:49,590 --> 00:23:50,510
app around.

616
00:23:50,510 --> 00:23:55,320
I know Firefox, as well, I
think, it asks you, when you

617
00:23:55,320 --> 00:23:57,640
load the web page in Appcache,
whether you want it to stay

618
00:23:57,640 --> 00:23:58,730
around offline.

619
00:23:58,730 --> 00:24:00,210
And you can say no, and
the website will

620
00:24:00,210 --> 00:24:01,560
continue being a website.

621
00:24:01,560 --> 00:24:02,660
Isn't that equivalent?

622
00:24:02,660 --> 00:24:02,950
ALEX RUSSELL: Yeah.

623
00:24:02,950 --> 00:24:04,370
I think that's a great point.

624
00:24:04,370 --> 00:24:07,370
And I think that's kind of the
direction that we all need to

625
00:24:07,370 --> 00:24:08,760
figure out a way to get to.

626
00:24:08,760 --> 00:24:10,810
And someone asked about
the Quota API.

627
00:24:10,810 --> 00:24:13,320
The Quota API is probably
something that we definitely

628
00:24:13,320 --> 00:24:15,730
need to integrate into the
Service Worker design.

629
00:24:15,730 --> 00:24:19,140
We've talked to the folks who
are in charge of the Quota API

630
00:24:19,140 --> 00:24:20,620
about this.

631
00:24:20,620 --> 00:24:23,060
Because it should also be the
case that, when applications

632
00:24:23,060 --> 00:24:25,470
get under pressure, you should
be able to give an application

633
00:24:25,470 --> 00:24:27,510
the ability to say, hey,
I'm about to ask you

634
00:24:27,510 --> 00:24:29,060
for this much storage.

635
00:24:29,060 --> 00:24:31,420
You need to figure out where
it's going to come from.

636
00:24:31,420 --> 00:24:34,270
And if you don't do that, maybe
we evict you entirely.

637
00:24:34,270 --> 00:24:38,110
But one of the nice bits about
the Service Worker design

638
00:24:38,110 --> 00:24:40,030
versus the HTTP cache
today is that it's

639
00:24:40,030 --> 00:24:42,000
not HTTP cache, right?

640
00:24:42,000 --> 00:24:44,580
Once resources are there, unless
you pull them out,

641
00:24:44,580 --> 00:24:47,050
they're there for the lifetime
of the thing.

642
00:24:47,050 --> 00:24:48,520
It'll get evicted as a bundle.

643
00:24:48,520 --> 00:24:52,490
But it's up to you, as an
application, to make smart

644
00:24:52,490 --> 00:24:55,250
decisions about what
you prioritize.

645
00:24:55,250 --> 00:24:55,740
ANNE VAN KESTEREN: Yeah.

646
00:24:55,740 --> 00:24:56,980
And it's a little bit harder.

647
00:24:56,980 --> 00:24:59,370
Like you can put it on the home
screen, but it doesn't

648
00:24:59,370 --> 00:25:02,660
mean how much storage were
you granted then.

649
00:25:02,660 --> 00:25:04,900
Like it might need 2 gigabytes,
it might need 4, it

650
00:25:04,900 --> 00:25:07,560
might need most of
your hard drive.

651
00:25:07,560 --> 00:25:09,060
And is the user comfortable
with that?

652
00:25:09,060 --> 00:25:10,455
Does the user even know
what that means?

653
00:25:10,455 --> 00:25:14,860

654
00:25:14,860 --> 00:25:16,080
MATT ANDREWS: One of the other
problems we had when we were

655
00:25:16,080 --> 00:25:19,890
developing the HTML app for "The
Economist" was, in IE10,

656
00:25:19,890 --> 00:25:22,590
you can actually configure
exactly how much space you can

657
00:25:22,590 --> 00:25:23,760
give to your web apps.

658
00:25:23,760 --> 00:25:24,730
You can make that
one megabyte.

659
00:25:24,730 --> 00:25:28,130
So for us, that's far,
far not enough.

660
00:25:28,130 --> 00:25:30,817
So we have to detect how
much space we have.

661
00:25:30,817 --> 00:25:34,470
So I think too much control
can also be a bad

662
00:25:34,470 --> 00:25:36,240
thing, quite limiting.

663
00:25:36,240 --> 00:25:39,260
JAKE ARCHIBALD: So if you did
this installable app thing, is

664
00:25:39,260 --> 00:25:42,360
that going to replace the number
of toolbars we get for

665
00:25:42,360 --> 00:25:43,100
each permission?

666
00:25:43,100 --> 00:25:44,590
What's that going to
replace it with?

667
00:25:44,590 --> 00:25:47,030
Are we going to get this
Android solution where,

668
00:25:47,030 --> 00:25:49,060
upfront, you get the list of
permissions, and you just

669
00:25:49,060 --> 00:25:50,390
ignore it and click next?

670
00:25:50,390 --> 00:25:52,613
Is that the kind of model that
we see working on the web?

671
00:25:52,613 --> 00:25:53,440
[LAUGHTER]

672
00:25:53,440 --> 00:25:55,990
ALEX RUSSELL: If I had my
druthers, it would be a system

673
00:25:55,990 --> 00:26:01,040
where the user can always
say no, right?

674
00:26:01,040 --> 00:26:04,210
And to the extent that they've
said yes, they've said yes.

675
00:26:04,210 --> 00:26:05,550
But they can change
their mind later.

676
00:26:05,550 --> 00:26:08,830
So the Android model of a bundle
of permissions which

677
00:26:08,830 --> 00:26:12,540
can't be split apart from each
other implies APIs that aren't

678
00:26:12,540 --> 00:26:13,390
allowed to fail, right?

679
00:26:13,390 --> 00:26:16,310
There's only a return true.

680
00:26:16,310 --> 00:26:18,290
There's never some sort
of a failure case.

681
00:26:18,290 --> 00:26:22,560
And I think the web has gotten
a long way on the basis of

682
00:26:22,560 --> 00:26:23,860
APIs that can fail.

683
00:26:23,860 --> 00:26:26,340
Like that's how we adapt,
is the ability for the

684
00:26:26,340 --> 00:26:30,380
environment to just not be
there, or for feature

685
00:26:30,380 --> 00:26:33,610
detection to help us understand
and live within the

686
00:26:33,610 --> 00:26:36,050
contours of whatever
the runtime is.

687
00:26:36,050 --> 00:26:37,560
JAKE ARCHIBALD: So I think it's
about time we moved on to

688
00:26:37,560 --> 00:26:38,350
the next question.

689
00:26:38,350 --> 00:26:39,970
And this one's from
Natasha Rooney.

690
00:26:39,970 --> 00:26:41,790
So if we can get Natasha
a microphone?

691
00:26:41,790 --> 00:26:45,890

692
00:26:45,890 --> 00:26:46,200
NATASHA ROONEY: Hi.

693
00:26:46,200 --> 00:26:47,710
Thank you, very much.

694
00:26:47,710 --> 00:26:50,790
So should network information
APIs be extended to include

695
00:26:50,790 --> 00:26:53,700
triggers for a user having less
than optimal connection

696
00:26:53,700 --> 00:26:57,200
speeds and not just offline
or online triggers?

697
00:26:57,200 --> 00:27:00,460
Could this help developer's
courage for content caching?

698
00:27:00,460 --> 00:27:03,150
JAKE ARCHIBALD: So this is a
question that came up at the

699
00:27:03,150 --> 00:27:04,770
last Edge Conf.

700
00:27:04,770 --> 00:27:06,930
And this was voted up quite
high in the moderator.

701
00:27:06,930 --> 00:27:09,280
But I also had some people
coming up to me and saying,

702
00:27:09,280 --> 00:27:12,380
this just really went on too
long and was really boring at

703
00:27:12,380 --> 00:27:14,320
the last Edge Conf, this kind
of debate, whether we should

704
00:27:14,320 --> 00:27:16,890
be offering developer
information about the

705
00:27:16,890 --> 00:27:17,600
connection speed.

706
00:27:17,600 --> 00:27:20,250
So as a compromise, I'd like
each of the panelists to

707
00:27:20,250 --> 00:27:22,180
answer the question, making
only a sound.

708
00:27:22,180 --> 00:27:24,585
[LAUGHTER]

709
00:27:24,585 --> 00:27:28,490
JAKE ARCHIBALD: So in a sound,
should the developer be given

710
00:27:28,490 --> 00:27:31,450
details on the current
connection speed?

711
00:27:31,450 --> 00:27:33,440
ALEX RUSSELL: Neh.

712
00:27:33,440 --> 00:27:34,220
CRAIG CAVALIER: It doesn't
bother me.

713
00:27:34,220 --> 00:27:35,930
JAKE ARCHIBALD: That's
not a sound.

714
00:27:35,930 --> 00:27:37,612
You can leave now.

715
00:27:37,612 --> 00:27:38,650
MATT ANDREWS: [INAUDIBLE].

716
00:27:38,650 --> 00:27:39,875
JAKE ARCHIBALD: That's
not a sound.

717
00:27:39,875 --> 00:27:41,180
CALVIN SPEALMAN: Eh?

718
00:27:41,180 --> 00:27:42,170
ANNE VAN KESTEREN: Eh.

719
00:27:42,170 --> 00:27:42,660
JAKE ARCHIBALD: OK.

720
00:27:42,660 --> 00:27:45,990
That's a good percentage of
the panelists kind of, eh.

721
00:27:45,990 --> 00:27:48,540
But we should have a serious
discussion about the-- we've

722
00:27:48,540 --> 00:27:51,900
got these online, offline
event triggers.

723
00:27:51,900 --> 00:27:54,180
And so how should we be
using them to make

724
00:27:54,180 --> 00:27:55,080
something work offline?

725
00:27:55,080 --> 00:27:58,030
Should we build, assuming the
network is there, and then

726
00:27:58,030 --> 00:27:59,560
fall back using this method?

727
00:27:59,560 --> 00:28:01,695
Or should we build, assume
offline is there?

728
00:28:01,695 --> 00:28:06,080
And you had an example, Alex,
with using offline detection.

729
00:28:06,080 --> 00:28:08,690
ALEX RUSSELL: The online
thing is a lie.

730
00:28:08,690 --> 00:28:10,540
I think that's really what
it boils down to.

731
00:28:10,540 --> 00:28:12,080
It's a dirty, nasty,
terrible lie.

732
00:28:12,080 --> 00:28:15,030
And the only thing that you'll
ever be able to do that's

733
00:28:15,030 --> 00:28:17,620
meaningful is to ping
your service, right?

734
00:28:17,620 --> 00:28:19,700
You'll be able to send a request
out to your service.

735
00:28:19,700 --> 00:28:21,930
And if you get a response back
under deadline-- like let's

736
00:28:21,930 --> 00:28:23,040
say you've got a performance
guarantee

737
00:28:23,040 --> 00:28:23,660
that you need to meet.

738
00:28:23,660 --> 00:28:24,940
And you get a response
back under

739
00:28:24,940 --> 00:28:26,980
deadline from your service.

740
00:28:26,980 --> 00:28:27,580
Great.

741
00:28:27,580 --> 00:28:28,630
So it's over HTTPS.

742
00:28:28,630 --> 00:28:29,790
It's from your service.

743
00:28:29,790 --> 00:28:30,930
Things look legit.

744
00:28:30,930 --> 00:28:32,540
Any other case is failure.

745
00:28:32,540 --> 00:28:38,150
But it's just a giant panoply
of potential failure cases

746
00:28:38,150 --> 00:28:42,250
that would all be online under
some strict definition of I

747
00:28:42,250 --> 00:28:44,200
connected to the radio, and
I got a TCP [? socket ?]

748
00:28:44,200 --> 00:28:45,396
warmed up.

749
00:28:45,396 --> 00:28:47,230
ANNE VAN KESTEREN: Craig,
Calvin, did you use the

750
00:28:47,230 --> 00:28:49,120
.online in anything
you're doing?

751
00:28:49,120 --> 00:28:50,740
Or did you want that
kind of extra

752
00:28:50,740 --> 00:28:52,900
detection around the network?

753
00:28:52,900 --> 00:28:55,980
CRAIG CAVALIER: We've made use
of the online and offline.

754
00:28:55,980 --> 00:28:58,720
We don't have so many
requirements for the gray area

755
00:28:58,720 --> 00:29:02,980
of not having a decent
amount of connection.

756
00:29:02,980 --> 00:29:06,490
So for us, we tell the user
whether they can sync or not,

757
00:29:06,490 --> 00:29:08,510
based on whether they have
this online or offline.

758
00:29:08,510 --> 00:29:11,810
But as he said, in a lot
of cases, online

759
00:29:11,810 --> 00:29:12,940
is a bit of a lie.

760
00:29:12,940 --> 00:29:16,120
But for our users, when they
have a connection, they have a

761
00:29:16,120 --> 00:29:16,550
connection.

762
00:29:16,550 --> 00:29:19,470
And it's often that they've
come back off of a rig and

763
00:29:19,470 --> 00:29:21,390
they're at a hotel and
they're making use of

764
00:29:21,390 --> 00:29:22,110
the connection there.

765
00:29:22,110 --> 00:29:27,890
So for us, just having the
yes and no is enough.

766
00:29:27,890 --> 00:29:29,420
JAKE ARCHIBALD: I think we'll
take a question from the

767
00:29:29,420 --> 00:29:31,892
audience from [? Shavasse? ?]

768
00:29:31,892 --> 00:29:33,820
ANNE VAN KESTEREN: Just to add,
I think it will also get

769
00:29:33,820 --> 00:29:37,650
easier, once browser's and
OSes get more capable at

770
00:29:37,650 --> 00:29:39,580
detecting captive portals.

771
00:29:39,580 --> 00:29:42,300
And I know, like Mozilla, we're
going to add this to

772
00:29:42,300 --> 00:29:46,030
Firefox, in case the OS falls
through and figuring out if

773
00:29:46,030 --> 00:29:47,950
you're in a captive portal.

774
00:29:47,950 --> 00:29:50,840
And then tell the web pages
they're offline and not give

775
00:29:50,840 --> 00:29:53,310
them a false impression
and stuff.

776
00:29:53,310 --> 00:29:53,720
[? SHAVASSE: ?]

777
00:29:53,720 --> 00:29:55,910
When caching AppLogic rather
than content, is there a way

778
00:29:55,910 --> 00:29:59,246
to cache free JITed code, A, so
that you don't need a JIT

779
00:29:59,246 --> 00:30:02,010
for faster startup, and B, as
JITers gets more intelligent,

780
00:30:02,010 --> 00:30:05,070
so that you can reuse what the
JITer learned about how your

781
00:30:05,070 --> 00:30:08,290
app behaved for the last five
hours of usage, both for

782
00:30:08,290 --> 00:30:12,890
offline and for online scenarios
as a faster startup.

783
00:30:12,890 --> 00:30:13,740
JAKE ARCHIBALD: Does anyone
want to take that?

784
00:30:13,740 --> 00:30:15,110
CALVIN SPEALMAN: No.

785
00:30:15,110 --> 00:30:18,980
That actually was an issue that
came up, I know, in the

786
00:30:18,980 --> 00:30:20,540
assembly dot js project.

787
00:30:20,540 --> 00:30:23,530
There is a very bad problem
there with the time it takes

788
00:30:23,530 --> 00:30:28,130
to compile especially
large demos even.

789
00:30:28,130 --> 00:30:31,065
The actual function, parsing,
compiling is all synchronous

790
00:30:31,065 --> 00:30:31,830
in blocking.

791
00:30:31,830 --> 00:30:33,710
So that's the issue that came
up there, not necessarily

792
00:30:33,710 --> 00:30:36,280
being offline or reused, but
just the time it takes and

793
00:30:36,280 --> 00:30:36,970
could it be asynchronous.

794
00:30:36,970 --> 00:30:41,260
And so I know from that that,
right now, the only thing is

795
00:30:41,260 --> 00:30:43,220
parsing it from the
raw JavaScript and

796
00:30:43,220 --> 00:30:44,190
compiling it at the time.

797
00:30:44,190 --> 00:30:47,800
It would be, I think, a really
important thing to look into,

798
00:30:47,800 --> 00:30:50,390
if they're going to look into
asynchronous API, to also have

799
00:30:50,390 --> 00:30:51,735
a way to then reuse
that result.

800
00:30:51,735 --> 00:30:54,250
JAKE ARCHIBALD: So back onto
the kind of network state

801
00:30:54,250 --> 00:30:57,400
stuff, if I'm asking the
browser, am I online?

802
00:30:57,400 --> 00:30:59,600
It's going to say, yes.

803
00:30:59,600 --> 00:31:02,110
And what we're going to end up
with is it could just have one

804
00:31:02,110 --> 00:31:05,380
bar or a kind of intermittent
bar of data, which eventually

805
00:31:05,380 --> 00:31:07,190
is just going to take five
minutes to try getting

806
00:31:07,190 --> 00:31:09,970
something from the network
and then ultimately fail.

807
00:31:09,970 --> 00:31:16,040
Anne, is that something that
is solvable as a problem?

808
00:31:16,040 --> 00:31:17,630
ANNE VAN KESTEREN: That might be
harder, the case where the

809
00:31:17,630 --> 00:31:19,460
captive portal gives
you a timeout.

810
00:31:19,460 --> 00:31:22,850
But you would have to do
periodic checks or

811
00:31:22,850 --> 00:31:23,480
something like that.

812
00:31:23,480 --> 00:31:25,000
Yeah.

813
00:31:25,000 --> 00:31:29,380
I think it might be there
forever, until captive portals

814
00:31:29,380 --> 00:31:31,570
actually start returning
different status codes.

815
00:31:31,570 --> 00:31:34,920
Like there is some kind of RFC
that makes captive portals

816
00:31:34,920 --> 00:31:39,480
actually part of the network
stack, instead of just a hack.

817
00:31:39,480 --> 00:31:41,820
You would still have some logic
in your application that

818
00:31:41,820 --> 00:31:43,400
detects it as well.

819
00:31:43,400 --> 00:31:43,490
Yeah.

820
00:31:43,490 --> 00:31:46,060
It's hard to get away from,
given the legacy.

821
00:31:46,060 --> 00:31:48,200
MATT ANDREWS: I think a more
analog kind of quality of

822
00:31:48,200 --> 00:31:50,890
connection over the past
X period of time

823
00:31:50,890 --> 00:31:51,570
will be more useful.

824
00:31:51,570 --> 00:31:53,790
But really, I think, most of
the time, as long as you're

825
00:31:53,790 --> 00:31:56,470
implementing error callbacks,
you can always try and fail

826
00:31:56,470 --> 00:32:00,340
gracefully or offer something to
a user first and then fall

827
00:32:00,340 --> 00:32:01,020
back to something else.

828
00:32:01,020 --> 00:32:03,770
I think that's a much
better pattern.

829
00:32:03,770 --> 00:32:04,580
JAKE ARCHIBALD: I think
we've got a follow-up

830
00:32:04,580 --> 00:32:05,844
question from Natasha.

831
00:32:05,844 --> 00:32:09,000

832
00:32:09,000 --> 00:32:09,330
NATASHA ROONEY: Yeah.

833
00:32:09,330 --> 00:32:09,640
Sorry.

834
00:32:09,640 --> 00:32:09,910
Ooh.

835
00:32:09,910 --> 00:32:10,320
Gosh.

836
00:32:10,320 --> 00:32:14,060
So just to give a proper use
case from the reason why I

837
00:32:14,060 --> 00:32:16,960
asked a particular question
which might be able to help,

838
00:32:16,960 --> 00:32:19,830
[INAUDIBLE] subscription models
is probably the best

839
00:32:19,830 --> 00:32:22,820
one to go on, which I know is
important for any publications

840
00:32:22,820 --> 00:32:26,110
like "FT" and other
such newspapers.

841
00:32:26,110 --> 00:32:28,520
What if a user who was on a
subscription method and that

842
00:32:28,520 --> 00:32:29,900
meant that they kept out--

843
00:32:29,900 --> 00:32:31,880
say they read 10 articles.

844
00:32:31,880 --> 00:32:33,530
They read that on the tube--

845
00:32:33,530 --> 00:32:34,920
which I'm also a tube user--

846
00:32:34,920 --> 00:32:37,010
so they will read that
on the tube.

847
00:32:37,010 --> 00:32:38,020
They consume that.

848
00:32:38,020 --> 00:32:39,720
And then they violate
their subscription.

849
00:32:39,720 --> 00:32:41,000
They've gone over, right?

850
00:32:41,000 --> 00:32:42,960
So they shouldn't be able
to read any more.

851
00:32:42,960 --> 00:32:46,000
So some trigger has to happen
at some point for it to go

852
00:32:46,000 --> 00:32:48,000
back to the server to
say this user has

853
00:32:48,000 --> 00:32:49,130
gone over their limit.

854
00:32:49,130 --> 00:32:50,600
Don't give them any more.

855
00:32:50,600 --> 00:32:53,680
So my real idea is trying to
understand how that can

856
00:32:53,680 --> 00:32:55,430
happen, because that
has massive

857
00:32:55,430 --> 00:32:57,010
implications for some markets.

858
00:32:57,010 --> 00:32:59,200
Like I'm talking videos, as
well as publications.

859
00:32:59,200 --> 00:33:00,910
JAKE ARCHIBALD: So this is
offering the user a different

860
00:33:00,910 --> 00:33:03,160
experience, if they are on
some kind of metered

861
00:33:03,160 --> 00:33:05,760
connection where it's going to
disappear after a certain

862
00:33:05,760 --> 00:33:09,690
points, or potentially bring
a financial situation.

863
00:33:09,690 --> 00:33:15,260
Does the phone even know if the
user is in that situation?

864
00:33:15,260 --> 00:33:17,360
CRAIG CAVALIER: A lot of times
I've found that it's not

865
00:33:17,360 --> 00:33:20,490
necessarily the technology that
has to care about that.

866
00:33:20,490 --> 00:33:22,760
There's usually a business
process around this.

867
00:33:22,760 --> 00:33:26,800
So for instance, if you're in a
banking system, you're going

868
00:33:26,800 --> 00:33:29,460
to a cash point and you
withdraw some cash.

869
00:33:29,460 --> 00:33:32,820
If your spouse has gone to
another cash point and

870
00:33:32,820 --> 00:33:35,890
withdrawn that amount as well
and that would take you over

871
00:33:35,890 --> 00:33:37,790
your overdraft, they've
got this concept of

872
00:33:37,790 --> 00:33:38,830
overdraft in banking.

873
00:33:38,830 --> 00:33:42,270
So they've got a set way
of handling that.

874
00:33:42,270 --> 00:33:44,930
And usually in these business
scenarios, there are business

875
00:33:44,930 --> 00:33:46,830
processes for handling
those cases.

876
00:33:46,830 --> 00:33:50,030
So for instance, in the case of
your videos, I've watched a

877
00:33:50,030 --> 00:33:51,430
couple of videos offline.

878
00:33:51,430 --> 00:33:53,720
Someone else has used
my account to

879
00:33:53,720 --> 00:33:55,510
watch a few more offline.

880
00:33:55,510 --> 00:33:58,140
Then there must be some kind of
consolidation, some kind of

881
00:33:58,140 --> 00:34:01,330
process to pick up those pieces
and then trace that

882
00:34:01,330 --> 00:34:02,950
back to the billing.

883
00:34:02,950 --> 00:34:04,840
JAKE ARCHIBALD: Are we
collectively happy with a

884
00:34:04,840 --> 00:34:09,030
mobile site or app sending
us into our overdraft?

885
00:34:09,030 --> 00:34:10,820
ANNE VAN KESTEREN: I think we're
collectively unhappy

886
00:34:10,820 --> 00:34:14,130
about that even being
a possibility.

887
00:34:14,130 --> 00:34:18,560
Like the whole bandwidth cap
thing is like bullshit and

888
00:34:18,560 --> 00:34:21,280
should be gone at some point.

889
00:34:21,280 --> 00:34:22,500
JAKE ARCHIBALD: Well, I've been
in situations where my

890
00:34:22,500 --> 00:34:24,719
phone knows that I'm roaming.

891
00:34:24,719 --> 00:34:28,040
But I've actually managed to get
a deal with the provider

892
00:34:28,040 --> 00:34:31,080
where I essentially have the
same quality and amount of

893
00:34:31,080 --> 00:34:32,429
data that I have at home.

894
00:34:32,429 --> 00:34:34,949
I guess if an app at this point
was to serve me lower

895
00:34:34,949 --> 00:34:37,170
quality content, I'd be a
bit annoyed about that.

896
00:34:37,170 --> 00:34:39,780
I'm being treated as a second
class citizen when I'm not in

897
00:34:39,780 --> 00:34:40,780
that situation.

898
00:34:40,780 --> 00:34:45,949
So I mean, is this going to be
a site per site option to say

899
00:34:45,949 --> 00:34:47,500
can you be easy on the data?

900
00:34:47,500 --> 00:34:50,699
Or should sites just be doing
easy on data by default?

901
00:34:50,699 --> 00:34:52,510
ALEX RUSSELL: I think there was
a billing issue, not so

902
00:34:52,510 --> 00:34:54,120
much about the data that Natasha
was bringing up.

903
00:34:54,120 --> 00:35:00,770
But there's some
non-packet-based metric for

904
00:35:00,770 --> 00:35:01,680
use, right?

905
00:35:01,680 --> 00:35:04,530
So the question I always
ask is, what

906
00:35:04,530 --> 00:35:05,770
is a Wikipedia article?

907
00:35:05,770 --> 00:35:06,870
Is it the text?

908
00:35:06,870 --> 00:35:07,900
Is it the history?

909
00:35:07,900 --> 00:35:10,010
Is it all the images that
are part of it?

910
00:35:10,010 --> 00:35:11,440
Is it the set of things
that it's linked to?

911
00:35:11,440 --> 00:35:12,880
Is it the URL?

912
00:35:12,880 --> 00:35:16,440
It's actually probably a
bundle of actual binary

913
00:35:16,440 --> 00:35:20,790
resources and then some
ephemeral metadata around it.

914
00:35:20,790 --> 00:35:22,540
And so you're talking about
consuming one of those at a

915
00:35:22,540 --> 00:35:23,180
time, right?

916
00:35:23,180 --> 00:35:25,950
So if I'm on "FT" or the "New
York Times," or whatever, and

917
00:35:25,950 --> 00:35:28,130
I'm clicking through, how
do I get to my limit?

918
00:35:28,130 --> 00:35:29,470
And then how do I
enforce that?

919
00:35:29,470 --> 00:35:32,570
Not to go design a solution for
enforcement for anybody,

920
00:35:32,570 --> 00:35:34,810
but you can imagine a relatively
straightforward

921
00:35:34,810 --> 00:35:42,080
sort of soft landing for users
where there's a bit of code on

922
00:35:42,080 --> 00:35:44,630
the client that's watching usage
and then it attempts to

923
00:35:44,630 --> 00:35:48,870
enforce some soft limit with a
cap, with one or two extra.

924
00:35:48,870 --> 00:35:52,950
And then at some point later,
if you haven't synced in N

925
00:35:52,950 --> 00:35:55,680
number of days, then maybe the
content becomes inaccessible.

926
00:35:55,680 --> 00:35:59,140
I mean, those are the sorts of
solutions that folks who have

927
00:35:59,140 --> 00:36:02,790
to implement DRM are doing
today for things like my

928
00:36:02,790 --> 00:36:03,620
[INAUDIBLE]

929
00:36:03,620 --> 00:36:04,770
offline data, right?

930
00:36:04,770 --> 00:36:07,440
You have to show that you're
willing to be part of the

931
00:36:07,440 --> 00:36:09,960
ecosystem for some period of
time, otherwise the device

932
00:36:09,960 --> 00:36:12,610
itself decides to
stop playing.

933
00:36:12,610 --> 00:36:13,230
JAKE ARCHIBALD: I think
we'll take another

934
00:36:13,230 --> 00:36:14,190
question from the audience.

935
00:36:14,190 --> 00:36:16,045
Henrik, where abouts are you?

936
00:36:16,045 --> 00:36:17,295
Get that man a microphone.

937
00:36:17,295 --> 00:36:21,420

938
00:36:21,420 --> 00:36:22,190
Just throw it.

939
00:36:22,190 --> 00:36:23,220
ALEX RUSSELL: That's a good
question, [INAUDIBLE]

940
00:36:23,220 --> 00:36:25,820
microphone.

941
00:36:25,820 --> 00:36:29,260
HENRIK : So this is back at
the permission model.

942
00:36:29,260 --> 00:36:31,700
It seems like, at the point
you're going offline, you're

943
00:36:31,700 --> 00:36:33,240
making a fundamentally
different type

944
00:36:33,240 --> 00:36:34,490
of app than a website.

945
00:36:34,490 --> 00:36:35,930
There's a distinction
between a site and a

946
00:36:35,930 --> 00:36:36,850
website at that point.

947
00:36:36,850 --> 00:36:39,010
It's very clearly an app.

948
00:36:39,010 --> 00:36:40,280
And you're talking
about requesting

949
00:36:40,280 --> 00:36:41,640
permission for storage.

950
00:36:41,640 --> 00:36:44,690
But also, that's a perfect time
to ask for permission for

951
00:36:44,690 --> 00:36:45,570
other things as well.

952
00:36:45,570 --> 00:36:48,080
So there's this whole
installable model that you're

953
00:36:48,080 --> 00:36:50,350
seeing a little bit in
Android and Chrome

954
00:36:50,350 --> 00:36:53,260
installed apps as well.

955
00:36:53,260 --> 00:36:57,090
Is there standards efforts to
really unify that experience?

956
00:36:57,090 --> 00:36:59,660
Like for example, if I'm going
to do video conferencing, why

957
00:36:59,660 --> 00:37:02,700
shouldn't I be able to ask for
that upfront as a mandatory

958
00:37:02,700 --> 00:37:03,960
requirement?

959
00:37:03,960 --> 00:37:05,705
And if they say no,
then sorry, I

960
00:37:05,705 --> 00:37:06,500
can't install the app.

961
00:37:06,500 --> 00:37:07,120
I mean, whatever.

962
00:37:07,120 --> 00:37:08,080
I mean, that's just
an example.

963
00:37:08,080 --> 00:37:11,170
But unifying that, standardizing
that process,

964
00:37:11,170 --> 00:37:13,880
and seeing that as the
permission point where you ask

965
00:37:13,880 --> 00:37:16,030
for everything that you need.

966
00:37:16,030 --> 00:37:17,630
JAKE ARCHIBALD: I feel like I
could sink the rest of the

967
00:37:17,630 --> 00:37:20,910
panel into a discussion of do
apps actually exist as a term?

968
00:37:20,910 --> 00:37:24,380
Or is it just a bit of marketing
fluff like web 2.0?

969
00:37:24,380 --> 00:37:25,470
MATT ANDREWS: Let's
not go there.

970
00:37:25,470 --> 00:37:27,370
JAKE ARCHIBALD: But we're
not going to go there.

971
00:37:27,370 --> 00:37:28,520
ANNE VAN KESTEREN: I feel
Alex already answered

972
00:37:28,520 --> 00:37:29,550
his question earlier.

973
00:37:29,550 --> 00:37:35,340
Like he said, on the web you
want to feel gracefully for

974
00:37:35,340 --> 00:37:37,990
each of the things.

975
00:37:37,990 --> 00:37:42,290
So you don't want to bundle and
then get the user to give

976
00:37:42,290 --> 00:37:45,020
up his location data, all his
storage, and all those things.

977
00:37:45,020 --> 00:37:49,400
You want to let the user be in
control, which sort of argues

978
00:37:49,400 --> 00:37:54,400
in the way of doing a
per feature grant.

979
00:37:54,400 --> 00:37:54,845
HENRIK: Yeah.

980
00:37:54,845 --> 00:37:56,625
But isn't that always going
to make you a second-class

981
00:37:56,625 --> 00:37:58,410
citizen to the installed app?

982
00:37:58,410 --> 00:37:59,400
ALEX RUSSELL: I don't
think so.

983
00:37:59,400 --> 00:38:01,070
So just to answer directly, I
don't think that makes you a

984
00:38:01,070 --> 00:38:03,960
second-class citizen to the
installed applications for a

985
00:38:03,960 --> 00:38:04,490
couple of reasons.

986
00:38:04,490 --> 00:38:08,310
One, it leaves it up to the
system to mediate the length

987
00:38:08,310 --> 00:38:10,830
and breadth of that
grant, right?

988
00:38:10,830 --> 00:38:14,060
So you can imagine that iOS
versus Android running the

989
00:38:14,060 --> 00:38:14,740
same application.

990
00:38:14,740 --> 00:38:16,490
As long as the API is the same,
they can make different

991
00:38:16,490 --> 00:38:18,880
choices about how often to
prompt someone about a thing.

992
00:38:18,880 --> 00:38:22,930
Secondly, you can imagine this
being a consent and review

993
00:38:22,930 --> 00:38:25,640
kind of a system where users
are always able to see the

994
00:38:25,640 --> 00:38:27,310
list of permissions that are
currently granted to do a

995
00:38:27,310 --> 00:38:29,780
thing, and maybe choose to give
it forever and/or revoke

996
00:38:29,780 --> 00:38:30,780
it entirely.

997
00:38:30,780 --> 00:38:33,270
And as long as the API allows
revocation to happen--

998
00:38:33,270 --> 00:38:36,250
you say you demand this thing,
well, I think it's not

999
00:38:36,250 --> 00:38:38,240
reasonable to demand a thing
at install time.

1000
00:38:38,240 --> 00:38:41,670
I think it's reasonable to try
to explain that behavior in

1001
00:38:41,670 --> 00:38:43,290
context of use, right?

1002
00:38:43,290 --> 00:38:46,770
I click on a link to go do
a thing and you say no?

1003
00:38:46,770 --> 00:38:47,670
OK, great.

1004
00:38:47,670 --> 00:38:49,510
I did a thing and then we had
a conversation about it.

1005
00:38:49,510 --> 00:38:51,210
And then you can tell me
why you need me to do

1006
00:38:51,210 --> 00:38:52,200
that thing for you.

1007
00:38:52,200 --> 00:38:53,530
It's not fool proof.

1008
00:38:53,530 --> 00:38:55,050
And it may train users
the wrong way.

1009
00:38:55,050 --> 00:38:57,030
But it's at least a start at
having a conversation about

1010
00:38:57,030 --> 00:38:59,760
why you want permissions.

1011
00:38:59,760 --> 00:39:01,030
ANNE VAN KESTEREN: I can maybe
see in a way how it's

1012
00:39:01,030 --> 00:39:03,120
second-class from a developer's
perspective.

1013
00:39:03,120 --> 00:39:05,560
But I think, from a user's
perspective, it's

1014
00:39:05,560 --> 00:39:08,860
a way better deal.

1015
00:39:08,860 --> 00:39:09,880
JAKE ARCHIBALD: Can we get the
microphone to Kyle Simpson for

1016
00:39:09,880 --> 00:39:10,480
the next question?

1017
00:39:10,480 --> 00:39:13,570
But first, Matt, you with the
"Financial Times." taking that

1018
00:39:13,570 --> 00:39:14,890
stuff offline, some of
that stuff was quite

1019
00:39:14,890 --> 00:39:16,320
heavy due to imagery?

1020
00:39:16,320 --> 00:39:16,640
MATT ANDREWS: Yeah.

1021
00:39:16,640 --> 00:39:18,070
JAKE ARCHIBALD: Did you
deal with that in

1022
00:39:18,070 --> 00:39:18,680
any particular way?

1023
00:39:18,680 --> 00:39:21,670
Did you ask the user within your
app before doing that?

1024
00:39:21,670 --> 00:39:24,090
MATT ANDREWS: So when you
first laid out the app,

1025
00:39:24,090 --> 00:39:25,620
originally, it was
designed for iOS.

1026
00:39:25,620 --> 00:39:29,330
And their limitation in iOS is
you can have 5 megabytes of

1027
00:39:29,330 --> 00:39:29,740
[INAUDIBLE]

1028
00:39:29,740 --> 00:39:30,950
storage without permission.

1029
00:39:30,950 --> 00:39:34,085
So we first gave them 5
megabytes of data, which is

1030
00:39:34,085 --> 00:39:34,860
they ask for it, basically.

1031
00:39:34,860 --> 00:39:38,020
And then, once they've used the
app a bit or it pinches

1032
00:39:38,020 --> 00:39:40,280
their home screen and actually
using it properly, we

1033
00:39:40,280 --> 00:39:41,480
then ask for more.

1034
00:39:41,480 --> 00:39:44,921
So I think you can definitely
design your applications so

1035
00:39:44,921 --> 00:39:49,130
that you have a set number of
mandatory requirements, and

1036
00:39:49,130 --> 00:39:52,450
then you add things on.

1037
00:39:52,450 --> 00:39:53,640
It starts off as a website.

1038
00:39:53,640 --> 00:39:55,870
You can always fall back
to being a website.

1039
00:39:55,870 --> 00:39:58,030
All this stuff is extra.

1040
00:39:58,030 --> 00:39:59,430
JAKE ARCHIBALD: I've just caught
myself on the screen

1041
00:39:59,430 --> 00:40:01,290
looking like I'm advertising
the thing I'm drinking.

1042
00:40:01,290 --> 00:40:03,230
So I'm going to balance it out
by saying it's actually quite

1043
00:40:03,230 --> 00:40:04,297
disgusting.

1044
00:40:04,297 --> 00:40:05,191
[LAUGHTER]

1045
00:40:05,191 --> 00:40:06,760
JAKE ARCHIBALD: We've got a
question now from Kyle.

1046
00:40:06,760 --> 00:40:10,632

1047
00:40:10,632 --> 00:40:11,900
Ah.

1048
00:40:11,900 --> 00:40:13,150
Kyle's over there.

1049
00:40:13,150 --> 00:40:15,770

1050
00:40:15,770 --> 00:40:18,940
KYLE SIMPSON: So usually, I am
the one who's screaming for

1051
00:40:18,940 --> 00:40:21,600
more APIs, more functionality
to be given to us.

1052
00:40:21,600 --> 00:40:24,990
But I'm going to flip the table
here and say, going with

1053
00:40:24,990 --> 00:40:27,470
the theme that browsers are
generally better at a lot of

1054
00:40:27,470 --> 00:40:32,510
these tasks, as a developer of
apps and sites, one thing I'd

1055
00:40:32,510 --> 00:40:35,410
really not like to deal
with is the idea

1056
00:40:35,410 --> 00:40:36,930
of online and offline.

1057
00:40:36,930 --> 00:40:39,390
So one idea that I would just
want to bounce and see if you

1058
00:40:39,390 --> 00:40:41,630
think would be possible.

1059
00:40:41,630 --> 00:40:44,890
We've talked a lot about
persisting the actual app, the

1060
00:40:44,890 --> 00:40:46,400
files that make the app run.

1061
00:40:46,400 --> 00:40:47,900
But what about all the
network requests?

1062
00:40:47,900 --> 00:40:51,670
Could the browser proxy the
requests that I'm making for

1063
00:40:51,670 --> 00:40:54,600
me, and then, when I come back
online, prompt me and say, do

1064
00:40:54,600 --> 00:40:55,930
you want to still send
these tweets?

1065
00:40:55,930 --> 00:40:57,840
Do you want to still
send these emails?

1066
00:40:57,840 --> 00:41:00,340
Because you requested that
a few minutes ago.

1067
00:41:00,340 --> 00:41:02,430
That way I, as an app developer,
don't have to think

1068
00:41:02,430 --> 00:41:03,620
about those details.

1069
00:41:03,620 --> 00:41:06,180
I just make the app, assume
online, and let the browser

1070
00:41:06,180 --> 00:41:08,270
take care of it.

1071
00:41:08,270 --> 00:41:10,750
CALVIN SPEALMAN: I think,
actually, there's two areas

1072
00:41:10,750 --> 00:41:12,480
there that need to be addressed
differently, which

1073
00:41:12,480 --> 00:41:18,660
is things and things you do,
keeping the data locally first

1074
00:41:18,660 --> 00:41:20,030
and allowing synchronization
to happen

1075
00:41:20,030 --> 00:41:21,030
separate from your app.

1076
00:41:21,030 --> 00:41:24,460
For example, CouchDB has a
PouchDB layer that will be

1077
00:41:24,460 --> 00:41:25,900
implemented inside
the browser.

1078
00:41:25,900 --> 00:41:28,250
And you have all your
local data.

1079
00:41:28,250 --> 00:41:30,840
And the synchronization happens
as a separate process.

1080
00:41:30,840 --> 00:41:33,290
Synchronizing API calls like
tweets and things, I don't

1081
00:41:33,290 --> 00:41:36,040
think it makes sense to do
separately or to queue up in

1082
00:41:36,040 --> 00:41:37,980
the background, because the user
needs to know that that

1083
00:41:37,980 --> 00:41:39,280
hasn't happened yet.

1084
00:41:39,280 --> 00:41:41,533
You can't just make the tweet
and say here's my API call.

1085
00:41:41,533 --> 00:41:43,800
I hope the browser did it
sometime later, maybe.

1086
00:41:43,800 --> 00:41:46,970
You have to tell the browser
or the browser user, this

1087
00:41:46,970 --> 00:41:47,930
hasn't sent yet.

1088
00:41:47,930 --> 00:41:49,250
This hasn't completed.

1089
00:41:49,250 --> 00:41:51,560
They have to know
what's going on.

1090
00:41:51,560 --> 00:41:53,180
ALEX RUSSELL: There's a related
issue, which is what

1091
00:41:53,180 --> 00:41:55,670
does it mean to get success
back from an API?

1092
00:41:55,670 --> 00:42:00,920
Like if I get a 200 response
and the return content is

1093
00:42:00,920 --> 00:42:05,240
error, how do I cut the browser
into the conversation

1094
00:42:05,240 --> 00:42:06,490
so that it retries?

1095
00:42:06,490 --> 00:42:08,400

1096
00:42:08,400 --> 00:42:11,340
KYLE SIMPSON: So I was under the
assumption that a browser

1097
00:42:11,340 --> 00:42:13,630
knows that it doesn't
have connectivity.

1098
00:42:13,630 --> 00:42:15,870
It tries to talk to the radio
and the radio doesn't give it

1099
00:42:15,870 --> 00:42:17,340
any sort of response back.

1100
00:42:17,340 --> 00:42:19,560
But also there's plenty of UIs
that we do this already.

1101
00:42:19,560 --> 00:42:21,650
Like when I'm downloading files,
there's UIs that tell

1102
00:42:21,650 --> 00:42:24,270
me the status of my downloads
and let me unpause it.

1103
00:42:24,270 --> 00:42:27,000
So I don't understand why the
same sort of API couldn't

1104
00:42:27,000 --> 00:42:30,110
present to me, the user,
that here is the

1105
00:42:30,110 --> 00:42:31,060
requests that I've made.

1106
00:42:31,060 --> 00:42:32,920
And I want to say, yes, these
are OK to make, now that

1107
00:42:32,920 --> 00:42:35,460
you're back online, no, that
tweet is not one I want to

1108
00:42:35,460 --> 00:42:36,680
send out, or whatever.

1109
00:42:36,680 --> 00:42:38,610
JAKE ARCHIBALD: It sounds like
the difference between

1110
00:42:38,610 --> 00:42:42,170
adaptive requests and predictive
requests, in terms

1111
00:42:42,170 --> 00:42:44,340
of what we expect to get
from the network.

1112
00:42:44,340 --> 00:42:46,660
Is that something that
comes into this?

1113
00:42:46,660 --> 00:42:49,440
Are we going to have
APIs around that?

1114
00:42:49,440 --> 00:42:50,590
ALEX RUSSELL: I think there's
a fundamental difference

1115
00:42:50,590 --> 00:42:54,980
between the download case that
you just tried to outline and

1116
00:42:54,980 --> 00:42:58,340
these other cases, which is
that, in the download case,

1117
00:42:58,340 --> 00:43:00,650
we're talking in terms of a
single resource that the

1118
00:43:00,650 --> 00:43:02,200
browser knows everything
about.

1119
00:43:02,200 --> 00:43:04,020
The browser knows the entire
protocol for downloading a

1120
00:43:04,020 --> 00:43:04,930
file, right?

1121
00:43:04,930 --> 00:43:06,840
And in fact, it's the thing
giving you the UI for

1122
00:43:06,840 --> 00:43:07,960
downloading the file.

1123
00:43:07,960 --> 00:43:10,730
This is a situation in which
were asking the browser to

1124
00:43:10,730 --> 00:43:12,910
coordinate with the application
that it's hosting

1125
00:43:12,910 --> 00:43:14,710
to talk about mediating
that conversation

1126
00:43:14,710 --> 00:43:16,090
about content, right?

1127
00:43:16,090 --> 00:43:17,820
It's running the application
and then saying, hey

1128
00:43:17,820 --> 00:43:19,260
application, you're
doing stuff.

1129
00:43:19,260 --> 00:43:20,610
The user intends
to do a thing.

1130
00:43:20,610 --> 00:43:22,510
You're going to tell me what
that thing is and then tell me

1131
00:43:22,510 --> 00:43:24,250
how that relates to the
rest of the world.

1132
00:43:24,250 --> 00:43:27,740
And we don't have any higher
level semantic equivalence.

1133
00:43:27,740 --> 00:43:29,420
There's no way to tell the
browser, oh, this thing is

1134
00:43:29,420 --> 00:43:30,080
sending a tweet.

1135
00:43:30,080 --> 00:43:32,890
Processors don't know
what tweets are.

1136
00:43:32,890 --> 00:43:34,510
These are just different
data types.

1137
00:43:34,510 --> 00:43:36,350
One of them is a composite
data type and one

1138
00:43:36,350 --> 00:43:37,200
of them is a primitive.

1139
00:43:37,200 --> 00:43:40,110
And browsers are OK at
primitives they understand.

1140
00:43:40,110 --> 00:43:41,560
But when it comes to composites,
we have to give

1141
00:43:41,560 --> 00:43:44,550
applications control.

1142
00:43:44,550 --> 00:43:45,430
JAKE ARCHIBALD: I think
we're going to move

1143
00:43:45,430 --> 00:43:46,430
on to the next topic.

1144
00:43:46,430 --> 00:43:48,720
The next question is
from Nick Molnar.

1145
00:43:48,720 --> 00:43:49,400
Whereabouts are you hiding?

1146
00:43:49,400 --> 00:43:49,820
Over there.

1147
00:43:49,820 --> 00:43:51,617
Get a microphone over here?

1148
00:43:51,617 --> 00:43:53,108
MALE SPEAKER: [INAUDIBLE].

1149
00:43:53,108 --> 00:43:54,102
JAKE ARCHIBALD: Oh.

1150
00:43:54,102 --> 00:43:54,600
That's good.

1151
00:43:54,600 --> 00:43:55,850
Someone was just going
to the toilet.

1152
00:43:55,850 --> 00:43:56,830
I thought they were
asking a question.

1153
00:43:56,830 --> 00:43:57,520
Never mind.

1154
00:43:57,520 --> 00:43:57,930
[LAUGHTER]

1155
00:43:57,930 --> 00:43:59,592
JAKE ARCHIBALD: Should ask them
them a question anyway.

1156
00:43:59,592 --> 00:44:00,330
CALVIN SPEALMAN: That's
a bad omen.

1157
00:44:00,330 --> 00:44:02,199
JAKE ARCHIBALD: Serve them
right for getting up.

1158
00:44:02,199 --> 00:44:02,490
NICK MOLNAR: All right.

1159
00:44:02,490 --> 00:44:06,340
So users only expect offline
behavior from apps downloaded

1160
00:44:06,340 --> 00:44:07,410
from their app store.

1161
00:44:07,410 --> 00:44:11,620
Will initiatives like iOS's
Startup image and Touch icon

1162
00:44:11,620 --> 00:44:14,890
ever be expanded to include a
full metadata set suitable for

1163
00:44:14,890 --> 00:44:17,970
web apps to finally be included
in app stores?

1164
00:44:17,970 --> 00:44:19,420
JAKE ARCHIBALD: I think this is
a very important question

1165
00:44:19,420 --> 00:44:22,280
because, even if we solve all
the API issues, we still have

1166
00:44:22,280 --> 00:44:24,640
that user expectation that they
do not think they can go

1167
00:44:24,640 --> 00:44:27,060
into the browser, type in a URL
and expect it to work when

1168
00:44:27,060 --> 00:44:29,170
they know they have
no connectivity.

1169
00:44:29,170 --> 00:44:31,630
So the guys have been building
stuff using the

1170
00:44:31,630 --> 00:44:33,620
current set of APIs.

1171
00:44:33,620 --> 00:44:36,710
What would you do to let the
user know that, yeah, this is

1172
00:44:36,710 --> 00:44:38,210
going to work?

1173
00:44:38,210 --> 00:44:39,560
CALVIN SPEALMAN: Well, I first
started looking at these

1174
00:44:39,560 --> 00:44:41,280
offline apps in Firefox 3.

1175
00:44:41,280 --> 00:44:44,000
So my choice then was I'm just
not going to use this, because

1176
00:44:44,000 --> 00:44:45,470
there's no solution.

1177
00:44:45,470 --> 00:44:47,930
And the point of that was,
it's been a long time.

1178
00:44:47,930 --> 00:44:49,260
We should have solved
this by now.

1179
00:44:49,260 --> 00:44:53,760
We do have a mechanism for our
users to keep the access to an

1180
00:44:53,760 --> 00:44:56,885
app or a website and to indicate
to the browser that

1181
00:44:56,885 --> 00:44:58,886
it's important to them and to
remember to come back to it.

1182
00:44:58,886 --> 00:44:59,580
It's the bookmark.

1183
00:44:59,580 --> 00:45:01,940
And we have this one
that's barely used.

1184
00:45:01,940 --> 00:45:04,720
And it makes a lot of sense
to connect that into the

1185
00:45:04,720 --> 00:45:07,660
permissions, into quotas, into
all these things that we need

1186
00:45:07,660 --> 00:45:09,920
to remember about a website.

1187
00:45:09,920 --> 00:45:12,850
JAKE ARCHIBALD: So Craig, you
built a specialized app for a

1188
00:45:12,850 --> 00:45:14,150
particular set of people.

1189
00:45:14,150 --> 00:45:16,800
How did you communicate to them
that, although this is a

1190
00:45:16,800 --> 00:45:18,740
browser, this is going
to work, this is

1191
00:45:18,740 --> 00:45:21,290
going to work for you?

1192
00:45:21,290 --> 00:45:23,950
CRAIG CAVALIER: We go about this
in different approaches,

1193
00:45:23,950 --> 00:45:30,780
depending on the different
requirements for hardware.

1194
00:45:30,780 --> 00:45:35,400
So one of the nice things about
iOS is you can add apps

1195
00:45:35,400 --> 00:45:36,330
to your home screen.

1196
00:45:36,330 --> 00:45:38,800
And that becomes kind
of difficult in some

1197
00:45:38,800 --> 00:45:39,400
of the other browsers.

1198
00:45:39,400 --> 00:45:43,080
I think you can add to
a home screen in

1199
00:45:43,080 --> 00:45:45,640
other browsers as well.

1200
00:45:45,640 --> 00:45:45,780
Yeah.

1201
00:45:45,780 --> 00:45:48,660
It's a bit shaky.

1202
00:45:48,660 --> 00:45:52,960
So yeah, it would be nice if
there was some way of saying,

1203
00:45:52,960 --> 00:45:54,540
hey, I want to be able
to install this.

1204
00:45:54,540 --> 00:45:57,430
I know Firefox have made some
progress in that direction

1205
00:45:57,430 --> 00:45:59,580
with the manifest file.

1206
00:45:59,580 --> 00:46:02,050
So you can specify things that
your application needs when

1207
00:46:02,050 --> 00:46:03,710
you install.

1208
00:46:03,710 --> 00:46:06,340
I think having some
standardization around those

1209
00:46:06,340 --> 00:46:08,770
kind of processes is going
to help companies like

1210
00:46:08,770 --> 00:46:11,520
us make that work.

1211
00:46:11,520 --> 00:46:14,520
JAKE ARCHIBALD: So Matt, your
site was open to all users.

1212
00:46:14,520 --> 00:46:16,760
You had to explain to them
that this was possible.

1213
00:46:16,760 --> 00:46:17,660
How do you do that?

1214
00:46:17,660 --> 00:46:21,280
MATT ANDREWS: Well iOS,
like you say, is easy.

1215
00:46:21,280 --> 00:46:22,530
The rest of them,
we just don't.

1216
00:46:22,530 --> 00:46:25,910
And unfortunately, this is one
of the reasons why we don't

1217
00:46:25,910 --> 00:46:28,370
see that many users on Chrome
for Android, even though the

1218
00:46:28,370 --> 00:46:31,550
app works absolutely
brilliantly on it.

1219
00:46:31,550 --> 00:46:34,450
And the Chrome Web Store-- you
said there was two ways of

1220
00:46:34,450 --> 00:46:38,300
making web apps work offline,
the Google Gaze and Appcache.

1221
00:46:38,300 --> 00:46:42,060
Chrome Web Store offers an
alternative approach.

1222
00:46:42,060 --> 00:46:46,580
And you can use that to get
your App icon on the

1223
00:46:46,580 --> 00:46:47,440
[INAUDIBLE]

1224
00:46:47,440 --> 00:46:47,640
menu.

1225
00:46:47,640 --> 00:46:49,620
And I think that would be really
nice to make that more

1226
00:46:49,620 --> 00:46:51,660
open and accessible
to other places.

1227
00:46:51,660 --> 00:46:53,020
JAKE ARCHIBALD: Well, now is
there anything in the spec

1228
00:46:53,020 --> 00:46:54,990
that's going to make
this better?

1229
00:46:54,990 --> 00:46:57,100
Or how can we communicate this
better to users, that the web

1230
00:46:57,100 --> 00:46:58,580
will work offline?

1231
00:46:58,580 --> 00:46:59,840
ANNE VAN KESTEREN: So we've been
looking into the manifest

1232
00:46:59,840 --> 00:47:01,550
thing and making that better.

1233
00:47:01,550 --> 00:47:05,490
But I think a lot of the
standards, how they evolve, is

1234
00:47:05,490 --> 00:47:07,510
like in small, incremental
steps.

1235
00:47:07,510 --> 00:47:09,130
So first, we need to
solve this offline

1236
00:47:09,130 --> 00:47:10,330
thing and get it right.

1237
00:47:10,330 --> 00:47:12,750
And then people can start
building apps.

1238
00:47:12,750 --> 00:47:14,640
And then we can start thinking
about how to improve

1239
00:47:14,640 --> 00:47:16,840
bookmarks, to make
that work better.

1240
00:47:16,840 --> 00:47:18,930
And then, long-term, hopefully,
we can obsolete the

1241
00:47:18,930 --> 00:47:21,200
concept of app stores entirely,
because you can just

1242
00:47:21,200 --> 00:47:23,550
browse the web and bookmark
things to your home screen and

1243
00:47:23,550 --> 00:47:24,650
no longer need those.

1244
00:47:24,650 --> 00:47:26,340
JAKE ARCHIBALD: Can we get this
right, before we have the

1245
00:47:26,340 --> 00:47:29,310
mechanism for users to
realize it works?

1246
00:47:29,310 --> 00:47:31,060
Because we don't know we've got
it right, until we've got

1247
00:47:31,060 --> 00:47:34,090
users using it and we see the
behavior patterns and we see

1248
00:47:34,090 --> 00:47:37,160
the bits of the APIs that
aren't working.

1249
00:47:37,160 --> 00:47:37,763
ANNE VAN KESTEREN: I'll
check on that.

1250
00:47:37,763 --> 00:47:41,570
I guess you have to grow
into getting there.

1251
00:47:41,570 --> 00:47:44,920
You can't really just design the
whole thing up front and

1252
00:47:44,920 --> 00:47:46,360
then present it and
it just works.

1253
00:47:46,360 --> 00:47:47,770
MATT ANDREWS: When you say
"getting offline working

1254
00:47:47,770 --> 00:47:52,030
right," you mean the terminology
formally called

1255
00:47:52,030 --> 00:47:53,650
Navigation Controller, right?

1256
00:47:53,650 --> 00:47:54,620
ANNE VAN KESTEREN: Yeah.

1257
00:47:54,620 --> 00:47:57,560
Well, I'm hoping Service
Worker is the answer.

1258
00:47:57,560 --> 00:47:58,730
We'll have to find out.

1259
00:47:58,730 --> 00:47:59,370
We have to test.

1260
00:47:59,370 --> 00:48:01,980
We have to incrementally
evolve.

1261
00:48:01,980 --> 00:48:04,410
We're at the prototyping stage
now, so it's early days.

1262
00:48:04,410 --> 00:48:06,463
MATT ANDREWS: But from the
user's perspective, as much as

1263
00:48:06,463 --> 00:48:09,140
our cache is a bit loathed,
it does kind of work.

1264
00:48:09,140 --> 00:48:10,600
I mean, it will give you an

1265
00:48:10,600 --> 00:48:12,300
application that works offline.

1266
00:48:12,300 --> 00:48:15,010
Can't we not just fill in
that little step to get

1267
00:48:15,010 --> 00:48:15,730
that icon on there?

1268
00:48:15,730 --> 00:48:16,900
And then it will be compatible
with both?

1269
00:48:16,900 --> 00:48:18,340
ANNE VAN KESTEREN: So the
problem with Appcache is that

1270
00:48:18,340 --> 00:48:21,000
we've got like a universal
no back from developers.

1271
00:48:21,000 --> 00:48:23,270
So people don't really want to
experiment with it and roll it

1272
00:48:23,270 --> 00:48:25,230
out on their sites.

1273
00:48:25,230 --> 00:48:25,530
Yeah.

1274
00:48:25,530 --> 00:48:26,781
CALVIN SPEALMAN: Right.

1275
00:48:26,781 --> 00:48:28,490
ANNE VAN KESTEREN: And if
there's no adoption, then we

1276
00:48:28,490 --> 00:48:31,350
can't really further experiment
with other things.

1277
00:48:31,350 --> 00:48:32,770
JAKE ARCHIBALD: So Alex, it
seems like the sentiment of

1278
00:48:32,770 --> 00:48:34,820
the rest of the panel is that
Chrome for Android's doing

1279
00:48:34,820 --> 00:48:38,850
this very badly, where the
installed Home screen is great

1280
00:48:38,850 --> 00:48:40,060
for [? us. ?]

1281
00:48:40,060 --> 00:48:41,720
Where is it?

1282
00:48:41,720 --> 00:48:42,380
ALEX RUSSELL: That's
a great question.

1283
00:48:42,380 --> 00:48:43,361
John?

1284
00:48:43,361 --> 00:48:45,620
[LAUGHTER]

1285
00:48:45,620 --> 00:48:46,500
JAKE ARCHIBALD: Are you prepared
to answer this, John?

1286
00:48:46,500 --> 00:48:47,416
JOHN: Uh-huh.

1287
00:48:47,416 --> 00:48:48,332
Sure.

1288
00:48:48,332 --> 00:48:48,790
[LAUGHTER]

1289
00:48:48,790 --> 00:48:50,500
JAKE ARCHIBALD: We'll get a
microphone to John, anyway.

1290
00:48:50,500 --> 00:48:51,670
And he can at least
tell us that he's

1291
00:48:51,670 --> 00:48:52,530
not allowed to answer.

1292
00:48:52,530 --> 00:48:53,550
ALEX RUSSELL: If I had
my druthers, we would

1293
00:48:53,550 --> 00:48:54,730
absolutely have that.

1294
00:48:54,730 --> 00:48:56,430
I mean, I think that's
a reasonable

1295
00:48:56,430 --> 00:48:57,140
thing to want to have.

1296
00:48:57,140 --> 00:48:59,710
I mean, my personal view-- and
I'm not speaking for Google

1297
00:48:59,710 --> 00:49:02,860
here-- is that the manifest
destiny of web apps is that

1298
00:49:02,860 --> 00:49:04,690
they can do everything
that apps can do.

1299
00:49:04,690 --> 00:49:06,460
Everything that your system
application should be able to

1300
00:49:06,460 --> 00:49:08,700
do, you should be able to write
as a web page first.

1301
00:49:08,700 --> 00:49:10,550
And then you should be able to
transition to a world that's

1302
00:49:10,550 --> 00:49:12,420
much more powerful.

1303
00:49:12,420 --> 00:49:14,810
And that just depends on getting
users to a point where

1304
00:49:14,810 --> 00:49:16,450
they believe that that's
a safe thing to do.

1305
00:49:16,450 --> 00:49:19,130
And if that's saying no to
some permissions to get

1306
00:49:19,130 --> 00:49:22,590
others, that sounds good, or
asking users to install or

1307
00:49:22,590 --> 00:49:24,020
bless a thing, that
seems reasonable.

1308
00:49:24,020 --> 00:49:26,590
But yeah.

1309
00:49:26,590 --> 00:49:30,290
JAKE ARCHIBALD: John, do have
a comment or no comment?

1310
00:49:30,290 --> 00:49:30,360
JOHN: Thank you, Alex.

1311
00:49:30,360 --> 00:49:35,630
I think we have a lot more to
do in this space to make web

1312
00:49:35,630 --> 00:49:36,880
apps more capable.

1313
00:49:36,880 --> 00:49:39,400

1314
00:49:39,400 --> 00:49:40,520
We're putting [INAUDIBLE].

1315
00:49:40,520 --> 00:49:42,420
We'll see what happens.

1316
00:49:42,420 --> 00:49:43,850
JAKE ARCHIBALD: Well, we'll take
one more question here

1317
00:49:43,850 --> 00:49:44,350
from the audience.

1318
00:49:44,350 --> 00:49:46,510
CRAIG CAVALIER: One more
thing to add on that.

1319
00:49:46,510 --> 00:49:51,840
Being that Chrome for Android,
the Navigation Controller--

1320
00:49:51,840 --> 00:49:56,330
sorry, the installable apps
is only part of that.

1321
00:49:56,330 --> 00:49:59,050
And we found that, actually,
Chrome for Android has the

1322
00:49:59,050 --> 00:50:01,710
best [? of all ?] of things like
IndexedDB, which we don't

1323
00:50:01,710 --> 00:50:05,650
get on other devices
like Safari on iOS.

1324
00:50:05,650 --> 00:50:09,140
So we need to have that problem
solved consistently

1325
00:50:09,140 --> 00:50:11,150
across browsers because, at the
moment, we have to rely on

1326
00:50:11,150 --> 00:50:16,080
things like shims to fall
back to webSQL.

1327
00:50:16,080 --> 00:50:19,670
And with iOS 7 and the five-meg
cap that we have for

1328
00:50:19,670 --> 00:50:21,660
the user prompt that now--

1329
00:50:21,660 --> 00:50:23,820
yeah, it's really important
to get that piece

1330
00:50:23,820 --> 00:50:24,870
of the puzzle solved.

1331
00:50:24,870 --> 00:50:25,530
JAKE ARCHIBALD: Thanks,
for that.

1332
00:50:25,530 --> 00:50:27,920
We can declare war now between
iOS and Android now.

1333
00:50:27,920 --> 00:50:28,590
That's brilliant.

1334
00:50:28,590 --> 00:50:29,950
We're going to take one question
from the audience,

1335
00:50:29,950 --> 00:50:31,520
before we move topic.

1336
00:50:31,520 --> 00:50:32,310
Eric Sheppard?

1337
00:50:32,310 --> 00:50:34,050
Wherever I saw you.

1338
00:50:34,050 --> 00:50:35,950
A microphone over here.

1339
00:50:35,950 --> 00:50:37,950
ERIC SHEPHERD: This is sort of
a follow up, the flip side of

1340
00:50:37,950 --> 00:50:40,150
the payment question
from earlier for

1341
00:50:40,150 --> 00:50:42,180
the number of issues.

1342
00:50:42,180 --> 00:50:44,490
There are a whole host of other
things that you may want

1343
00:50:44,490 --> 00:50:47,630
to know about that, if people
start using the web offline in

1344
00:50:47,630 --> 00:50:51,410
large numbers, we're
going to lose.

1345
00:50:51,410 --> 00:50:54,380
Third-party networks want to
know things for tracking

1346
00:50:54,380 --> 00:50:56,870
purposes, for re-marketing
purposes.

1347
00:50:56,870 --> 00:50:59,800
We want to know what people are
looking at so that, when

1348
00:50:59,800 --> 00:51:03,460
we're giving more and more
customized recommendations in

1349
00:51:03,460 --> 00:51:07,740
e-commerce or article
recommendations in publishing,

1350
00:51:07,740 --> 00:51:09,080
those are things we wanted
to know about too.

1351
00:51:09,080 --> 00:51:12,230
Are any of the ad networks or
anyone looking into possible

1352
00:51:12,230 --> 00:51:16,840
APIs for how to deal with
this kind of stuff?

1353
00:51:16,840 --> 00:51:18,220
ALEX RUSSELL: I haven't been
talking to them and probably

1354
00:51:18,220 --> 00:51:20,670
should be, with regards to the
Service Worker design.

1355
00:51:20,670 --> 00:51:23,270
But I can only talk about
the thing I'm working

1356
00:51:23,270 --> 00:51:25,200
on, which is that.

1357
00:51:25,200 --> 00:51:28,440
And it allows you to--

1358
00:51:28,440 --> 00:51:33,860
a thing I put on the screen oh
so briefly was the import

1359
00:51:33,860 --> 00:51:36,490
scripts API, which
allows a worker--

1360
00:51:36,490 --> 00:51:37,760
these things are
just workers--

1361
00:51:37,760 --> 00:51:40,780
a worker of any kind to just go
out and import some other

1362
00:51:40,780 --> 00:51:43,160
script, like a require
call in [? AMD, ?]

1363
00:51:43,160 --> 00:51:45,250
something like that, right?

1364
00:51:45,250 --> 00:51:50,110
So you can compose behavior from
multiple origins so that,

1365
00:51:50,110 --> 00:51:53,670
if you're working with a
third-par;ty, you could

1366
00:51:53,670 --> 00:51:56,030
include their offline
handling code too.

1367
00:51:56,030 --> 00:51:59,700
And because the service worker
sees requests for all origins,

1368
00:51:59,700 --> 00:52:02,200
including those third-party
ones, you can write your

1369
00:52:02,200 --> 00:52:05,560
handlers in such a way that
well-behaved service worker

1370
00:52:05,560 --> 00:52:08,120
scripts will only pay attention
to the requests for

1371
00:52:08,120 --> 00:52:10,510
their origin and do the
right thing by them.

1372
00:52:10,510 --> 00:52:14,170
And you can import scripts
from other origins to do

1373
00:52:14,170 --> 00:52:17,000
things like handling those kinds
of tracking and counting

1374
00:52:17,000 --> 00:52:17,740
when offline.

1375
00:52:17,740 --> 00:52:20,360
And they get the ability to run
when you're online too.

1376
00:52:20,360 --> 00:52:22,450
So they'll be able to do their
own synchronization.

1377
00:52:22,450 --> 00:52:26,710
It does require the global
coordination thing that we

1378
00:52:26,710 --> 00:52:29,540
love so much about
Java scripts.

1379
00:52:29,540 --> 00:52:30,810
And so we get ES6 modules.

1380
00:52:30,810 --> 00:52:32,270
But I think that's
going to be the

1381
00:52:32,270 --> 00:52:34,270
state-of-the-art for a while.

1382
00:52:34,270 --> 00:52:35,020
It's possible.

1383
00:52:35,020 --> 00:52:36,570
It will require care.

1384
00:52:36,570 --> 00:52:36,840
JAKE ARCHIBALD: OK.

1385
00:52:36,840 --> 00:52:38,610
We're going to move on
to the next question.

1386
00:52:38,610 --> 00:52:42,620
And the next question is asked
by Jake Archibald.

1387
00:52:42,620 --> 00:52:43,850
Oh, not that guy again.

1388
00:52:43,850 --> 00:52:44,680
OK.

1389
00:52:44,680 --> 00:52:45,590
Well, this is a bit weird.

1390
00:52:45,590 --> 00:52:47,960
So I should probably ask the
question-- oh, John's back.

1391
00:52:47,960 --> 00:52:50,170
Hello.

1392
00:52:50,170 --> 00:52:50,830
JOHN: This on?

1393
00:52:50,830 --> 00:52:52,080
Yes.

1394
00:52:52,080 --> 00:52:54,790
We are actually working
on adding [INAUDIBLE]

1395
00:52:54,790 --> 00:52:56,060
Chrome for Android--

1396
00:52:56,060 --> 00:52:59,610
it's a public commit, so I can
talk about it, excellent--

1397
00:52:59,610 --> 00:53:00,900
coming soon, hopefully.

1398
00:53:00,900 --> 00:53:04,010
I think that we had an about
flag recently, it's in

1399
00:53:04,010 --> 00:53:05,660
[INAUDIBLE].

1400
00:53:05,660 --> 00:53:06,440
JAKE ARCHIBALD: Declassified.

1401
00:53:06,440 --> 00:53:07,120
Excellent.

1402
00:53:07,120 --> 00:53:07,618
OK.

1403
00:53:07,618 --> 00:53:08,868
MALE SPEAKER: [INAUDIBLE]
install?

1404
00:53:08,868 --> 00:53:10,606

1405
00:53:10,606 --> 00:53:11,610
JOHN: Oh.

1406
00:53:11,610 --> 00:53:13,680
And I think Vivian
was asking--

1407
00:53:13,680 --> 00:53:16,440

1408
00:53:16,440 --> 00:53:18,540
VIVIAN: I'm interested in
knowing if the [INAUDIBLE]

1409
00:53:18,540 --> 00:53:22,350
want to have the similar API
like iOS, allow you to have

1410
00:53:22,350 --> 00:53:24,750
the API access to prompt
the user to

1411
00:53:24,750 --> 00:53:28,340
install on a home screen?

1412
00:53:28,340 --> 00:53:29,590
MATT ANDREWS: Yes.

1413
00:53:29,590 --> 00:53:31,750

1414
00:53:31,750 --> 00:53:31,990
JAKE ARCHIBALD: OK.

1415
00:53:31,990 --> 00:53:33,390
I'll take that as the whole
panel's opinion.

1416
00:53:33,390 --> 00:53:33,715
[LAUGHTER]

1417
00:53:33,715 --> 00:53:36,695
JAKE ARCHIBALD: So onto the
question from this Jake

1418
00:53:36,695 --> 00:53:38,266
Archibald guy.

1419
00:53:38,266 --> 00:53:40,200
I'm going to try and read in
a different accent, so it

1420
00:53:40,200 --> 00:53:41,270
doesn't seem super weird.

1421
00:53:41,270 --> 00:53:42,900
Maybe that will make it
seem even weirder.

1422
00:53:42,900 --> 00:53:44,780
I'll sit over here slightly.

1423
00:53:44,780 --> 00:53:46,810
So I'll do an American accent.

1424
00:53:46,810 --> 00:53:48,010
I'll try and do your accent.

1425
00:53:48,010 --> 00:53:53,820
So currently, if a post fails,
I can stick it in IndexedDB

1426
00:53:53,820 --> 00:53:56,140
and post it later, right?

1427
00:53:56,140 --> 00:53:59,310
But if the user has to visit
the site later to actually

1428
00:53:59,310 --> 00:54:03,370
send that data, how
can I do that?

1429
00:54:03,370 --> 00:54:05,040
Is there a better
way for that?

1430
00:54:05,040 --> 00:54:06,200
That's a very good
question, Jake.

1431
00:54:06,200 --> 00:54:06,610
Yeah.

1432
00:54:06,610 --> 00:54:08,880
We're going to put that to the
whole panel right now.

1433
00:54:08,880 --> 00:54:10,450
So yeah.

1434
00:54:10,450 --> 00:54:12,380
We don't have anything to
do synchronization.

1435
00:54:12,380 --> 00:54:14,380
Is there a sync API coming?

1436
00:54:14,380 --> 00:54:16,110
Can we do this when the
user's not actually

1437
00:54:16,110 --> 00:54:18,310
sitting on the site?

1438
00:54:18,310 --> 00:54:24,590
CALVIN SPEALMAN: So I think
that there are background

1439
00:54:24,590 --> 00:54:28,500
needs for APIs added in Firefox
OS for things like

1440
00:54:28,500 --> 00:54:31,620
push notifications and that
there is a definite

1441
00:54:31,620 --> 00:54:34,025
possibility of integrating the
need for those to happen in

1442
00:54:34,025 --> 00:54:36,430
the background whenever you
don't even have the tab open

1443
00:54:36,430 --> 00:54:41,690
to also be built upon to have
some kind of synchronized

1444
00:54:41,690 --> 00:54:45,100
process or cronjobs
for your websites.

1445
00:54:45,100 --> 00:54:46,050
JAKE ARCHIBALD: So Craig,
you have this

1446
00:54:46,050 --> 00:54:48,150
specific problem, right?

1447
00:54:48,150 --> 00:54:48,510
CRAIG CAVALIER: We do.

1448
00:54:48,510 --> 00:54:52,950
I mean, going back to the
question of having it running

1449
00:54:52,950 --> 00:54:57,650
in the background, it's kind
of tricky because, firstly,

1450
00:54:57,650 --> 00:55:00,960
you've got situations like,
actually, does the user really

1451
00:55:00,960 --> 00:55:04,230
want to be syncing when
they don't know it?

1452
00:55:04,230 --> 00:55:07,700
I mean, we could be eating up
all of their bandwidth for

1453
00:55:07,700 --> 00:55:09,150
roaming, for instance.

1454
00:55:09,150 --> 00:55:12,530
So in some cases, it makes a lot
more sense for it to be an

1455
00:55:12,530 --> 00:55:14,030
explicit question [INAUDIBLE].

1456
00:55:14,030 --> 00:55:18,020
But in other cases also, and
particularly for business

1457
00:55:18,020 --> 00:55:22,920
data, you have this process of
making business decisions when

1458
00:55:22,920 --> 00:55:24,620
merge conflicts happen.

1459
00:55:24,620 --> 00:55:28,600
So for us, we do something
that's kind of similar to a

1460
00:55:28,600 --> 00:55:30,580
git rebase when we're
synchronizing.

1461
00:55:30,580 --> 00:55:36,020
So we actually can prompt the
user and say, hey, we've

1462
00:55:36,020 --> 00:55:38,290
detected that these two events
happened and they conflict

1463
00:55:38,290 --> 00:55:39,940
with each other and you need
to take some action.

1464
00:55:39,940 --> 00:55:41,190
So that's running in
the background.

1465
00:55:41,190 --> 00:55:42,730
That becomes kind of tricky.

1466
00:55:42,730 --> 00:55:44,020
JAKE ARCHIBALD: So, Alex,
Anne, you guys

1467
00:55:44,020 --> 00:55:44,900
are from the future.

1468
00:55:44,900 --> 00:55:48,136
What's in the future for us?

1469
00:55:48,136 --> 00:55:50,293
ALEX RUSSELL: You have to
do this in his accent.

1470
00:55:50,293 --> 00:55:51,220
[LAUGHTER]

1471
00:55:51,220 --> 00:55:52,480
ANNE VAN KESTEREN: I'm not
sure I can do that.

1472
00:55:52,480 --> 00:55:55,060

1473
00:55:55,060 --> 00:55:57,160
I think push notifications
will have to be opt-in.

1474
00:55:57,160 --> 00:56:02,020
I think background updates for
apps like for your caches and

1475
00:56:02,020 --> 00:56:06,680
stuff, we can do if the user
is connected to wireless.

1476
00:56:06,680 --> 00:56:08,760
I guess, in that case, we can
assume there won't be a cap,

1477
00:56:08,760 --> 00:56:11,340
although, it's not
universally true.

1478
00:56:11,340 --> 00:56:14,890
In Russia and stuff, they still
have quite low caps,

1479
00:56:14,890 --> 00:56:16,110
even on those kind
of connections.

1480
00:56:16,110 --> 00:56:19,260
So there has to be a preference
of sorts.

1481
00:56:19,260 --> 00:56:23,940
Like do you want to allow apps
to update in the background?

1482
00:56:23,940 --> 00:56:25,640
And it could even be a
preference that the user wants

1483
00:56:25,640 --> 00:56:29,050
his apps always up-to-date,
even on 3G or 4G.

1484
00:56:29,050 --> 00:56:31,190
And the browser will just, every
now and then, wake of

1485
00:56:31,190 --> 00:56:34,930
the worker and give it the
event to start updating.

1486
00:56:34,930 --> 00:56:36,880
And then the worker does
its updates and then

1487
00:56:36,880 --> 00:56:37,470
it shuts down again.

1488
00:56:37,470 --> 00:56:39,650
And when the user next visits
the site, he'll get all the

1489
00:56:39,650 --> 00:56:41,130
latest stuff.

1490
00:56:41,130 --> 00:56:42,450
JAKE ARCHIBALD: So we're going
to go to the audience for the

1491
00:56:42,450 --> 00:56:44,300
next question, Jeffrey
Burtoft.

1492
00:56:44,300 --> 00:56:46,390
Where abouts are you?

1493
00:56:46,390 --> 00:56:47,640
Down here.

1494
00:56:47,640 --> 00:56:50,880

1495
00:56:50,880 --> 00:56:51,080
JEFFREY BURTOFT: Yeah.

1496
00:56:51,080 --> 00:56:52,870
I guess this ties in
a little bit more

1497
00:56:52,870 --> 00:56:54,520
with the last question.

1498
00:56:54,520 --> 00:56:57,920
So there are a lot of developers
in Microsoft

1499
00:56:57,920 --> 00:57:01,310
platform who are developing for
both our store apps, which

1500
00:57:01,310 --> 00:57:04,135
are HTML5-based, and then for
the web apps and trying to

1501
00:57:04,135 --> 00:57:05,530
bring those closer together.

1502
00:57:05,530 --> 00:57:08,970
One of the questions I hear a
lot about web apps is about

1503
00:57:08,970 --> 00:57:14,500
the safety of the data that is
stored, which I think tends to

1504
00:57:14,500 --> 00:57:16,530
push us more towards developing

1505
00:57:16,530 --> 00:57:18,490
in the native space.

1506
00:57:18,490 --> 00:57:22,430
What are we doing to make sure
that that data can be trusted,

1507
00:57:22,430 --> 00:57:26,745
can be safely encrypted and meet
needs of different type

1508
00:57:26,745 --> 00:57:27,810
of developers?

1509
00:57:27,810 --> 00:57:29,300
JAKE ARCHIBALD: So if we're
storing something like credit

1510
00:57:29,300 --> 00:57:32,480
card data or people's contact
information, what can we do to

1511
00:57:32,480 --> 00:57:34,620
make sure that other apps
can't sneak in there

1512
00:57:34,620 --> 00:57:35,595
and get that data?

1513
00:57:35,595 --> 00:57:38,590
Is it something we do already?

1514
00:57:38,590 --> 00:57:40,300
CRAIG CAVALIER: I think there
is a certain amount of that.

1515
00:57:40,300 --> 00:57:44,030
I mean, you have to be on the
same domain to be able to

1516
00:57:44,030 --> 00:57:45,630
access things like
local store.

1517
00:57:45,630 --> 00:57:50,090
So there's a certain amount
of security in place.

1518
00:57:50,090 --> 00:57:53,556
There's only so much you can do,
I think, with these kind

1519
00:57:53,556 --> 00:57:55,210
of devices.

1520
00:57:55,210 --> 00:57:55,690
ANNE VAN KESTEREN:
I'm not sure.

1521
00:57:55,690 --> 00:57:57,660
Is the question about what
the origin can access?

1522
00:57:57,660 --> 00:58:01,830
Or if someone has physical
access to the device, they can

1523
00:58:01,830 --> 00:58:04,160
access the local stored data
because it's not encrypted.

1524
00:58:04,160 --> 00:58:07,620
So in that case, it depends on
the security characteristics

1525
00:58:07,620 --> 00:58:09,170
provided by the OS.

1526
00:58:09,170 --> 00:58:13,130
And I think, in all the cases,
browsers default to what the

1527
00:58:13,130 --> 00:58:18,170
OS provides and don't have
additional layers on top.

1528
00:58:18,170 --> 00:58:19,910
Because if the OS is not
secured, then you're

1529
00:58:19,910 --> 00:58:22,020
compromised anyway.

1530
00:58:22,020 --> 00:58:25,270
ALEX RUSSELL: It depends on the
threat model, obviously,

1531
00:58:25,270 --> 00:58:29,580
but there is an API called Web
Crypto API, which Microsoft is

1532
00:58:29,580 --> 00:58:32,180
heavily involved in working
with Netflix and eBay and

1533
00:58:32,180 --> 00:58:34,590
Google and a bunch of other
people on this.

1534
00:58:34,590 --> 00:58:38,370
And one of the key aspects of
the Web Crypto API is that it

1535
00:58:38,370 --> 00:58:40,840
allows you to have wrapped
keys, which is are just

1536
00:58:40,840 --> 00:58:44,720
hardware tokens or tokens
protected by the OS which are

1537
00:58:44,720 --> 00:58:47,710
not owned by user space code, so
you can't actually see the

1538
00:58:47,710 --> 00:58:48,510
key material.

1539
00:58:48,510 --> 00:58:50,020
And you can do operations
with that.

1540
00:58:50,020 --> 00:58:52,800
So in that world, as long as you
trust the OS, you should

1541
00:58:52,800 --> 00:58:57,470
be able to get encrypted content
stored and allow that

1542
00:58:57,470 --> 00:58:59,210
to be trusted all the way
through the search chain back

1543
00:58:59,210 --> 00:59:00,380
to the server.

1544
00:59:00,380 --> 00:59:03,000
And I think that's a pretty
deft answer, actually.

1545
00:59:03,000 --> 00:59:05,160
I think it gives you most of
the control that you want,

1546
00:59:05,160 --> 00:59:07,140
without giving you most of the
complexity that you would like

1547
00:59:07,140 --> 00:59:08,670
not to have.

1548
00:59:08,670 --> 00:59:11,010
JAKE ARCHIBALD: And I think
that takes us out of time.

1549
00:59:11,010 --> 00:59:15,980
I know the bathrooms at Google
UK are completely out of Wi-Fi

1550
00:59:15,980 --> 00:59:17,500
and cellular data.

1551
00:59:17,500 --> 00:59:19,730
So it sounds like, if we can get
all this stuff solved, I

1552
00:59:19,730 --> 00:59:22,830
can be a lot more productive
than I am currently in my

1553
00:59:22,830 --> 00:59:24,310
spare time.

1554
00:59:24,310 --> 00:59:28,290
But if you're interested in any
of this stuff and want to

1555
00:59:28,290 --> 00:59:33,385
look at the spec as it is
currently, it's github.com/--

1556
00:59:33,385 --> 00:59:34,635
ALEX RUSSELL: slightlyoff/--

1557
00:59:34,635 --> 00:59:36,430

1558
00:59:36,430 --> 00:59:37,210
JAKE ARCHIBALD: serviceworker,
right?

1559
00:59:37,210 --> 00:59:38,380
ALEX RUSSELL: serviceworker,
yes.

1560
00:59:38,380 --> 00:59:39,370
JAKE ARCHIBALD: Excellent.

1561
00:59:39,370 --> 00:59:40,640
MATT ANDREWS: When will we
get that in a browser?

1562
00:59:40,640 --> 00:59:43,490
ALEX RUSSELL: So I can't speak
for Firefox, but I know that

1563
00:59:43,490 --> 00:59:45,560
there's prototypes happening
on the Mozilla side.

1564
00:59:45,560 --> 00:59:47,290
And on the Chrome side,
we've built a

1565
00:59:47,290 --> 00:59:48,430
prototype which does work.

1566
00:59:48,430 --> 00:59:51,342
And we're in the process
of implementing now.

1567
00:59:51,342 --> 00:59:51,690
JAKE ARCHIBALD: Excellent.

1568
00:59:51,690 --> 00:59:53,260
Well, thank you very
much, everyone.

1569
00:59:53,260 --> 01:00:03,178
[APPLAUSE]